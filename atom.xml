<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随遇而安</title>
  
  <subtitle>在自由的空气中漂浮</subtitle>
  <link href="https://www.iszy.cc/atom.xml" rel="self"/>
  
  <link href="https://www.iszy.cc/"/>
  <updated>2024-09-20T01:08:29.000Z</updated>
  <id>https://www.iszy.cc/</id>
  
  <author>
    <name>Dirge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自建Docker Hub加速镜像</title>
    <link href="https://www.iszy.cc/posts/nginx-docker-hub/"/>
    <id>https://www.iszy.cc/posts/nginx-docker-hub/</id>
    <published>2024-09-20T01:08:29.000Z</published>
    <updated>2024-09-20T01:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，国内一般不能顺畅拉取Docker镜像，要么部署私有仓库，要么使用国内的镜像地址。不过国内的镜像的版本同步没有那么及时，而且最近不知为啥好像都不能用了。部署私有仓库会在本地缓存包，也不太符合我的需求。所以最终决定通过Nginx反向代理DockerHub官方Registry地址，如果你也有一个能够流畅访问官方Docker地址的服务器，可以一试。</p><span id="more"></span><h2 id="一-nginx代理"><a class="markdownIt-Anchor" href="#一-nginx代理"></a> 一、Nginx代理</h2><p>基础配置代理了以下内容</p><ul><li>官方仓库地址: <code>registry-1.docker.io</code></li><li>jwt授权地址: <code>auth.docker.io</code></li><li>api地址: <code>index.docker.io</code></li></ul><p>限制:</p><ul><li>受到DockerHub单IP请求次数限制</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"># 使用 map 来匹配和替换 upstream 头部中的 auth.docker.io</span><br><span class="line">map $upstream_http_www_authenticate $m_www_authenticate_replaced &#123;</span><br><span class="line">    &quot;~auth\.docker\.io(.*)&quot; &quot;$1&quot;;</span><br><span class="line">    default &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map $m_www_authenticate_replaced $m_final_replaced &#123;</span><br><span class="line">    &quot;~(.*)&quot; &#x27;Bearer realm=\&quot;$scheme://$host$1&#x27;;</span><br><span class="line">    default &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">        # 改成自己的域名</span><br><span class="line">        server_name xxxx.example.com;</span><br><span class="line"></span><br><span class="line">        # 证书部分</span><br><span class="line">        ssl_certificate 证书地址;</span><br><span class="line">        ssl_certificate_key 密钥地址;</span><br><span class="line"></span><br><span class="line">        ssl_session_timeout 24h;</span><br><span class="line"></span><br><span class="line">        # TLS 版本控制</span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers on;      </span><br><span class="line">        ssl_ciphers TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:EECDH+CHACHA20:EECDH+AESGCM:EECDH+AES;</span><br><span class="line"></span><br><span class="line">        proxy_ssl_server_name on;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"></span><br><span class="line">        # 修改jwt授权地址</span><br><span class="line">        proxy_hide_header www-authenticate;</span><br><span class="line">        add_header www-authenticate &quot;$m_final_replaced&quot; always;</span><br><span class="line"></span><br><span class="line">        # 关闭缓存</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        # 转发认证相关</span><br><span class="line">        proxy_set_header Authorization $http_authorization;</span><br><span class="line">        proxy_pass_header  Authorization;</span><br><span class="line"></span><br><span class="line">        # 对 upstream 状态码检查，实现 error_page 错误重定向</span><br><span class="line">        proxy_intercept_errors on;</span><br><span class="line">        recursive_error_pages on;</span><br><span class="line">        # 根据状态码执行对应操作，以下为301、302、307状态码都会触发</span><br><span class="line">        error_page 301 302 307 = @handle_redirect;</span><br><span class="line"></span><br><span class="line">        # v1 api</span><br><span class="line">        location /v1 &#123;</span><br><span class="line">            proxy_pass https://index.docker.io;</span><br><span class="line">            proxy_set_header Host index.docker.io;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # v2 api</span><br><span class="line">        location /v2 &#123;</span><br><span class="line">            proxy_pass https://index.docker.io;</span><br><span class="line">            proxy_set_header Host index.docker.io;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # jwt授权地址</span><br><span class="line">        location /token &#123;</span><br><span class="line">            proxy_pass https://auth.docker.io;</span><br><span class="line">            proxy_set_header Host auth.docker.io;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            # Docker hub 的官方镜像仓库</span><br><span class="line">            proxy_pass https://registry-1.docker.io;</span><br><span class="line">            proxy_set_header Host registry-1.docker.io;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #处理重定向</span><br><span class="line">        location @handle_redirect &#123;</span><br><span class="line">            resolver 1.1.1.1;</span><br><span class="line">            set $saved_redirect_location &#x27;$upstream_http_location&#x27;;</span><br><span class="line">            proxy_pass $saved_redirect_location;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二-cloudflare-worker方案"><a class="markdownIt-Anchor" href="#二-cloudflare-worker方案"></a> 二、CloudFlare Worker方案</h2><p>CloudFlare Worker在国内访问速度不稳定，但是胜在免费，至少比官方镜像速度要快，可以作个备份。</p><p>在面板菜单找到 Workers 和 Pages，然后点击右侧的创建，创建Worker，取个名字，比如说docker，点击部署。</p><p>编辑代码，粘贴以下内容，注意修改其中的workers_url变量为实际的worker地址，或者绑定的自定义域名，点击保存并部署。这样就完成了。</p><p><strong>worker.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hub_host = <span class="string">&#x27;registry-1.docker.io&#x27;</span></span><br><span class="line"><span class="keyword">const</span> auth_url = <span class="string">&#x27;https://auth.docker.io&#x27;</span></span><br><span class="line"><span class="keyword">const</span> workers_url = <span class="string">&#x27;https://docker.xxxxx.workers.dev&#x27;</span> <span class="comment">// 换成实际的worker地址，或者绑定的自定义域名</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * static files (404.html, sw.js, conf.js)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">RequestInit</span>&#125; */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PREFLIGHT_INIT</span> = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">204</span>,</span><br><span class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">Headers</span>(&#123;</span><br><span class="line">        <span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;access-control-allow-methods&#x27;</span>: <span class="string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;access-control-max-age&#x27;</span>: <span class="string">&#x27;1728000&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; <span class="variable">body</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">status</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object&lt;string, string&gt;</span>&#125; <span class="variable">headers</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeRes</span>(<span class="params">body, status = <span class="number">200</span>, headers = &#123;&#125;</span>) &#123;</span><br><span class="line">    headers[<span class="string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(body, &#123;status, headers&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">urlStr</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newUrl</span>(<span class="params">urlStr</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(urlStr)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="title function_">fetchHandler</span>(e)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">makeRes</span>(<span class="string">&#x27;cfworker error:\n&#x27;</span> + err.<span class="property">stack</span>, <span class="number">502</span>))</span><br><span class="line">    e.<span class="title function_">respondWith</span>(ret)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FetchEvent</span>&#125; <span class="variable">e</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getReqHeader</span> = (<span class="params">key</span>) =&gt; e.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">get</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(e.<span class="property">request</span>.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (url.<span class="property">pathname</span> === <span class="string">&#x27;/token&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> token_parameter = &#123;</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;auth.docker.io&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;User-Agent&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Language&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Encoding&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">let</span> token_url = auth_url + url.<span class="property">pathname</span> + url.<span class="property">search</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(token_url, e.<span class="property">request</span>), token_parameter)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  url.<span class="property">hostname</span> = hub_host;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> parameter = &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Host&#x27;</span>: hub_host,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;User-Agent&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Language&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Encoding&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cacheTtl</span>: <span class="number">3600</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">has</span>(<span class="string">&quot;Authorization&quot;</span>)) &#123;</span><br><span class="line">    parameter.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="title function_">getReqHeader</span>(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> original_response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(url, e.<span class="property">request</span>), parameter)</span><br><span class="line">  <span class="keyword">let</span> original_response_clone = original_response.<span class="title function_">clone</span>();</span><br><span class="line">  <span class="keyword">let</span> original_text = original_response_clone.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">let</span> response_headers = original_response.<span class="property">headers</span>;</span><br><span class="line">  <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response_headers);</span><br><span class="line">  <span class="keyword">let</span> status = original_response.<span class="property">status</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;WWW-Authenticate&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(auth_url, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;WWW-Authenticate&quot;</span>, response_headers.<span class="title function_">get</span>(<span class="string">&quot;WWW-Authenticate&quot;</span>).<span class="title function_">replace</span>(re, workers_url));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;Location&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">httpHandler</span>(e.<span class="property">request</span>, new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;Location&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">new</span> <span class="title class_">Response</span>(original_text, &#123;</span><br><span class="line">            status,</span><br><span class="line">            <span class="attr">headers</span>: new_response_headers</span><br><span class="line">        &#125;)</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Request</span>&#125; <span class="variable">req</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">pathname</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">httpHandler</span>(<span class="params">req, pathname</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reqHdrRaw = req.<span class="property">headers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// preflight</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;OPTIONS&#x27;</span> &amp;&amp;</span><br><span class="line">        reqHdrRaw.<span class="title function_">has</span>(<span class="string">&#x27;access-control-request-headers&#x27;</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, <span class="variable constant_">PREFLIGHT_INIT</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rawLen = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reqHdrNew = <span class="keyword">new</span> <span class="title class_">Headers</span>(reqHdrRaw)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> refer = reqHdrNew.<span class="title function_">get</span>(<span class="string">&#x27;referer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> urlStr = pathname</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> urlObj = <span class="title function_">newUrl</span>(urlStr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">RequestInit</span>&#125; */</span></span><br><span class="line">    <span class="keyword">const</span> reqInit = &#123;</span><br><span class="line">        <span class="attr">method</span>: req.<span class="property">method</span>,</span><br><span class="line">        <span class="attr">headers</span>: reqHdrNew,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: req.<span class="property">body</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">proxy</span>(urlObj, reqInit, rawLen, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">URL</span>&#125; <span class="variable">urlObj</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">RequestInit</span>&#125; <span class="variable">reqInit</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">proxy</span>(<span class="params">urlObj, reqInit, rawLen</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(urlObj.<span class="property">href</span>, reqInit)</span><br><span class="line">    <span class="keyword">const</span> resHdrOld = res.<span class="property">headers</span></span><br><span class="line">    <span class="keyword">const</span> resHdrNew = <span class="keyword">new</span> <span class="title class_">Headers</span>(resHdrOld)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify</span></span><br><span class="line">    <span class="keyword">if</span> (rawLen) &#123;</span><br><span class="line">        <span class="keyword">const</span> newLen = resHdrOld.<span class="title function_">get</span>(<span class="string">&#x27;content-length&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> badLen = (rawLen !== newLen)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (badLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">makeRes</span>(res.<span class="property">body</span>, <span class="number">400</span>, &#123;</span><br><span class="line">                <span class="string">&#x27;--error&#x27;</span>: <span class="string">`bad len: <span class="subst">$&#123;newLen&#125;</span>, except: <span class="subst">$&#123;rawLen&#125;</span>`</span>,</span><br><span class="line">                <span class="string">&#x27;access-control-expose-headers&#x27;</span>: <span class="string">&#x27;--error&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> status = res.<span class="property">status</span></span><br><span class="line">    resHdrNew.<span class="title function_">set</span>(<span class="string">&#x27;access-control-expose-headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    resHdrNew.<span class="title function_">set</span>(<span class="string">&#x27;access-control-allow-origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    resHdrNew.<span class="title function_">set</span>(<span class="string">&#x27;Cache-Control&#x27;</span>, <span class="string">&#x27;max-age=1500&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    resHdrNew.<span class="title function_">delete</span>(<span class="string">&#x27;content-security-policy&#x27;</span>)</span><br><span class="line">    resHdrNew.<span class="title function_">delete</span>(<span class="string">&#x27;content-security-policy-report-only&#x27;</span>)</span><br><span class="line">    resHdrNew.<span class="title function_">delete</span>(<span class="string">&#x27;clear-site-data&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(res.<span class="property">body</span>, &#123;</span><br><span class="line">        status,</span><br><span class="line">        <span class="attr">headers</span>: resHdrNew</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-整合方案"><a class="markdownIt-Anchor" href="#三-整合方案"></a> 三、整合方案</h2><p>还是采用Nginx代理方式，当超出请求数量限制，返回429错误时，将后端转发给CloudFlare Worker。</p><p>需要对Nginx配置加上一小段对429错误的转发。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        # ....</span><br><span class="line">        error_page 429 = @handle_too_many_requests;</span><br><span class="line"></span><br><span class="line">        # 处理429错误</span><br><span class="line">        location @handle_too_many_requests &#123;</span><br><span class="line">            proxy_set_header Host docker.xxxxx.workers.dev;  # 替换为另一个服务器的地址</span><br><span class="line">            proxy_pass http://docker.xxxxx.workers.dev;</span><br><span class="line">        &#125;</span><br><span class="line">        # ....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>worker.js也需要修改一下，把worker_url改为nginx代理的地址。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> workers_url = <span class="string">&#x27;https://xxxx.example.com&#x27;</span> <span class="comment">// 改为nginx代理的地址</span></span><br></pre></td></tr></table></figure><p><strong>完整配置</strong></p><h3 id="nginx-配置"><a class="markdownIt-Anchor" href="#nginx-配置"></a> Nginx 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"># 使用 map 来匹配和替换 upstream 头部中的 auth.docker.io</span><br><span class="line">map $upstream_http_www_authenticate $m_www_authenticate_replaced &#123;</span><br><span class="line">    &quot;~auth\.docker\.io(.*)&quot; &quot;$1&quot;;</span><br><span class="line">    default &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map $m_www_authenticate_replaced $m_final_replaced &#123;</span><br><span class="line">    &quot;~(.*)&quot; &#x27;Bearer realm=\&quot;$scheme://$host$1&#x27;;</span><br><span class="line">    default &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">        # 改成自己的域名</span><br><span class="line">        server_name xxxx.example.com;</span><br><span class="line"></span><br><span class="line">        # 证书部分</span><br><span class="line">        ssl_certificate 证书地址;</span><br><span class="line">        ssl_certificate_key 密钥地址;</span><br><span class="line"></span><br><span class="line">        ssl_session_timeout 24h;</span><br><span class="line"></span><br><span class="line">        # TLS 版本控制</span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers on;      </span><br><span class="line">        ssl_ciphers TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:EECDH+CHACHA20:EECDH+AESGCM:EECDH+AES;</span><br><span class="line"></span><br><span class="line">        proxy_ssl_server_name on;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"></span><br><span class="line">        # 修改jwt授权地址</span><br><span class="line">        proxy_hide_header www-authenticate;</span><br><span class="line">        add_header www-authenticate &quot;$m_final_replaced&quot; always;</span><br><span class="line"></span><br><span class="line">        # 关闭缓存</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        # 转发认证相关</span><br><span class="line">        proxy_set_header Authorization $http_authorization;</span><br><span class="line">        proxy_pass_header  Authorization;</span><br><span class="line"></span><br><span class="line">        # 对 upstream 状态码检查，实现 error_page 错误重定向</span><br><span class="line">        proxy_intercept_errors on;</span><br><span class="line">        recursive_error_pages on;</span><br><span class="line">        # 根据状态码执行对应操作，以下为301、302、307状态码都会触发</span><br><span class="line">        error_page 301 302 307 = @handle_redirect;</span><br><span class="line"></span><br><span class="line">        error_page 429 = @handle_too_many_requests;</span><br><span class="line"></span><br><span class="line">        # v1 api</span><br><span class="line">        location /v1 &#123;</span><br><span class="line">            proxy_pass https://index.docker.io;</span><br><span class="line">            proxy_set_header Host index.docker.io;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # v2 api</span><br><span class="line">        location /v2 &#123;</span><br><span class="line">            proxy_pass https://index.docker.io;</span><br><span class="line">            proxy_set_header Host index.docker.io;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # jwt授权地址</span><br><span class="line">        location /token &#123;</span><br><span class="line">            proxy_pass https://auth.docker.io;</span><br><span class="line">            proxy_set_header Host auth.docker.io;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            # Docker hub 的官方镜像仓库</span><br><span class="line">            proxy_pass https://registry-1.docker.io;</span><br><span class="line">            proxy_set_header Host registry-1.docker.io;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #处理重定向</span><br><span class="line">        location @handle_redirect &#123;</span><br><span class="line">            resolver 1.1.1.1;</span><br><span class="line">            set $saved_redirect_location &#x27;$upstream_http_location&#x27;;</span><br><span class="line">            proxy_pass $saved_redirect_location;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 处理429错误</span><br><span class="line">        location @handle_too_many_requests &#123;</span><br><span class="line">            proxy_set_header Host docker.iszy.workers.dev;  # 替换为另一个服务器的地址</span><br><span class="line">            proxy_pass http://docker.iszy.workers.dev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="workerjs"><a class="markdownIt-Anchor" href="#workerjs"></a> Worker.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hub_host = <span class="string">&#x27;registry-1.docker.io&#x27;</span></span><br><span class="line"><span class="keyword">const</span> auth_url = <span class="string">&#x27;https://auth.docker.io&#x27;</span></span><br><span class="line"><span class="keyword">const</span> workers_url = <span class="string">&#x27;https://xxxx.example.com&#x27;</span> <span class="comment">// 改为nginx代理的地址</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * static files (404.html, sw.js, conf.js)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">RequestInit</span>&#125; */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PREFLIGHT_INIT</span> = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">204</span>,</span><br><span class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">Headers</span>(&#123;</span><br><span class="line">        <span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;access-control-allow-methods&#x27;</span>: <span class="string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;access-control-max-age&#x27;</span>: <span class="string">&#x27;1728000&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; <span class="variable">body</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">status</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object&lt;string, string&gt;</span>&#125; <span class="variable">headers</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeRes</span>(<span class="params">body, status = <span class="number">200</span>, headers = &#123;&#125;</span>) &#123;</span><br><span class="line">    headers[<span class="string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(body, &#123;status, headers&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">urlStr</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newUrl</span>(<span class="params">urlStr</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(urlStr)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="title function_">fetchHandler</span>(e)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">makeRes</span>(<span class="string">&#x27;cfworker error:\n&#x27;</span> + err.<span class="property">stack</span>, <span class="number">502</span>))</span><br><span class="line">    e.<span class="title function_">respondWith</span>(ret)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FetchEvent</span>&#125; <span class="variable">e</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getReqHeader</span> = (<span class="params">key</span>) =&gt; e.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">get</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(e.<span class="property">request</span>.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (url.<span class="property">pathname</span> === <span class="string">&#x27;/token&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> token_parameter = &#123;</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;auth.docker.io&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;User-Agent&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Language&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Encoding&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">let</span> token_url = auth_url + url.<span class="property">pathname</span> + url.<span class="property">search</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(token_url, e.<span class="property">request</span>), token_parameter)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  url.<span class="property">hostname</span> = hub_host;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> parameter = &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Host&#x27;</span>: hub_host,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;User-Agent&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Language&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Encoding&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cacheTtl</span>: <span class="number">3600</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">has</span>(<span class="string">&quot;Authorization&quot;</span>)) &#123;</span><br><span class="line">    parameter.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="title function_">getReqHeader</span>(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> original_response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(url, e.<span class="property">request</span>), parameter)</span><br><span class="line">  <span class="keyword">let</span> original_response_clone = original_response.<span class="title function_">clone</span>();</span><br><span class="line">  <span class="keyword">let</span> original_text = original_response_clone.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">let</span> response_headers = original_response.<span class="property">headers</span>;</span><br><span class="line">  <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response_headers);</span><br><span class="line">  <span class="keyword">let</span> status = original_response.<span class="property">status</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;WWW-Authenticate&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(auth_url, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;WWW-Authenticate&quot;</span>, response_headers.<span class="title function_">get</span>(<span class="string">&quot;WWW-Authenticate&quot;</span>).<span class="title function_">replace</span>(re, workers_url));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;Location&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">httpHandler</span>(e.<span class="property">request</span>, new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;Location&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">new</span> <span class="title class_">Response</span>(original_text, &#123;</span><br><span class="line">            status,</span><br><span class="line">            <span class="attr">headers</span>: new_response_headers</span><br><span class="line">        &#125;)</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Request</span>&#125; <span class="variable">req</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">pathname</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">httpHandler</span>(<span class="params">req, pathname</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reqHdrRaw = req.<span class="property">headers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// preflight</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;OPTIONS&#x27;</span> &amp;&amp;</span><br><span class="line">        reqHdrRaw.<span class="title function_">has</span>(<span class="string">&#x27;access-control-request-headers&#x27;</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, <span class="variable constant_">PREFLIGHT_INIT</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rawLen = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reqHdrNew = <span class="keyword">new</span> <span class="title class_">Headers</span>(reqHdrRaw)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> refer = reqHdrNew.<span class="title function_">get</span>(<span class="string">&#x27;referer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> urlStr = pathname</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> urlObj = <span class="title function_">newUrl</span>(urlStr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">RequestInit</span>&#125; */</span></span><br><span class="line">    <span class="keyword">const</span> reqInit = &#123;</span><br><span class="line">        <span class="attr">method</span>: req.<span class="property">method</span>,</span><br><span class="line">        <span class="attr">headers</span>: reqHdrNew,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: req.<span class="property">body</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">proxy</span>(urlObj, reqInit, rawLen, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">URL</span>&#125; <span class="variable">urlObj</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">RequestInit</span>&#125; <span class="variable">reqInit</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">proxy</span>(<span class="params">urlObj, reqInit, rawLen</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(urlObj.<span class="property">href</span>, reqInit)</span><br><span class="line">    <span class="keyword">const</span> resHdrOld = res.<span class="property">headers</span></span><br><span class="line">    <span class="keyword">const</span> resHdrNew = <span class="keyword">new</span> <span class="title class_">Headers</span>(resHdrOld)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify</span></span><br><span class="line">    <span class="keyword">if</span> (rawLen) &#123;</span><br><span class="line">        <span class="keyword">const</span> newLen = resHdrOld.<span class="title function_">get</span>(<span class="string">&#x27;content-length&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> badLen = (rawLen !== newLen)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (badLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">makeRes</span>(res.<span class="property">body</span>, <span class="number">400</span>, &#123;</span><br><span class="line">                <span class="string">&#x27;--error&#x27;</span>: <span class="string">`bad len: <span class="subst">$&#123;newLen&#125;</span>, except: <span class="subst">$&#123;rawLen&#125;</span>`</span>,</span><br><span class="line">                <span class="string">&#x27;access-control-expose-headers&#x27;</span>: <span class="string">&#x27;--error&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> status = res.<span class="property">status</span></span><br><span class="line">    resHdrNew.<span class="title function_">set</span>(<span class="string">&#x27;access-control-expose-headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    resHdrNew.<span class="title function_">set</span>(<span class="string">&#x27;access-control-allow-origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    resHdrNew.<span class="title function_">set</span>(<span class="string">&#x27;Cache-Control&#x27;</span>, <span class="string">&#x27;max-age=1500&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    resHdrNew.<span class="title function_">delete</span>(<span class="string">&#x27;content-security-policy&#x27;</span>)</span><br><span class="line">    resHdrNew.<span class="title function_">delete</span>(<span class="string">&#x27;content-security-policy-report-only&#x27;</span>)</span><br><span class="line">    resHdrNew.<span class="title function_">delete</span>(<span class="string">&#x27;clear-site-data&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(res.<span class="property">body</span>, &#123;</span><br><span class="line">        status,</span><br><span class="line">        <span class="attr">headers</span>: resHdrNew</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;众所周知，国内一般不能顺畅拉取Docker镜像，要么部署私有仓库，要么使用国内的镜像地址。不过国内的镜像的版本同步没有那么及时，而且最近不知为啥好像都不能用了。部署私有仓库会在本地缓存包，也不太符合我的需求。所以最终决定通过Nginx反向代理DockerHub官方Registry地址，如果你也有一个能够流畅访问官方Docker地址的服务器，可以一试。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Docker" scheme="https://www.iszy.cc/tags/Docker/"/>
    
    <category term="Nginx" scheme="https://www.iszy.cc/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>SVN迁移至GIT，并附带历史提交记录</title>
    <link href="https://www.iszy.cc/posts/svn-to-git/"/>
    <id>https://www.iszy.cc/posts/svn-to-git/</id>
    <published>2024-05-07T03:42:45.000Z</published>
    <updated>2024-05-07T03:42:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着信息工程的多元化发展，Git 逐渐取代 SVN 成为主流的版本管理工具。为了将项目迁移到 Git，且不丢失修改历史，特此调研实现方案。</p><span id="more"></span><h2 id="一-准备工作"><a class="markdownIt-Anchor" href="#一-准备工作"></a> 一、准备工作</h2><p>在本地安装以下软件：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXQtZm9yLXdpbmRvd3MuZ2l0aHViLmlvLw==">Git<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdWJ2ZXJzaW9uLmFwYWNoZS5vcmcvcGFja2FnZXMuaHRtbA==">Subversion<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9wdWIvc29mdHdhcmUvc2NtL2dpdC9kb2NzL2dpdC1zdm4uaHRtbA==">git-svn 实用工具<i class="fa fa-external-link-alt"></i></span> (Win 版 Git 已包含)</li></ul><h2 id="二-将源-svn-存储库转换为本地-git-存储库"><a class="markdownIt-Anchor" href="#二-将源-svn-存储库转换为本地-git-存储库"></a> 二、将源 SVN 存储库转换为本地 Git 存储库</h2><h3 id="1-检索所有-subversion-作者的列表"><a class="markdownIt-Anchor" href="#1-检索所有-subversion-作者的列表"></a> 1. 检索所有 Subversion 作者的列表</h3><p>从本地 Subversion 签出根目录提取所有 SVN 用户的列表，在 PowerShell 中运行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn.exe log --quiet | ? &#123; $_ -notlike &#x27;-*&#x27; &#125; | % &#123; &quot;&#123;0&#125; = &#123;0&#125; &lt;&#123;0&#125;&gt;&quot; -f ($_ -split &#x27; \| &#x27;)[1] &#125; | Select-Object -Unique | Sort-Object | Out-File &#x27;authors-transform.txt&#x27; -Encoding utf8NoBOM</span><br></pre></td></tr></table></figure><p>此命令将检索所有日志消息、提取用户名、消除任何重复用户名、对用户名进行排序，并将其放入 UTF-8 格式的 <code>authors-transform.txt</code> 文件中。</p><p>Subversion 仅使用每次提交的用户名，而 Git 存储真实姓名和电子邮件地址。 默认情况下，git-svn 工具将在作者和电子邮件字段中列出 SVN 用户名。 但是，可以为 SVN 用户创建映射文件及其相应的 Git 名称和电子邮件。</p><p>如有需要，可以编辑文件中的每一行，以创建 SVN 用户到格式正确的 Git 用户的映射。 例如，可将 <code>jamal = jamal &lt;jamal&gt;</code> 映射到 <code>jamal = Jamal Hartnett &lt;jamal@fabrikam-fiber.com&gt;</code>。</p><p>最终内容参考如下图，内容手动改出来的。</p><p><img data-src="https://img.iszy.xyz/1715064451591.png" alt="" /></p><h3 id="2-使用-git-svn-克隆-subversion-存储库"><a class="markdownIt-Anchor" href="#2-使用-git-svn-克隆-subversion-存储库"></a> 2. 使用 git-svn 克隆 Subversion 存储库</h3><p>以下命令将使用在上一步中创建的 <code>authors-transform.txt</code> 文件执行标准 git-svn 转换。 它将 Git 存储库放置在本地计算机的 c:\mytempdir 文件夹中。此处可以使用相对路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git svn clone [&quot;SVN repo URL&quot;] --prefix=svn/ --no-metadata --authors-file &quot;authors-transform.txt&quot; --stdlayout c:\mytempdir</span><br></pre></td></tr></table></figure><blockquote><p>备注</p><p><code>--prefix=svn/</code> 是必需的，否则工具无法从导入的修订中判断 SVN 修订。 建议设置一个前缀（带有尾部斜杠），原因是因为 SVN 跟踪引用将位于 <code>refs/remotes/$prefix/</code>，这与 Git 自己的远程跟踪分支布局 (refs/remotes/$remote/) 兼容。</p><p>如果要跟踪共享通用存储库的多个项目，设置前缀也很有用。 默认情况下，前缀设置为 origin/。</p></blockquote><p>如果使用标准 trunk、分支、标记布局，只需使用 <code>--stdlayout</code>。</p><p><img data-src="https://img.iszy.xyz/1715063051410.png" alt="标准布局" /></p><p>但是，如果使用的是其他布局，则可能需要传递 <code>--trunk</code>、<code>--branches</code> 和 <code>--tags</code> 来找到具体是什么。 例如，如果存储库结构为 <code>trunk/companydir</code>，并且对存储库使用的是分支而不是 trunk，则可能需要使用 <code>--trunk=trunk/companydir --branches=branches</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git svn clone [&quot;SVN repo URL&quot;] --prefix=svn/ --no-metadata --trunk=/trunk --branches=/branches --tags=/tags  --authors-file &quot;authors-transform.txt&quot; c:\mytempdir</span><br></pre></td></tr></table></figure><p>如果 svn 仓库需要密码验证，可以传递 <code>--username</code> 来指定用户名。</p><p>更多参数可以访问<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1zdm4=">git-svn 文档<i class="fa fa-external-link-alt"></i></span>。</p><h4 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h4><p>这里举一个例子，我这边的项目，项目结构就不太规范，甚至没有 branches 和 tags，根目录就是 trunk，需要用户名密码验证。命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git svn clone [&quot;SVN repo URL&quot;] --prefix=svn/ --no-metadata --trunk=/ --authors-file &quot;authors-transform.txt&quot; --username=jamal mytempdir</span><br></pre></td></tr></table></figure><p>完成以后在本地查看生成的仓库分支信息，就类似于这样，原来的分支都会挂在 svn 这个远程下，本地 main 分支即为原来的 trunk 内容。</p><p><img data-src="https://img.iszy.xyz/1715064038320.png" alt="" /></p><h2 id="三-将存储库推送到空-git-存储库"><a class="markdownIt-Anchor" href="#三-将存储库推送到空-git-存储库"></a> 三、将存储库推送到空 Git 存储库</h2><p>现在创建一个空的 Git 存储库，这步就不多说了。</p><p>将新的远程仓库信息添加到本地 Git 仓库，将分支推送到远程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [&quot;Git repo URL&quot;]</span><br><span class="line">git push --set-upstream origin --all</span><br><span class="line">git push --set-upstream origin --tags</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着信息工程的多元化发展，Git 逐渐取代 SVN 成为主流的版本管理工具。为了将项目迁移到 Git，且不丢失修改历史，特此调研实现方案。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Git" scheme="https://www.iszy.cc/tags/Git/"/>
    
    <category term="SVN" scheme="https://www.iszy.cc/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>OpenVPN同时连接多个VPN服务</title>
    <link href="https://www.iszy.cc/posts/multi-openvpn/"/>
    <id>https://www.iszy.cc/posts/multi-openvpn/</id>
    <published>2024-03-27T06:13:47.000Z</published>
    <updated>2024-03-27T06:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发工作中，要连接不同的环境需要连接不同的 VPN 服务，OpenVPN 默认只会添加一个 Tap 网卡，只能来回切换 VPN，很不方便。所以我们只需要能够增加更多的 Tap 网卡即可。</p><span id="more"></span><p>接下来的操作都是以安装完 OpenVPN 为前提的，如果没有安装，可以前往<span class="exturl" data-url="aHR0cHM6Ly9vcGVudnBuLm5ldC9jb21tdW5pdHktZG93bmxvYWRzLw==">官网<i class="fa fa-external-link-alt"></i></span>进行安装。</p><p>默认的 OpenVPN 安装目录为 <code>C:\Program Files\OpenVPN</code>，这边就以默认目录为例。</p><h2 id="最简单的方法"><a class="markdownIt-Anchor" href="#最简单的方法"></a> 最简单的方法</h2><p><img data-src="https://img.iszy.xyz/1711520900617.png" alt="" /></p><p>其实最新的 OpenVPN 版本为了用户方便考虑，在开始菜单里面提供了添加新 Tap 网卡的快捷命令，<strong>只要点击就会自动添加一个新的 Tap 网卡</strong>，网卡会自动命名。需要同时连接几个 OpenVPN 服务，就增加几个网卡，OpenVPN 会自动使用空闲的 Tap 网卡进行连接。</p><p>打开这个快捷方式的属性就可以看到，其实这个就是包装了一个创建 Tap 网卡的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\OpenVPN\bin\tapctl.exe create --hwid root\tap0901</span><br></pre></td></tr></table></figure><h2 id="手动操作"><a class="markdownIt-Anchor" href="#手动操作"></a> 手动操作</h2><p>在<strong>管理员权限</strong>的 PowerShell 中执行</p><p>进入 OpenVPN 安装目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;C:\Program Files\OpenVPN&quot;</span><br></pre></td></tr></table></figure><h3 id="查看-tap-adapter"><a class="markdownIt-Anchor" href="#查看-tap-adapter"></a> 查看 Tap adapter</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\tapctl.exe list</span><br></pre></td></tr></table></figure><p>输出</p><p><img data-src="https://img.iszy.xyz/1711521772122.png" alt="" /></p><p>或者使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\openvpn.exe --show-adapters</span><br></pre></td></tr></table></figure><p>输出</p><p><img data-src="https://img.iszy.xyz/1711521749124.png" alt="" /></p><h3 id="新增-tap-adapter"><a class="markdownIt-Anchor" href="#新增-tap-adapter"></a> 新增 Tap adapter</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\tapctl.exe create --name &quot;test&quot; --hwid root\tap0901</span><br></pre></td></tr></table></figure><p>可以通过 <code>name</code> 参数指定网卡名称，网卡名称不能重复。创建成功后，将会返回创建的网卡 id。</p><p>查看一下列表，可以看到网卡已经正常添加。</p><p><img data-src="https://img.iszy.xyz/1711522259063.png" alt="" /></p><h3 id="删除-tap-adapter"><a class="markdownIt-Anchor" href="#删除-tap-adapter"></a> 删除 Tap adapter</h3><p>如果 Tap 网卡多了，或者不想要那些之前默认的网卡，可以删除掉。删除成功不会返回内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\tapctl.exe delete &quot;test&quot;</span><br></pre></td></tr></table></figure><h3 id="openvpn-配置文件指定网卡"><a class="markdownIt-Anchor" href="#openvpn-配置文件指定网卡"></a> OpenVPN 配置文件指定网卡</h3><p>可以添加以下配置到 ovpn 文件中，可以按照名称指定使用的网卡。注意，如果该名称的网卡不存在将会报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dev-node test</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在日常开发工作中，要连接不同的环境需要连接不同的 VPN 服务，OpenVPN 默认只会添加一个 Tap 网卡，只能来回切换 VPN，很不方便。所以我们只需要能够增加更多的 Tap 网卡即可。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="OpenVPN" scheme="https://www.iszy.cc/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>OpenVPN连接2.3及更老版本服务端问题</title>
    <link href="https://www.iszy.cc/posts/openvpn-connect-2-3/"/>
    <id>https://www.iszy.cc/posts/openvpn-connect-2-3/</id>
    <published>2024-03-27T03:38:34.000Z</published>
    <updated>2024-03-27T03:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于需要连接几个公司不同的 OpenVPN 服务，各家都提供了自己的定制 OpenVPN 客户端，不胜其烦。而且个人不太喜欢使用旧版本的客户端，理论上使用最新的 OpenVPN 客户端没有道理不能连接，遂研究开始。</p><span id="more"></span><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><p>一般情况下，需要连接的 OpenVPN 服务端版本越老，由于各种安全限制逐渐收紧，老版本使用的安全协议逐渐不受支持，问题也就越多。</p><p>这里我需要连接的最老的 OpenVPN 版本是 2.1.1 的，使用的客户端是文章编写时<span class="exturl" data-url="aHR0cHM6Ly9vcGVudnBuLm5ldC9jb21tdW5pdHktZG93bmxvYWRzLw==">最新的 OpenVPN 开源客户端<i class="fa fa-external-link-alt"></i></span> 2.6.10 版本。</p><p>直接使用公司提供的 ovpn 配置文件进行连接，不出意料的报错失败了。</p><p>点这里<a href="#%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B">直接看结论</a></p><h2 id="解决问题"><a class="markdownIt-Anchor" href="#解决问题"></a> 解决问题</h2><h3 id="问题一tls-handshake-failed"><a class="markdownIt-Anchor" href="#问题一tls-handshake-failed"></a> 问题一：TLS handshake failed</h3><p>先看一下连接出现的报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2024-03-27 10:29:54 Received fatal SSL alert: handshake failure</span><br><span class="line">2024-03-27 10:29:54 OpenSSL: error:0A000410:SSL routines::ssl/tls alert handshake failure:SSL alert number 40</span><br><span class="line">2024-03-27 10:29:54 TLS_ERROR: BIO read tls_read_plaintext error</span><br><span class="line">2024-03-27 10:29:54 TLS Error: TLS object -&gt; incoming plaintext read error</span><br><span class="line">2024-03-27 10:29:54 TLS Error: TLS handshake failed</span><br><span class="line">2024-03-27 10:29:54 Fatal TLS error (check_tls_errors_co), restarting</span><br><span class="line">2024-03-27 10:29:54 SIGUSR1[soft,tls-error] received, process restarting</span><br><span class="line">2024-03-27 10:29:54 MANAGEMENT: &gt;STATE:1711506594,RECONNECTING,tls-error,,,,,</span><br></pre></td></tr></table></figure><p>从这边的报错可以看到，是 TLS 协商握手直接就失败了。</p><p>经过相关搜索，在 OpenVPN Community 的 Wiki 中的 <span class="exturl" data-url="aHR0cHM6Ly9jb21tdW5pdHkub3BlbnZwbi5uZXQvb3BlbnZwbi93aWtpL0hhcmRlbmluZyNVc2VvZi0tdGxzLWNpcGhlcg==">tls-cipher<i class="fa fa-external-link-alt"></i></span> 配置部分提到了可能的原因。<strong>在 OpenVPN 2.3.2 版本之前，只有 TLSv1.0 RSA cipher 可用。在 OpenVPN 2.4 版本后，对默认的 cipher 列表添加了新的限制。</strong></p><p><img data-src="https://img.iszy.xyz/1711506949529.png" alt="" /></p><p>经过尝试，在 <strong>ovpn 配置中增加如下内容</strong>，使用 <strong>OpenVPN 2.4 版本</strong>能够正常进行连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tls-cipher DEFAULT:!EXP:!LOW</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tls-cipher DEFAULT</span><br></pre></td></tr></table></figure><h3 id="问题二-data-cipher"><a class="markdownIt-Anchor" href="#问题二-data-cipher"></a> 问题二: data-cipher</h3><p>虽然加上上面的配置在 OpenVPN 2.4 可以正常连接了，但是在 OpenVPN 2.6.10 上仍然有问题没有解决。</p><p>看看新的日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">2024-03-27 10:47:26 MANAGEMENT: &gt;STATE:1711507646,RESOLVE,,,,,,</span><br><span class="line">2024-03-27 10:47:26 TCP/UDP: Preserving recently used remote address: [AF_INET]xxx.xxx.xxx.xxx:xxxx</span><br><span class="line">2024-03-27 10:47:26 Socket Buffers: R=[65536-&gt;65536] S=[65536-&gt;65536]</span><br><span class="line">2024-03-27 10:47:26 Attempting to establish TCP connection with [AF_INET]xxx.xxx.xxx.xxx:xxxx</span><br><span class="line">2024-03-27 10:47:26 MANAGEMENT: &gt;STATE:1711507646,TCP_CONNECT,,,,,,</span><br><span class="line">2024-03-27 10:47:26 TCP connection established with [AF_INET]xxx.xxx.xxx.xxx:xxxx</span><br><span class="line">2024-03-27 10:47:26 TCPv4_CLIENT link local: (not bound)</span><br><span class="line">2024-03-27 10:47:26 TCPv4_CLIENT link remote: [AF_INET]xxx.xxx.xxx.xxx:xxxx</span><br><span class="line">2024-03-27 10:47:26 MANAGEMENT: &gt;STATE:1711507646,WAIT,,,,,,</span><br><span class="line">2024-03-27 10:47:26 MANAGEMENT: &gt;STATE:1711507646,AUTH,,,,,,</span><br><span class="line">2024-03-27 10:47:26 TLS: Initial packet from [AF_INET]xxx.xxx.xxx.xxx:xxxx, sid=7a8a0685 8d7eb18c</span><br><span class="line">2024-03-27 10:47:26 VERIFY OK: depth=1, C=CN, ST=XX, L=XX, O=XX, OU=ovpn, CN=XX, name=ovpn, emailAddress=XX@XX.XX</span><br><span class="line">2024-03-27 10:47:26 VERIFY KU OK</span><br><span class="line">2024-03-27 10:47:26 Validating certificate extended key usage</span><br><span class="line">2024-03-27 10:47:26 ++ Certificate has EKU (str) TLS Web Server Authentication, expects TLS Web Server Authentication</span><br><span class="line">2024-03-27 10:47:26 VERIFY EKU OK</span><br><span class="line">2024-03-27 10:47:26 VERIFY OK: depth=0, C=CN, ST=XX, L=XX, O=XX, OU=ovpn, CN=XX, name=ovpn, emailAddress=XX@XX.XX</span><br><span class="line">2024-03-27 10:47:26 Connection reset, restarting [0]</span><br><span class="line">2024-03-27 10:47:26 SIGUSR1[soft,connection-reset] received, process restarting</span><br><span class="line">2024-03-27 10:47:26 MANAGEMENT: &gt;STATE:1711507646,RECONNECTING,connection-reset,,,,,</span><br><span class="line">2024-03-27 10:47:26 Restart pause, 1 second(s)</span><br></pre></td></tr></table></figure><p>这里很奇怪，证书验证正确，但是连接断开了。</p><p>从这里看不出来，那就从老版本的连接日志里看看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Wed Mar 27 11:02:31 2024 Data Channel Encrypt: Cipher &#x27;BF-CBC&#x27; initialized with 128 bit key</span><br><span class="line">Wed Mar 27 11:02:31 2024 Data Channel Encrypt: Using 160 bit message hash &#x27;SHA1&#x27; for HMAC authentication</span><br><span class="line">Wed Mar 27 11:02:31 2024 Data Channel Decrypt: Cipher &#x27;BF-CBC&#x27; initialized with 128 bit key</span><br><span class="line">Wed Mar 27 11:02:31 2024 Data Channel Decrypt: Using 160 bit message hash &#x27;SHA1&#x27; for HMAC authentication</span><br><span class="line">Wed Mar 27 11:02:31 2024 Control Channel: TLSv1, cipher TLSv1/SSLv3 AES256-SHA, 2048 bit RSA</span><br></pre></td></tr></table></figure><p>从这里我们可以看到除了简历 TCP 连接的握手，还有一个数据加密的 Cipher，这里的这个 BF-CBC 就是一个比较老旧的不安全的协议，应当早就已经被默认禁用了。</p><p>根据<span class="exturl" data-url="aHR0cHM6Ly9jb21tdW5pdHkub3BlbnZwbi5uZXQvb3BlbnZwbi93aWtpL0NpcGhlck5lZ290aWF0aW9u">官方关于密码协商的 Wiki 部分<i class="fa fa-external-link-alt"></i></span>，在 2.2 及更早的版本，似乎没有配置可以指定数据加密使用的 Cipher；从 2.3 版本开始新增了 <code>cipher</code> 配置项用于指定数据加密使用的 Cipher；从 <strong>2.5 版本</strong>开始，需要使用新配置 <code>data-ciphers</code>来指定一组可用的数据加密 Cipher。</p><p>这里我就尝试将<code>cipher</code>配置为<code>BF-CBC</code>并没有作用，按照文档，只有服务端和客户端都配置了<code>cipher</code>才行，我这边服务端才 2.1.1 版本显然是无法实现的。</p><p>转而添加以下配置进行测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-ciphers BF-CBC</span><br></pre></td></tr></table></figure><p>这个同样报错了，属于配置错误，都不进行连接了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2024-03-27 11:24:06 Note: --cipher is not set. OpenVPN versions before 2.5 defaulted to BF-CBC as fallback when cipher negotiation failed in this case. If you need this fallback please add &#x27;--data-ciphers-fallback BF-CBC&#x27; to your configuration and/or add BF-CBC to --data-ciphers.</span><br><span class="line">2024-03-27 11:24:06 Unsupported cipher in --data-ciphers: BF-CBC</span><br><span class="line">Options error: --data-ciphers list contains unsupported ciphers or is too long.</span><br><span class="line">Use --help for more information.</span><br></pre></td></tr></table></figure><p>可以看到 <code>BF-CBC</code> 不支持，想来应该是被禁用了。</p><p>经过了一些搜索，在 OpenVPN 2.6 版本需要添加以下配置，就可以正常连接了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providers legacy default</span><br></pre></td></tr></table></figure><p>在 OpenVPN 2.6 的<span class="exturl" data-url="aHR0cHM6Ly9vcGVudnBuLm5ldC9jb21tdW5pdHktcmVzb3VyY2VzL3JlZmVyZW5jZS1tYW51YWwtZm9yLW9wZW52cG4tMi02Lw==">使用手册<i class="fa fa-external-link-alt"></i></span>中，找到了对这个配置项的说明，但没有详细内容。</p><p><img data-src="https://img.iszy.xyz/1711510301173.png" alt="" /></p><h2 id="总结一下"><a class="markdownIt-Anchor" href="#总结一下"></a> 总结一下</h2><p>这边测试了两个版本的 OpenVPN 客户端。</p><p>在 OpenVPN 2.4 版本客户端的 ovpn 配置中需要添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tls-cipher DEFAULT:!EXP:!LOW</span><br></pre></td></tr></table></figure><p>在 OpenVPN 2.6 版本客户端的 ovpn 配置中需要添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tls-cipher DEFAULT:!EXP:!LOW</span><br><span class="line">data-ciphers BF-CBC</span><br><span class="line">providers legacy default</span><br></pre></td></tr></table></figure><p>即可正常连接 2.3 及更老版本的 OpenVPN，可能需要根据服务端配置进行更多的调整，以实际情况为准。</p><p>如有问题，请不吝指正。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近由于需要连接几个公司不同的 OpenVPN 服务，各家都提供了自己的定制 OpenVPN 客户端，不胜其烦。而且个人不太喜欢使用旧版本的客户端，理论上使用最新的 OpenVPN 客户端没有道理不能连接，遂研究开始。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="OpenVPN" scheme="https://www.iszy.cc/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>折腾的尽头是群晖，终究还是把家里NAS换成群晖了</title>
    <link href="https://www.iszy.cc/posts/nas-synology/"/>
    <id>https://www.iszy.cc/posts/nas-synology/</id>
    <published>2024-03-23T15:17:35.000Z</published>
    <updated>2024-03-23T15:17:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家都说折腾的尽头是群晖，以前我不相信，折腾来折腾去，终究还是上了个群晖 DS1821+。</p><span id="more"></span><h2 id="为什么用-nas"><a class="markdownIt-Anchor" href="#为什么用-nas"></a> 为什么用 Nas</h2><p>个人需求</p><ul><li>收纳数据</li><li>家庭影院</li><li>多端数据同步</li><li>允许开源服务</li></ul><p>刚开始将服务搭建在欧洲的大盘云服务器上，不过访问速度不太能接受。换到国内的服务器上，随着服务的增多，对云服务器的性能和内存要求也越来越大。这时候我就开始寻求一种能够存储大量数据，方便访问，还能运行各种开源服务的方案。</p><p>Nas 作为文件存储服务器本身能够存储大量的数据，和网盘相比，同样的存储容量性价比高太多，不需要开会员，凭着千兆宽带附带的上传带宽，使用体验也完全足够，家用宽带也不用担心云服务器高额的网络费用，如果内网访问速度更是可以直接拉满。无论是自己搭建 Nas 还是成品 Nas，运行一些负载不会太高的个人服务，性能都绰绰有余，加内存的成本也完全可以接受。</p><p>总结一下</p><ul><li>相比网盘<ul><li>存储容量大</li><li>访问速度快</li><li>不需要会员</li></ul></li><li>相比云服务器<ul><li>性能成本低</li><li>存储成本低</li></ul></li></ul><h2 id="折腾之路"><a class="markdownIt-Anchor" href="#折腾之路"></a> 折腾之路</h2><h3 id="truenas-core"><a class="markdownIt-Anchor" href="#truenas-core"></a> TrueNas Core</h3><p>一开始，我经过了一些调研，看到了翼王的视频，<span class="exturl" data-url="aHR0cHM6Ly9iMjMudHYvWmxWbHBHRQ==">【翼王】DIY 一台高性能的 MINI ITX 文件服务器，还要能使用万兆网络-哔哩哔哩<i class="fa fa-external-link-alt"></i></span>，我决定使用类似配置自己搭建一个 Nas 出来。</p><p>在淘宝搜索相关配件的时候，找到了一个叫做优易的店，根据我的配置，人家能给出现成的整机，那我还整啥，直接上了，微调了下配置，内存干到 32G ECC，使用最新的 TrueNas Core 系统。然后在闲鱼上整了两块万兆网卡，将电脑和 Nas 通过光纤直连。</p><p>看过我先前文章的朋友可能知道，后面我使用 TrueNas 系统一直不是很满意。也是我能力有限，不知道哪里配置存在问题，5 块盘组了 RAIDZ，32G 内存，还加了 NVME 的固态作为缓存，但是读写速度一直不算很高，远远达不到万兆的水平。</p><p>另外就是我原来了解不到位，当我发现我想增加硬盘的时候，我现有的配置根本没法增加，只能增加新的存储池。</p><p>最后就是这个 TrueNas Core 系统里面，他基于 FreeBSD，稳定是稳定，不过我对这个很不熟悉，而且不支持 Docker，让我这个 Docker 狂魔非常难受，自带的容器用起来非常难受。当然后面 TrueNas Scale 换成 Linux 内核了，原生支持 Docker 了，但是毕竟版本还比较早期，而且 Docker 的可视化使用体验也是一言难尽。</p><h3 id="unraid"><a class="markdownIt-Anchor" href="#unraid"></a> Unraid</h3><p>然后就轮到 Unraid 了，这个是我在看 LTT 视频的时候看到的，当时对这个好玩的系统很感兴趣。这个系统的一个很大的特点就是不做 RAID，就算盘坏了，也就损失那个盘的数据，而且也可以通过校验盘的方式来保障数据的安全。我比较喜欢的一点就是，这个系统的各种信息都非常简介明了，操作简单，而且对 Docker 的支持上做的不错。正好赶上我想要更新换代台式电脑，Nas 也跟着换了。</p><p>换上了新的银欣 CS381 机箱，换上了从台式机上淘汰的 3600，换上了以前闲置的 450W 海盗船电源。甚至还新买了一块华硕 TUF Gaming B550M-Plus WIFI 版主板，得益于 AMD 对 ECC 内存的支持，我能够直接用上老 Nas 的 32G ECC 内存。为了安静，连机箱风扇和 CPU 散热都用的猫扇。</p><p>硬盘上我又增加了两块机械，上到了 7 块。还增加了两块致钛 1TB 的 SSD 来做缓存。原来的光口万兆模块换成了两个电口万兆模块，通过网线连到了新上的 4 口 2.5G + 2 口 10G 的威联通交换机上。</p><p>为了实现硬解，还上了一块 Nvidia T600 显卡，用来解码。</p><p>使用起来还是比较舒服的，我用 Seafile 实现了我多平台数据的同步，还将服务器上的部分服务逐步迁移到了 Nas 上。得益于 Docker，我甚至不需要做什么配置，即能完成迁移。由于使用的是 3600，主频不低，我甚至在服务器上起了 Palworld 游戏服务器。</p><p>不过不知道是我装系统的 U 盘原因，Unraid 在升级系统后总有几率出现奇怪问题，让我心惊胆战，中间也有出现过丢失配置的问题。后面起了游戏服务器，由于这个 Palworld 本身内存压力比较大，可能对服务器产生了未知的影响，出现了多次远程连不上，系统无响应，只能重启解决。重启后，我也找不到在哪里能看到先前出现问题的日志，让我对这个系统失去了信心。</p><h3 id="群晖"><a class="markdownIt-Anchor" href="#群晖"></a> 群晖</h3><p>终于我觉得吧，Nas 这个东西啊，还是稳定最重要，其他的嘛，咱也能妥协妥协，说实话，我这个需求也不是太高，之前的配置完完全全过剩了嘛，要不搞个大厂的成品 Nas 算球了。</p><p>那么首先就想到群晖了，当然中间也对比了一下威联通、绿联、华为、Asus 子品牌的一些 Nas 产品。在功能扩展性、系统易用性以及使用广泛性的综合考虑下，还是选择群晖了。咱已经那么多个盘了，只好上 8 盘位了，这就是 DS1821+ 了。</p><p>更低配置，首先是硬盘位不够，然后就是没有 PCI-E 口进行扩展，以及 M.2 位做缓存。更高的配置，比如 DS1823xs+，虽然说直接自带万兆口，不用再进行扩展，是最佳的选择，奈何价格实在太高，没能忍下心。DS1821+ 的原价我其实也不太能接受，好在在闲鱼有价格优惠不少的特别产品，内存加到 32G，八千多，比官方便宜太多。特别的，这个只能用类似笔记本内存的那种插槽，我原来的内存条不能用了，大为心痛。</p><p>唯一的 PCI-E 位置，通过 x8 转 x16 的转接卡接了显卡了。群晖支持 4 网口的链路聚合，网速还算凑合，暂时不准备上万兆网卡了。欸，其实我这个威联通交换机不支持 IEEE 802.3ad，所以不支持真的链路聚合，现在只能说是负载均衡，这个后面再看看怎么搞。</p><p>群晖 DS1821+ 的这颗 CPU 说实话，性能还是比较出乎我的意料的，虽然性能指标一般般，运行 Palworld 游戏服务器压力却也并不大，运行我其他 Docker 服务也没啥压力，性能其实非常够用了。看来我真是高估我对这 Nas 的性能需求了。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>总的来说，我最终还是入了群晖了，大概我是不太会再换了吧。</p><p>初步评价下这个 DS1821+ 吧，</p><ol><li>对我来说，性能够用，扩展性满足需求。</li><li>运行非常安静，指示灯也不打扰人，能关。</li><li>系统稳定易用，和前面两个系统相比，使用门槛低，配置简单，还能有技术支持。</li></ol><p>具体的使用，待我多用用，再分享吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大家都说折腾的尽头是群晖，以前我不相信，折腾来折腾去，终究还是上了个群晖 DS1821+。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://www.iszy.cc/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="群晖" scheme="https://www.iszy.cc/tags/%E7%BE%A4%E6%99%96/"/>
    
    <category term="Nas" scheme="https://www.iszy.cc/tags/Nas/"/>
    
  </entry>
  
  <entry>
    <title>利用阿里云OSS搭建图床</title>
    <link href="https://www.iszy.cc/posts/alioss-img-bed/"/>
    <id>https://www.iszy.cc/posts/alioss-img-bed/</id>
    <published>2023-11-27T05:02:28.000Z</published>
    <updated>2023-11-27T05:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下利用阿里云 OSS 搭建图床的过程。</p><span id="more"></span><h2 id="一-前言"><a class="markdownIt-Anchor" href="#一-前言"></a> 一、前言</h2><p>在我们搭建个人博客时，常常会有在博客文章里插入图片的需求。图片又占空间，又费流量，很多时候图片过于清晰，在文章里其实是不需要那么高清的。所以，我们需要一个便宜的存储图片的地方，最好能对图片进行简单的后处理，比如说进行压缩、增加水印之类，如果还能节省流量那就最好了。</p><p>阿里云 OSS 能够免费提供 <code>5GB</code> 的存储空间，40GB 存储空间一年也就 10 块钱，可以说是绰绰有余。另外，阿里云 OSS 支持对图片进行处理，且有 <code>10TB/月</code> 的免费额度。每月外网流出流量 <code>≤5 GB</code> 时，不收取外网流出流量费用，应该是相当够用了。</p><h2 id="二-步骤"><a class="markdownIt-Anchor" href="#二-步骤"></a> 二、步骤</h2><h3 id="1-创建存储桶"><a class="markdownIt-Anchor" href="#1-创建存储桶"></a> 1. 创建存储桶</h3><p>首先当然是要注册阿里云账号，并且在阿里云控制台开通 OSS 服务。这里就不多说了。</p><p>我们在此创建一个 OSS Bucket，用于存储图片。</p><p><img data-src="https://img.iszy.xyz/1701062082875.png" alt="" /></p><p>选择一个地域，存储类型只需要标准存储即可，存储冗余也不需要，直接本地冗余存储即可。读写权限选择公共读，这样我们就能在博客里进行展示。我这边选择了私有读写权限，这样，我可以进一步进行控制。</p><p><img data-src="https://img.iszy.xyz/1701062277474.png" alt="" /></p><p>创建成功后我们就可以通过外网地址拼上文件路径进行访问了。</p><h3 id="2-上传图片"><a class="markdownIt-Anchor" href="#2-上传图片"></a> 2. 上传图片</h3><p>上传图片有多种方式，当然我们可以通过网页端直接上传图片到存储桶，也可以使用阿里云 OSS 的官方客户端进行上传，不过多少有点不便。</p><p>这里推荐一个工具，<span class="exturl" data-url="aHR0cHM6Ly9waWNnby5naXRodWIuaW8vUGljR28tRG9jLw==">PicGo<i class="fa fa-external-link-alt"></i></span>，它是一个开源的图床工具，支持多种图床，包括阿里云 OSS。我们可以通过它来上传图片到 OSS。</p><p>可以根据 PicGo 的文档，申请阿里云的 Token 进行配置，即可实现方便快捷的上传图片。</p><p><img data-src="https://img.iszy.xyz/1701062570486.png" alt="" /></p><h3 id="3-图片处理"><a class="markdownIt-Anchor" href="#3-图片处理"></a> 3. 图片处理</h3><p>在数据处理-图片处理中，可以新建自定义样式，然后访问时拼上响应参数即可。</p><p>这里我将图片全部转为 50%质量的 webp 格式，压缩效果非常拔群，且能保证图片有足够的清晰度。</p><p><img data-src="https://img.iszy.xyz/1701064625613.png" alt="" /></p><h2 id="三-进一步处理"><a class="markdownIt-Anchor" href="#三-进一步处理"></a> 三、进一步处理</h2><p>如果你有同地域的 ECS 服务器，可以访问到内网的 bucket 域名，那样还能够进一步进行配置。</p><h3 id="1-自定义域名"><a class="markdownIt-Anchor" href="#1-自定义域名"></a> 1. 自定义域名</h3><p>首先可以在服务器上使用 Nginx 反代内网 bucket 域名，这样，内网流量是不进行收费的，可以统一走服务器的外网流量，还可以绑定自己的域名。</p><h3 id="2-读写权限控制"><a class="markdownIt-Anchor" href="#2-读写权限控制"></a> 2. 读写权限控制</h3><p>可以将 bucket 的读写权限设置为私有，在 Bucket 授权策略中进一步控制权限。在这里我仅允许我的服务器内网 ip 进行只读访问。</p><p><img data-src="https://img.iszy.xyz/1701065046947.png" alt="" /></p><h3 id="3-默认处理样式"><a class="markdownIt-Anchor" href="#3-默认处理样式"></a> 3. 默认处理样式</h3><p>上面我们设置了一个自定义样式，但是访问的时候每次都需要拼上响应参数，这样很不方便。我们可以在 Nginx 配置中统一加上该参数。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> = / &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">set</span> <span class="variable">$token</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$is_args</span>) &#123;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$token</span> <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">set</span> <span class="variable">$flag</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$args</span> !<span class="regexp">~ &quot;x-oss-process=style&quot;)</span> &#123;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$flag</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$flag</span>) &#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$args</span> <span class="string">&quot;<span class="variable">$&#123;args&#125;</span><span class="variable">$&#123;token&#125;</span>x-oss-process=style/default&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://iszy-img.oss-cn-shanghai-internal.aliyuncs.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-统一流量出口"><a class="markdownIt-Anchor" href="#4-统一流量出口"></a> 4. 统一流量出口</h3><p>在上面的配置中，我们统一走服务器的外网流量。众所周知，服务器固定宽带是比较贵的，如果使用按流量付费，图片的流量也是要花一点钱的。</p><p>不过阿里云推出了一种共享流量包，可以抵扣服务器按流量付费的流量，如果知道自己服务器流量大概有多少，使用共享流量包是相当合算的。</p><p>如果不是走共享流量包，可以还是直接走 OSS 的外网接口，不必要这么折腾了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下利用阿里云 OSS 搭建图床的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="图床" scheme="https://www.iszy.cc/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="阿里云" scheme="https://www.iszy.cc/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="OSS" scheme="https://www.iszy.cc/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>迁移 Docker Compose 遇到 yaml 结构错误</title>
    <link href="https://www.iszy.cc/posts/docker-compose-yml-error/"/>
    <id>https://www.iszy.cc/posts/docker-compose-yml-error/</id>
    <published>2023-11-03T04:51:48.000Z</published>
    <updated>2023-11-03T04:51:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在迁移服务器，遇到了一个问题。我原来一直使用的 docker-compose.yml 文件，迁移到新服务器上后，居然报错了。</p><span id="more"></span><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><p>差不多是这样的错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yaml: unmarshal errors:</span><br><span class="line">  line 155: mapping key &quot;&lt;&lt;&quot; already defined at line 154</span><br><span class="line">  line 192: mapping key &quot;&lt;&lt;&quot; already defined at line 191</span><br></pre></td></tr></table></figure><p>那么来看下我的 docker-compose.yml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">x-proxy:</span> <span class="string">&amp;default-proxy</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">http_proxy:</span> <span class="string">http://clash:10808</span></span><br><span class="line">    <span class="attr">https_proxy:</span> <span class="string">http://clash:10808</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">clash</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">proxy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">x-timesync:</span> <span class="meta">&amp;time</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/timezone:/etc/timezone:ro</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nginx:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="string">*default-proxy</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*time</span></span><br></pre></td></tr></table></figure><p>这边就是给 nginx 的配置中插入了两段配置，分别是代理和时区。一直用下来都很正常，没出现过问题。</p><h2 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h2><p>两边唯一的区别就是 docker compose 的版本了。老服务器上的版本是 <code>2.4.1</code> 的，新服务器装了当前的最新版本，也就是 <code>2.21.0</code>。</p><p>经过一番搜索，总的来说是这样的。</p><p>根据 yaml 的规范，一个 key 像这样出现多次是不规范的。按照官方的写法，这里应该写成：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nginx:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> [<span class="string">*default-proxy</span>, <span class="string">*time</span>]</span><br></pre></td></tr></table></figure><p>根据 docker compose 的相关 issue，在 2.17 版本时改进了 yaml 解析器，不再允许这种不规范的写法。</p><p>所以，这边只需要规范一下写法即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在迁移服务器，遇到了一个问题。我原来一直使用的 docker-compose.yml 文件，迁移到新服务器上后，居然报错了。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Docker" scheme="https://www.iszy.cc/tags/Docker/"/>
    
    <category term="Docker Compose" scheme="https://www.iszy.cc/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>解决Vite打包产生的hash缓存失效问题</title>
    <link href="https://www.iszy.cc/posts/vite-hash-cache/"/>
    <id>https://www.iszy.cc/posts/vite-hash-cache/</id>
    <published>2023-11-01T04:49:36.000Z</published>
    <updated>2023-11-01T04:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>如题，最近发现无论改多少内容，打包出来的所有文件的 hash 都会发生变化，这样就导致了浏览器缓存失效，每次都要重新加载所有文件，这样就导致了加载速度变慢，而且也浪费我服务器流量，姑且来看看能不能解决。</p><span id="more"></span><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><p>在我的印象里，之前开发 Vue 项目，用 webpack 进行打包的时候，一般只有我修改的组件对应的 chunk 会更新。但现在的情况是，不管我改了什么，所有的文件都会被修改。</p><p><img data-src="https://img.iszy.xyz/1698814232865.png" alt="" /></p><p>这应当是 Vite 本身存在的问题，于是进行了一些搜索。</p><p>很快啊，我在 Vite 的项目下搜到了一个仍处于 open 状态的 issue，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRlL2lzc3Vlcy82Nzcz">[build] importing from hashed chunks makes caching terribly ineffective<i class="fa fa-external-link-alt"></i></span>。在这个 issue 中我发现了造成这个问题的一些原因，其实更多与使用的 rollup 打包工具有关。</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><p>这里有个比较简单的例子来展示这个问题的产生：</p><p>比如有两个文件名为 <code>index.789123.js</code> 和 <code>a.123456.js</code>，内容如下：</p><p>index.789123.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">&quot;./a.123456.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a: &quot;</span> + a);</span><br></pre></td></tr></table></figure><p>a.123456.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; a &#125;;</span><br></pre></td></tr></table></figure><p>如果 <code>a.123456.js</code> 文件内容发生了变化，计算 hash 后，文件名将变成比如 <code>a.abedef.js</code>。这时候，<code>index.789123.js</code> 文件中的 <code>a.123456.js</code> 就得改成新的 <code>a.abedef.js</code>，所以 <code>index.789123.js</code> 的内容也会发生变化，从而产生连锁反应。</p><h2 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h2><p>问题清晰了，但是这个 issue 是基于 Vite 2 提交的，在后续的 Vite 4 中经过测试也并没有进行解决。或许以后换成 rolldown 进行打包会避免这个问题吧，不过那就不知道要到什么时候了。</p><p>不过问题还是要解决的，只是不能简单的更新了事了。</p><p>在后续翻看这个 issue 的过程中，我发现了一个解决方案。</p><p>当把 entryFileNames 设置为 assets/[name].js 时，也就是我写在 index.html 里的入口文件 index.js 不要 hash 了，打包出来的文件就能符合预期了，不会造成所有文件进行联动修改了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">entryFileNames</span>: <span class="string">&quot;assets/[name].js&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然产生的问题也是显而易见的，index.js 文件名固定了，而这个文件在打包后也是会更新的，所以为了让页面拿到最新的 index.js 文件，index.js 就不能进行缓存。</p><p>这个问题相对好解决，在 nginx 或者其他 web server 中给 <code>assets/index.js</code> 文件设置 <code>Cache-Control: must-revalidate, max-age=0</code> 不进行缓存即可。其他带 hash 的文件都可以缓存到永久，没有必要每次下载。</p><p>所以还是需要在，每次更新后重新下载每一个文件，还是每次访问时重新下载 index.js 文件，做一个抉择。更好的解决方案就需要官方来处理了。</p><p>不过对我来说，禁用 index.js 文件的缓存，是一个非常合适的方案。因为我同时在使用 <code>vite-plugin-pwa</code> 插件，首次请求完页面后就会进行缓存，在下次访问时，就不会再请求 index.js 文件了。而且打包出来的 workbox 文件都是带 hash 的，不会影响更新，在获取到新的 workbox 文件时，就会更新缓存。这样就能保证 index.js 文件的更新，又不会造成流量的浪费。建议 pwa 用户尝试我这里的方案，实测相当好用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如题，最近发现无论改多少内容，打包出来的所有文件的 hash 都会发生变化，这样就导致了浏览器缓存失效，每次都要重新加载所有文件，这样就导致了加载速度变慢，而且也浪费我服务器流量，姑且来看看能不能解决。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.iszy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Vue" scheme="https://www.iszy.cc/tags/Vue/"/>
    
    <category term="Vite" scheme="https://www.iszy.cc/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>记一次Cesium排错</title>
    <link href="https://www.iszy.cc/posts/cesium-vue-problem/"/>
    <id>https://www.iszy.cc/posts/cesium-vue-problem/</id>
    <published>2023-10-25T15:25:08.000Z</published>
    <updated>2023-10-25T15:25:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个贴模型 entity 导致，倾斜摄影渲染出现异常的问题，记录一下排错过程。</p><span id="more"></span><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>首先，我只是使用 Cesium，并不涉及扩展开发。</p><p>问题出现的场景是这样的，我在 Vue 项目中使用超图 iClient for Cesium (基于 Cesium 扩展)，向球体添加了一个 s3m 格式的倾斜摄服务。项目中有测面的功能，其中有一步会绘制一个贴模型的面类型 entity。意想不到的情况出现了，在我完成绘制的时，倾斜摄影的颜色渲染出现了异常，原来红色的部分似乎被覆盖了一层蓝色。</p><p>如图所示，万达广场的牌子颜色都变成蓝的了。</p><p><img data-src="https://img.iszy.xyz/1698282506698.png" alt="" /></p><h2 id="解决问题"><a class="markdownIt-Anchor" href="#解决问题"></a> 解决问题</h2><p>首先，要排除 iClient for Cesium 包本身不存在问题，于是我写了一个单页面，添加了同样的 s3m 服务。并且实现了一下绘制贴模型面的功能。结果发现，这个页面没有预想中的异常。</p><p><img data-src="https://img.iszy.xyz/1698282642715.png" alt="" /></p><p>这就说明我项目中的代码造成了这个异常。基于我的推断，能造成这样异常的代码应该存在于我们实现的绘制功能里，于是先大量注释无关代码，逐步释放，最终却定位在了绘制完成的回调事件上，只要不执行回调事件，就不会出现异常。这个回调事件将绘制得到的 entity 对象进行了返回。所以这个问题与绘制本身没有关系，也没有在绘制功能中做影响渲染的操作。</p><p>排查使用绘制功能的组件时，最终确定到了一行代码。这行代码的功能很简单，在 Vue 组件的 data 对象中定义有一个变量，这行代码将这个 entity 对象赋值给了这个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">entity</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">entity</span> = entity;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>想来已经知道问题所在了，Vue 的响应式机制和 Cesium 的渲染机制产生了冲突，刚好我们绘制的面是贴模型面，会影响倾斜摄影服务的渲染，最终表现成了这个问题。最终只要避免将 entity 对象进行不必要的转换就不会出现渲染异常。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>其实早该想到可能有这样的问题，毕竟 Vue 的响应式机制和 Cesium 的渲染机制都是很复杂的，两者的结合必然会产生一些问题。比如先前将 Viewer 对象响应化，会导致整个球体出现大量卡顿掉帧，且页面 Vue 组件的渲染也会十分卡顿，也是类似的问题。</p><p>很多时候，我们其实并不需要 Vue 的响应式机制，只是为了方便调用，牺牲了一些性能。Vue 3 当中的 markRaw 方法，可以将对象标记为非响应式的，可以比较有效的解决这个问题。在 Vue 2 中，遇到像 Cesium 这种会产生严重错误的，只能采取绕行方案了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近遇到一个贴模型 entity 导致，倾斜摄影渲染出现异常的问题，记录一下排错过程。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.iszy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Vue" scheme="https://www.iszy.cc/tags/Vue/"/>
    
    <category term="Cesium" scheme="https://www.iszy.cc/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>添加或移除 WIN11 此电脑中的文件夹</title>
    <link href="https://www.iszy.cc/posts/add-or-remove-folders-in-explorer-win11/"/>
    <id>https://www.iszy.cc/posts/add-or-remove-folders-in-explorer-win11/</id>
    <published>2022-12-16T06:00:25.000Z</published>
    <updated>2022-12-16T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Windows 11 build 25136</code> 或者 <code>build 22621.160</code> 版本后，系统更新了资源管理器的布局，引入了多标签页的功能。与此同时，我也发现，在此电脑里的那些用户文件夹，比如文档、下载等，不见了。虽然说大多数不是很常用，但是没了还是不太习惯，整个此电脑页面也有些空旷。这里就记录下，如何将这些文件夹加回来，以及如何再次隐藏。</p><span id="more"></span><h2 id="添加文件夹"><a class="markdownIt-Anchor" href="#添加文件夹"></a> 添加文件夹</h2><p>按 <code>Win + R</code> 快捷键，输入 <code>regedit</code> 打开注册表。</p><p>在地址栏里输入以下路径并回车。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1671171351365.png" alt="" /></p><p>这些每一条对应的就是一个文件夹。具体是什么文件夹，可以点进去看一下。</p><p><img data-src="https://img.iszy.xyz/1671171792200.png" alt="" /></p><p>比如这条的值为<code>CLSID_ThisPCLocalDownloadsRegFolder</code>，对应的就是下载文件夹。</p><p><strong>我们可以看到除了文件夹信息，还有一条 <code>HideIfEnabled</code> 的值，就是这条注册表值把文件夹隐藏了，删除掉刷新一下就可以显示出来。</strong></p><p><img data-src="https://img.iszy.xyz/1671171893640.png" alt="" /></p><h2 id="移除文件夹"><a class="markdownIt-Anchor" href="#移除文件夹"></a> 移除文件夹</h2><p>与上面操作相反，我们只要把<code>HideIfEnabled</code>条目加上，就可以将文件夹隐藏。</p><p>点击到你想要隐藏的文件夹，右键新建<strong>DWORD (32 位)值</strong>，名称为<code>HideIfEnabled</code>。</p><p><img data-src="https://img.iszy.xyz/1671172330084.png" alt="" /></p><p><img data-src="https://img.iszy.xyz/1671172365571.png" alt="" /></p><p>双击打开，输入值为<code>22ab9b9</code></p><p><img data-src="https://img.iszy.xyz/1671172425560.png" alt="" /></p><p><img data-src="https://img.iszy.xyz/1671172451119.png" alt="" /></p><p>现在刷新一下资源管理器，文件夹就被隐藏了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 &lt;code&gt;Windows 11 build 25136&lt;/code&gt; 或者 &lt;code&gt;build 22621.160&lt;/code&gt; 版本后，系统更新了资源管理器的布局，引入了多标签页的功能。与此同时，我也发现，在此电脑里的那些用户文件夹，比如文档、下载等，不见了。虽然说大多数不是很常用，但是没了还是不太习惯，整个此电脑页面也有些空旷。这里就记录下，如何将这些文件夹加回来，以及如何再次隐藏。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Windows" scheme="https://www.iszy.cc/tags/Windows/"/>
    
    <category term="Windows 11" scheme="https://www.iszy.cc/tags/Windows-11/"/>
    
  </entry>
  
  <entry>
    <title>删除win11右键一级菜单的AMD驱动栏</title>
    <link href="https://www.iszy.cc/posts/remove-win11-amd-menu/"/>
    <id>https://www.iszy.cc/posts/remove-win11-amd-menu/</id>
    <published>2022-12-15T00:35:29.000Z</published>
    <updated>2022-12-15T00:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>如题，在此记录一下。</p><span id="more"></span><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><p><img data-src="https://img.iszy.xyz/1671064733303.png" alt="" /></p><p>如图所示，就是想把这个东西去掉，用处不大，还把右键菜单撑老大，想去掉。</p><h2 id="打开注册表编辑器"><a class="markdownIt-Anchor" href="#打开注册表编辑器"></a> 打开注册表编辑器</h2><p>按 <code>Win + R</code> 快捷键，输入 <code>regedit</code> 打开注册表。</p><h2 id="查找-amd-应用-id"><a class="markdownIt-Anchor" href="#查找-amd-应用-id"></a> 查找 AMD 应用 ID</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PackagedCom\Package\AdvancedMicroDevicesInc-2.AMDRadeonSoftware_10.22.20034.0_x64__0a9344xs7nr4m\Server</span><br></pre></td></tr></table></figure><p>按照这个路径一直往下找，Package 名称在不同电脑和软件版本的情况下可能会有不通，以自己找到的为准。</p><p><img data-src="https://img.iszy.xyz/1671065063988.png" alt="" /></p><p>在这个 Server 里面，有的人是键值 <code>0</code>，有的是键值 <code>1</code>，点到这个键值下，我这边键值是 <code>0</code>。</p><p><img data-src="https://img.iszy.xyz/1671065176268.png" alt="" /></p><p>在这个下面的 SurrogateAppId 里的数据，也就是右侧大括号的数据就是我们需要的 ID，可以双击打开来复制。</p><h2 id="屏蔽菜单"><a class="markdownIt-Anchor" href="#屏蔽菜单"></a> 屏蔽菜单</h2><p>在地址栏里输入以下路径并回车。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Shell Extensions\Blocked</span><br></pre></td></tr></table></figure><p>右键新建字符串值，值为刚刚的 AppID，我这里为 <code>&#123;6767B3BC-8FF7-11EC-B909-0242AC120002&#125;</code></p><p><img data-src="https://img.iszy.xyz/1671065384645.png" alt="" /></p><p><img data-src="https://img.iszy.xyz/1671065443124.png" alt="" /></p><p>这样菜单就不显示了，如果想要恢复展示，删掉这条字符串值即可。</p><p><img data-src="https://img.iszy.xyz/1671065556009.png" alt="" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如题，在此记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Windows" scheme="https://www.iszy.cc/tags/Windows/"/>
    
    <category term="Windows 11" scheme="https://www.iszy.cc/tags/Windows-11/"/>
    
  </entry>
  
  <entry>
    <title>Unraid 安装 Nvidia 驱动并开启 Plex 硬解</title>
    <link href="https://www.iszy.cc/posts/unraid-plex-nvidia/"/>
    <id>https://www.iszy.cc/posts/unraid-plex-nvidia/</id>
    <published>2022-12-10T08:44:51.000Z</published>
    <updated>2022-12-10T08:44:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面记录了一下我刚装好 Unraid，初始化配置，及搭建磁盘阵列的过程。一个 Nas 装好，少不了要整一个家庭影音系统用起来，今天就来记录一下，安装 Plex 并开启 Nvidia 显卡硬解的过程。</p><span id="more"></span><h2 id="一-前期说明"><a class="markdownIt-Anchor" href="#一-前期说明"></a> 一、前期说明</h2><p>首先我来讲一下我的配置，我这边用的是从主力机上换下的 <strong>Ryzen 5 3600</strong> 配一张 <strong>Nvidia Quadra T600</strong>。3600 是没有核显的，我就准备让这张 T600 来承担转码的任务。</p><p>为啥选择 <strong>Nvidia Quadra T600</strong> 这个卡呢？</p><p>首先这是一张 Quadra 卡，没有一般显卡对 NVENC 的限制，我是一个懒得折腾的人，选择 Quadra 卡就省了很多事。</p><p>再一个，功耗很低，显存和性能也符合我的需求。我 T600 这张卡，40W 功耗，不用额外供电，插上就能用，还有 4GB 显存，相比上代 P 系列只提升了 10W 功耗，性能提升挺大。不过毕竟新卡，价格还是不太美丽。如果一般使用，选 P400 这张 30W 的卡，也就可以了，价格便宜太多。</p><h2 id="二-教程"><a class="markdownIt-Anchor" href="#二-教程"></a> 二、教程</h2><p>说是教程，其实就是我操作的一个记录，我在网上搜的好些教程，几乎都是用的 Intel 核显的，用 N 卡的不多，讲究一个性价比，像我这种用 Amd 平台的就更少了。也就是我没用 APU，不然 Amd 的核显估计也有点要折腾。</p><p>可能需要用点魔法，不然下载速度啥的都会比较慢。</p><h3 id="1-安装驱动"><a class="markdownIt-Anchor" href="#1-安装驱动"></a> 1. 安装驱动</h3><p>在应用中心，搜索<code>nvidia driver</code>，就能看到一个由 ich777 大佬维护的 Nvidia-Driver 插件，点击安装。</p><p><img data-src="https://img.iszy.xyz/1670667734658.png" alt="" /></p><p>安装完成后，进入设置，点击进入下方刚刚安装的应用。应用会拉取最新的驱动信息，所以会比较慢。</p><p><img data-src="https://img.iszy.xyz/1670667950035.png" alt="" /></p><p>选择分支或者指定的驱动版本，点击 <code>Update &amp; Download</code> 按钮。这里我选择 Production 分支，感觉会比较稳。</p><p><img data-src="https://img.iszy.xyz/1670668181420.png" alt="" /></p><p>等待驱动下载完成，弹窗信息里会显示下载完成，重启以安装新的驱动，弹窗下方的按钮会变为完成。此时可以重启 Unraid，新的驱动会自动安装。千万不要在中途关闭弹窗，这样就搞不清楚状态了。</p><p>装好后，再次进入应用，应用里就会有驱动信息了。</p><p><img data-src="https://img.iszy.xyz/1670668411649.png" alt="" /></p><h3 id="2-安装-gpu-监控插件选"><a class="markdownIt-Anchor" href="#2-安装-gpu-监控插件选"></a> 2. 安装 GPU 监控插件（选）</h3><p>为了方便查看 GPU 状态，可以考虑安装一个 GPU Statistics 插件。</p><p><img data-src="https://img.iszy.xyz/1670668613284.png" alt="" /></p><p>装好后，就可以在仪表盘看到 GPU 的负载情况。</p><p><img data-src="https://img.iszy.xyz/1670668551407.png" alt="" /></p><h3 id="3-安装-plex"><a class="markdownIt-Anchor" href="#3-安装-plex"></a> 3. 安装 Plex</h3><p>接下来就是我们的主角了。</p><h4 id="1-选择应用"><a class="markdownIt-Anchor" href="#1-选择应用"></a> (1) 选择应用</h4><p>这里我选择了<code>binhex-plexpass</code>这个应用，选其他的也可以，这个主要是比较方便一点，不少参数已经帮你列好了，可以直接配置。</p><p><img data-src="https://img.iszy.xyz/1670668918772.png" alt="" /></p><h4 id="2-修改主要参数"><a class="markdownIt-Anchor" href="#2-修改主要参数"></a> (2) 修改主要参数</h4><p>点击安装进入参数设置，主要是修改这几点。</p><ul><li>名称: Docker 页面后面显示的名字，可改可不改</li><li>Host Path 2:(Container Path: /media): 这个是存储影片的路径，可自行修改，所有的共享都在这个<code>/mnt/user</code>下面看到</li><li>Key 3 (NVIDIA_VISIBLE_DEVICES): 这个是 GPU 的 id，可以在 <code>Nvidia Driver</code> 应用里找到，这个指定了 docker 使用的显卡。注意，一张显卡可以在多个 docker 应用中共用，但不能在 docker 和虚拟机中共享。</li></ul><p><img data-src="https://img.iszy.xyz/1670669464258.png" alt="" /></p><h4 id="3-添加-gpu-设备"><a class="markdownIt-Anchor" href="#3-添加-gpu-设备"></a> (3) 添加 GPU 设备</h4><p>点击添加设备</p><p><img data-src="https://img.iszy.xyz/1670670100384.png" alt="" /></p><p>这边添加两个设备</p><p><code>/dev/nvidia0</code></p><p><img data-src="https://img.iszy.xyz/1670670160151.png" alt="" /></p><p><code>/dev/nvidiactl</code></p><p><img data-src="https://img.iszy.xyz/1670670251438.png" alt="" /></p><h4 id="4-设置-nvidia-运行时"><a class="markdownIt-Anchor" href="#4-设置-nvidia-运行时"></a> (4) 设置 Nvidia 运行时</h4><p>点击右上角基本视图切换到高级视图</p><p><img data-src="https://img.iszy.xyz/1670670408658.png" alt="" /></p><p>在额外参数里填入<code>--runtime=nvidia</code>，指定使用 Nvidia 运行时。</p><p><img data-src="https://img.iszy.xyz/1670670469551.png" alt="" /></p><h4 id="5-设置网络模式为-bridge-模式选"><a class="markdownIt-Anchor" href="#5-设置网络模式为-bridge-模式选"></a> (5) 设置网络模式为 bridge 模式（选）</h4><p>这个应用模板，默认用的是 host 模式的网络，如果你不喜欢想要换成 bridge 模式，就看下这边，否则跳过这一步。</p><p>首先把网络模式切换成 bridge，然后添加需要暴露的端口。</p><ul><li>32400/tcp (Plex Media Server 的 TCP 端口)</li><li>8324/tcp (通过 Plex Companion 的 Roku 的 TCP 端口)</li><li>3005/tcp (用于 Plex Companion 的 TCP 端口)</li><li>32469/tcp (Plex DLNA 服务器的 TCP 端口)</li><li>1900/udp (Plex DLNA 服务器的 UDP 端口)</li><li>32410/udp (用于网络发现的 UDP 端口)</li><li>32412/udp (用于网络发现的 UDP 端口)</li><li>32413/udp (用于网络发现的 UDP 端口)</li><li>32414/udp (用于网络发现的 UDP 端口)</li></ul><p>最后大概是这样。</p><p><img data-src="https://img.iszy.xyz/1670670957919.png" alt="" /></p><h4 id="6-完成安装"><a class="markdownIt-Anchor" href="#6-完成安装"></a> (6) 完成安装</h4><p>最后点击应用，即可进入安装。</p><h4 id="7-注意事项"><a class="markdownIt-Anchor" href="#7-注意事项"></a> (7) 注意事项</h4><p>要开启硬解功能，你需要有 Plex Pass 的订阅。</p><p>应用都需要从 dockerhub 上拉取，众所周知，国内从 dockerhub 上拉取应用还是比较慢的，需要换源。这边就不说具体怎么换源了，主要是在安装完 Nvidia 驱动后，会添加 nvidia 运行时到 docker 配置里，换源的时候主要不要把这个配置覆盖了，否则上面的安装会报错。</p><p><img data-src="https://img.iszy.xyz/1670670779242.png" alt="" /></p><h3 id="4-开启硬解"><a class="markdownIt-Anchor" href="#4-开启硬解"></a> 4. 开启硬解</h3><p>点击进入 WebUI。</p><p><img data-src="https://img.iszy.xyz/1670671309161.png" alt="" /></p><p>自行完成 Plex 的初始化设置，登录的账户需要有 Plex Pass 订阅。</p><p><img data-src="https://img.iszy.xyz/1670671436939.png" alt="" /></p><p>在设置 - 转码器里勾选<strong>可用时使用硬件加速</strong>，既可开启硬件加速。</p><p><img data-src="https://img.iszy.xyz/1670671485170.png" alt="" /></p><p>播放一个视频，不要使用原画，如果 GPU 有负载，就说明硬件加速成功了。</p><p><img data-src="https://img.iszy.xyz/1670671596040.png" alt="" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面记录了一下我刚装好 Unraid，初始化配置，及搭建磁盘阵列的过程。一个 Nas 装好，少不了要整一个家庭影音系统用起来，今天就来记录一下，安装 Plex 并开启 Nvidia 显卡硬解的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://www.iszy.cc/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Nas" scheme="https://www.iszy.cc/tags/Nas/"/>
    
    <category term="Unraid" scheme="https://www.iszy.cc/tags/Unraid/"/>
    
    <category term="Plex" scheme="https://www.iszy.cc/tags/Plex/"/>
    
    <category term="Nvidia" scheme="https://www.iszy.cc/tags/Nvidia/"/>
    
  </entry>
  
  <entry>
    <title>Unraid初体验</title>
    <link href="https://www.iszy.cc/posts/unraid-start/"/>
    <id>https://www.iszy.cc/posts/unraid-start/</id>
    <published>2022-11-20T19:55:47.000Z</published>
    <updated>2022-11-20T19:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近折腾 Truenas Scale 一直不是很满意，准备换个 Unraid 试一试。</p><span id="more"></span><h2 id="一-前期考虑"><a class="markdownIt-Anchor" href="#一-前期考虑"></a> 一、前期考虑</h2><p>可能是我比较菜吧，折腾不来这个 Truenas。虽然搞了万兆交换机，接了万兆网卡，有 32GB 内存，raidz 的速度在硬盘少的情况下仍然不尽如人意。想要加几块硬盘，发现也不是很容易，没法提升原有 raid 的性能，只能横向扩展。而且 Truenas scale 的 docker 上了 k3s 还是稍微有些门槛，对我的应用场景来说也比较重了。以及众所周知的一些网络访问问题，大部分功能我其实也不大用到，使用起来实在比较僵硬。</p><p>于是考虑再三准备上手 Unraid。</p><p>我其实早就想试试 Unraid 了，之前看 LTT 视频，对 Unraid 的印象相当不错。突出一个特点，上手简单，灵活度又高。</p><p>从 Unraid 这个名字也能看出，这个系统的磁盘阵列不搞 raid，扩展起来非常容易。</p><p>而且只需要一块校验盘，只要损失不超过一块硬盘，都可以恢复。即使超过损失超过一块盘，也只会丢失那块盘的数据，不会影响整个阵列。这个数据安全性对于我来说是够了的。看网上的速度测试，在完成奇偶校验的情况下，有没有校验盘对整个阵列的读写速度没有什么影响。</p><p>既然不搞 raid，速度就受限于你的硬盘速度了，不过可以靠添加缓存盘来提升，只要读写不超过缓存盘的存储上限，都不会掉速。像万兆内网，加个 nvme 的硬盘，基本就可以跑满了。</p><p>为啥以前没有用呢，主要是 truenas 免费，而 Unraid 要钱嘛，而且组 nas 的时候偷懒让别人帮忙把系统装好了，懒得换了。Unraid 是按照硬盘数量收费的，不包括启动闪存盘，6 块硬盘需要 59 刀，12 块硬盘需要 89 刀，129 刀则不限硬盘数量。像我现在 7 块硬盘，加一块固态，后面还要加俩 nvme 做缓存，考虑到以后的扩展，应该得买 89 刀的就好。不过 Unraid 是一次性买断的，这样看似乎价格也还行，还有 30 天试用，让你充分考虑，许可也是可以后期升级的。</p><p>这次我先试用一波，没什么问题再上许可。</p><p>更新：</p><p>用着还不错，已经用上 Plus 许可了。</p><h2 id="二-硬件配置"><a class="markdownIt-Anchor" href="#二-硬件配置"></a> 二、硬件配置</h2><p>这边列下我的搭配，可能不是太常见。</p><ul><li>主板: <strong>Asus TUF GAMING B550M-PLUS WIFI II</strong> （这 WIFI 说实话真浪费，可惜不带 WIFI 版本的都断货，没办法）</li><li>CPU: <strong>AMD Ryzen 5 3600</strong></li><li>内存: <strong>16GB DDR4 纯 ecc 内存 <em>x2</em></strong></li><li>GPU: <strong>Nvidia Quadra T600</strong>（后面用来给 Plex 转码用）</li><li>电源: <strong>海盗船 SFX 450W 电源</strong>（刚开始装 itx 机子用的，闲置了好久）</li><li>硬盘:<ul><li><strong>希捷酷狼 2TB <em>x7</em></strong> （其中一块做校验盘）</li><li><strong>致态 NVME TiPlus7100 1TB <em>x2</em></strong>（缓存盘）</li><li><strong>三星 870EVO</strong>（闲置的盘，准备用来当 steam 库了）</li></ul></li><li>扩展卡:<ul><li><strong>SSU PCI-E x1 转 SATA3.0 x8 扩展卡</strong>（主板上自带的 4 个 SATA 给 SATA 口的 SSD 用了）</li><li><strong>Mellanox 82599 双口万兆网卡</strong></li><li><strong>9PIN 转 USB2.0</strong>（用来插在主板上，直接插系统 U 盘）</li></ul></li><li>机箱: <strong>银欣 CS381</strong>（我用着还挺满意）</li><li>散热:（为了静音也算是下了血本了，事实证明效果拔群）<ul><li>CPU 散热器: <strong>猫头鹰 NH-L9a AM4 黑色版</strong></li><li>机箱散热: <strong>猫头鹰 NF-A12x25 PWM <em>x2</em></strong></li></ul></li></ul><h2 id="三-部署"><a class="markdownIt-Anchor" href="#三-部署"></a> 三、部署</h2><p><span class="exturl" data-url="aHR0cHM6Ly91bnJhaWQubmV0L3poLyVFNCVCOCU4QiVFOCVCRCVCRA==">下载 Unraid OS<i class="fa fa-external-link-alt"></i></span></p><p>首先你需要一个 U 盘。</p><ul><li>最小 4GB，最大不超过 32GB，<strong>一定要是 USB 2.0 的，不然系统可能读不到</strong>。</li><li>格式化为 <strong>FAT32 格式</strong>，卷标必须为 <strong>UNRAID</strong> 这六个字母。</li><li>不用在意 U 盘速度，这个 U 盘只会用来装系统和一些配置，启动后整个系统都是直接放到内存里的，只会偶尔读下配置会用到 U 盘。Unraid 现在还不支持通过 sd 卡和硬盘进行启动，所以你的主板必须要支持通过 U 盘启动。</li></ul><p>Unraid 现在提供了一个创建 U 盘启动器的工具，还是比较傻瓜式的。</p><p><img data-src="https://img.iszy.xyz/1668965114372.png" alt="" /></p><p>可以选择安装的分支和系统版本，设置一下访问地址、网络 ip 和启动方式。这个 server name 默认叫 Tower，后面启动好后，直接浏览器里输<span class="exturl" data-url="aHR0cDovL3Rvd2VyLmxvY2Fs">http://tower.local<i class="fa fa-external-link-alt"></i></span> 就行，这个后期也可以在设置改。</p><p><img data-src="https://img.iszy.xyz/1668965501519.png" alt="" /></p><p>这边是在线下载的系统包，实测下载速度有点慢。可以选择直接在刚刚的下载页面下载 zip 包。</p><p><img data-src="https://img.iszy.xyz/1668965696359.png" alt="" /></p><p>这个工具支持直接选择本地宝安装，就是不能设置了。</p><p><img data-src="https://img.iszy.xyz/1668965764119.png" alt="" /></p><p>本地包写完盘后是这样的。如果要 LAGENCY 模式启动，就这样就可以了。如果要 UEFI 模式启动，就把 <code>EFI-</code> 重命名为 <code>EFI</code> 就行。这个不是名字写错了嗷，是有用的。</p><p><img data-src="https://img.iszy.xyz/1668966001368.png" alt="" /></p><p>现在一块 Unraid 启动盘就做好了，接下来把这个 U 盘插到你的 Nas 主板上，在 Bios 里设置成启动盘启动就好啦。这块盘将会长期作为系统盘留在你的主板上了。需要注意的是，如果你的系统盘坏了，Unraid 是支持重写个系统盘更换的，但是<strong>一年只提供一次迁移许可</strong>，所以最好买一个质量有保证的 U 盘。</p><p>当系统启动好后，访问 <span class="exturl" data-url="aHR0cDovL3Rvd2VyLmxvY2Fs">http://tower.local<i class="fa fa-external-link-alt"></i></span> 即可进入 WebGUI 页面。第一次访问会让你设置 root 用户的密码。</p><p><img data-src="https://img.iszy.xyz/1668966459094.png" alt="" /></p><h2 id="四-初始化配置"><a class="markdownIt-Anchor" href="#四-初始化配置"></a> 四、初始化配置</h2><h3 id="1-时间设置"><a class="markdownIt-Anchor" href="#1-时间设置"></a> 1. 时间设置</h3><p>转到 <code>Settings</code> 选项卡，选择 <code>Date and Time</code></p><p>将时区设置为北京时区，并设置时间同步 ntp 服务器。这里推荐下我用的。点击 Apply 应用。</p><ul><li><span class="exturl" data-url="aHR0cDovL250cC5udHNjLmFjLmNu">ntp.ntsc.ac.cn<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2NuLm50cC5vcmcuY24=">cn.ntp.org.cn<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3RpbWUucG9vbC5hbGl5dW4uY29t">time.pool.aliyun.com<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3RpbWUxLmNsb3VkLnRlbmNlbnQuY29t">time1.cloud.tencent.com<i class="fa fa-external-link-alt"></i></span></li></ul><p><img data-src="https://img.iszy.xyz/1668966634982.png" alt="" /></p><h3 id="2-网络设置"><a class="markdownIt-Anchor" href="#2-网络设置"></a> 2. 网络设置</h3><p>如果没有设置的话，默认会通过 dhcp 动态分配 ip，虽然我们大部分时候不需要直接使用 Unraid 的 ip，但是推荐设置为一个静态 ip，也可以设置下 dns。Unraid 可以配置端口聚合，我因为只接了一个万兆网口，所以就无所谓了，我也没改。</p><p>转到 <code>Settings</code> 选项卡，选择 <code>Networks</code></p><p>我现在的配置如下。注意要在虚拟机和 docker 关闭的情况下修改。我这边万兆网卡是另外加的，默认网口没接，有个警告。</p><p><img data-src="https://img.iszy.xyz/1668967055987.png" alt="" /></p><p>使用万兆网卡，最好把 MTU 改为 9000，电脑的万兆网卡也改成 9000，以提升网络性能。</p><p>如何判断应用成功了呢。可以通过 ping 一个大包看看有没有返回，如果 MTU 为 1500，这个命令将无响应。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping tower.lcoal -l 8962</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1668967282997.png" alt="" /></p><h3 id="3-安装中文插件"><a class="markdownIt-Anchor" href="#3-安装中文插件"></a> 3. 安装中文插件</h3><p>现在 Unraid 官方提供了中文插件包，可以对用户界面进行完整的汉化。</p><p>转到 <code>Apps</code> 选项卡，点击 install 即可自动安装 <code>Community Applications</code> 插件。在内容更新完成后，这边将展示各种社区应用，在左侧分类菜单里选择 Language，找到 简体中文语言包，点击 install 安装即可。</p><p><img data-src="https://img.iszy.xyz/1668967574818.png" alt="" /></p><p>接下来转到 <code>Settings</code> 选项卡，选择 <code>Display Settings</code>，此时已经可以选择中文语言了。</p><p><img data-src="https://img.iszy.xyz/1668967669343.png" alt="" /></p><h3 id="4-添加磁盘阵列"><a class="markdownIt-Anchor" href="#4-添加磁盘阵列"></a> 4. 添加磁盘阵列</h3><p>当然我们做 Nas，没有磁盘阵列可不行。</p><p>可以选择一到两块盘作为校验盘，一般一块就行了，安全要求不高可以不加，要求大于等于其他任意一块的容量，然后把其他盘添加到阵列里。</p><p><img data-src="https://img.iszy.xyz/1668967785490.png" alt="" /></p><p>有固态可以添加到缓存池里。</p><p><img data-src="https://img.iszy.xyz/1668967990297.png" alt="" /></p><p>完成后点击应用，点击启动阵列，此时校验盘会开始同步，容量越大，速度越慢。同步期间阵列访问速度也会很慢，推荐等到同步完成后再访问。点击格式化，完成阵列文件系统的格式化，阵列就可以使用了，不用等到同步完成。</p><p><img data-src="https://img.iszy.xyz/1668968076515.png" alt="" /></p><h3 id="5-添加共享"><a class="markdownIt-Anchor" href="#5-添加共享"></a> 5. 添加共享</h3><p>转到 <code>共享</code> 标签页，点击添加共享。</p><p><img data-src="https://img.iszy.xyz/1668968286999.png" alt="" /></p><p>按需要进行配置，我这边选择开启缓存。</p><p><img data-src="https://img.iszy.xyz/1668968418876.png" alt="" /></p><p>然后自动开启了 SMB 共享，可以进行设置。</p><p><img data-src="https://img.iszy.xyz/1668968571494.png" alt="" /></p><h2 id="五-后记"><a class="markdownIt-Anchor" href="#五-后记"></a> 五、后记</h2><p>今天先折腾到这里，Nas 的基础功能已经基本可用。后续等我加点缓存再测试测试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近折腾 Truenas Scale 一直不是很满意，准备换个 Unraid 试一试。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://www.iszy.cc/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Nas" scheme="https://www.iszy.cc/tags/Nas/"/>
    
    <category term="Unraid" scheme="https://www.iszy.cc/tags/Unraid/"/>
    
  </entry>
  
  <entry>
    <title>Git实用技巧</title>
    <link href="https://www.iszy.cc/posts/git/"/>
    <id>https://www.iszy.cc/posts/git/</id>
    <published>2022-11-10T09:28:50.000Z</published>
    <updated>2022-11-10T09:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git 官方文档: <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2Nz">https://git-scm.com/docs<i class="fa fa-external-link-alt"></i></span></p><span id="more"></span><h2 id="一-基本操作"><a class="markdownIt-Anchor" href="#一-基本操作"></a> 一、基本操作</h2><h3 id="1-新建-git-仓库"><a class="markdownIt-Anchor" href="#1-新建-git-仓库"></a> 1. 新建 git 仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669185106451.png" alt="" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init -b main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m main</span><br></pre></td></tr></table></figure><h3 id="2-克隆远程仓库"><a class="markdownIt-Anchor" href="#2-克隆远程仓库"></a> 2. 克隆远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://git.example.com/someone/test.git</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://git.example.com/someone/test.git test</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://git.example.com/someone/test.git --depth=1 -b main</span><br></pre></td></tr></table></figure><h3 id="3-提交代码"><a class="markdownIt-Anchor" href="#3-提交代码"></a> 3. 提交代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -a</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -u</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -am &quot;first commit&quot;</span><br></pre></td></tr></table></figure><h3 id="4-查看仓库状态"><a class="markdownIt-Anchor" href="#4-查看仓库状态"></a> 4. 查看仓库状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669185760241.png" alt="" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status -s</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669185789446.png" alt="" /></p><h3 id="5-查看提交历史"><a class="markdownIt-Anchor" href="#5-查看提交历史"></a> 5. 查看提交历史</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1sb2c=">https://git-scm.com/docs/git-log<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669185798311.png" alt="" /></p><h3 id="6-新建分支"><a class="markdownIt-Anchor" href="#6-新建分支"></a> 6. 新建分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch test</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout test</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b test</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669185814401.png" alt="" /></p><h3 id="7-合并分支"><a class="markdownIt-Anchor" href="#7-合并分支"></a> 7. 合并分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge test</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669185829746.png" alt="" /></p><h3 id="8-删除分支"><a class="markdownIt-Anchor" href="#8-删除分支"></a> 8. 删除分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d test-not-need</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669185836945.png" alt="" /></p><h3 id="9-合并冲突"><a class="markdownIt-Anchor" href="#9-合并冲突"></a> 9. 合并冲突</h3><p><img data-src="https://img.iszy.xyz/1669185846981.png" alt="" /></p><p>当两个分支都对同一行进行了修改，git 便会产生冲突，并标记为未合并</p><p><img data-src="https://img.iszy.xyz/1669185854676.png" alt="" /></p><p>此时将每个文件进行修改，确认最后的内容，使用 git add 方法标记为冲突已解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .\A.txt</span><br></pre></td></tr></table></figure><p>在所有文件的冲突均已解决后，使用 commit 提交此次修改。</p><p><img data-src="https://img.iszy.xyz/1669185864622.png" alt="" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><h3 id="10-远程仓库"><a class="markdownIt-Anchor" href="#10-远程仓库"></a> 10. 远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><p>默认应该为空</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin http://git.example.com/someone/test.git</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/main main</span><br><span class="line">git branch -u origin/main main</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669186022128.png" alt="" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><h2 id="二-常见技巧"><a class="markdownIt-Anchor" href="#二-常见技巧"></a> 二、常见技巧</h2><h3 id="1-临时保存成果"><a class="markdownIt-Anchor" href="#1-临时保存成果"></a> 1. 临时保存成果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669186037294.png" alt="" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669186045214.png" alt="" /></p><h3 id="2-合并分支灵活选择-rebasemerge"><a class="markdownIt-Anchor" href="#2-合并分支灵活选择-rebasemerge"></a> 2. 合并分支灵活选择 rebase/merge</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge test</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase test</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669186058175.png" alt="" /></p><h3 id="3-cherry-pick"><a class="markdownIt-Anchor" href="#3-cherry-pick"></a> 3. cherry-pick</h3><p>适合 hotfix</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 12d654f1d701cbf7cd9abb98ce84eeef460a24a7</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669186102974.png" alt="" /></p><p><img data-src="https://img.iszy.xyz/1669186072778.png" alt="" /></p><h3 id="4-修改上次提交"><a class="markdownIt-Anchor" href="#4-修改上次提交"></a> 4. 修改上次提交</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>会同时提交暂存的文件</p><h3 id="5-取消文件修改"><a class="markdownIt-Anchor" href="#5-取消文件修改"></a> 5. 取消文件修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .\C.txt</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1669186116701.png" alt="" /></p><h3 id="6-弃用提交"><a class="markdownIt-Anchor" href="#6-弃用提交"></a> 6. 弃用提交</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保留文件</span></span><br><span class="line">git reset --soft 12d654f1d701cbf7cd9abb98ce84eeef460a24a7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">丢弃修改</span></span><br><span class="line">git reset --hard 12d654f1d701cbf7cd9abb98ce84eeef460a24a7</span><br></pre></td></tr></table></figure><h3 id="7-补丁文件"><a class="markdownIt-Anchor" href="#7-补丁文件"></a> 7. 补丁文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff [file] &gt; a.patch</span><br><span class="line">git apply a.patch</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Git 官方文档: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2Nz&quot;&gt;https://git-scm.com/docs&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="git" scheme="https://www.iszy.cc/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>让一个元素高度随宽度按比例自适应</title>
    <link href="https://www.iszy.cc/posts/css-percentagewidth-autoheight/"/>
    <id>https://www.iszy.cc/posts/css-percentagewidth-autoheight/</id>
    <published>2022-11-05T02:04:34.000Z</published>
    <updated>2022-11-05T02:04:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录</p><span id="more"></span><p>宽度的自适应是根据 Viewport 的 width 来调整的，高度的自适应也根据 Viewport 的 height 来调整的，理论上和 width 没有任何关系。所以需要找到一个可以关联上 Viewport 的 with 的属性还能撑起高度。</p><p>这个属性就是 padding，padding 是根据 Viewport 的 width 来调整的，padding-top 和 padding-bottom 也是如此，所以我们设置这个属性就可以和 width 保持一定比例了。</p><p>现在比如</p><p>父容器样式为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#dedede</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子容器样式为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们再设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子元素就变成了一个宽度 80%，高度为 0，但有 80% 宽度 的 padding-bottom 的正方形了，效果如下图</p><p><img data-src="https://img.iszy.xyz/1667613841613.png" alt="" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.iszy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="CSS" scheme="https://www.iszy.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Linux 使用 du 查看文件占用空间</title>
    <link href="https://www.iszy.cc/posts/linux-du/"/>
    <id>https://www.iszy.cc/posts/linux-du/</id>
    <published>2022-11-04T01:56:06.000Z</published>
    <updated>2022-11-04T01:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>du</code> 命令是一个标准的 Linux/Unix 命令，允许用户快速获得磁盘使用信息。可以用来显示目录或文件的大小，查找文件和目录的磁盘使用情况的命令。du 命令在与各种选项一起使用时能以多种格式提供结果。</p><span id="more"></span><h2 id="一-常用命令"><a class="markdownIt-Anchor" href="#一-常用命令"></a> 一、常用命令</h2><h3 id="查看当前目录所占空间"><a class="markdownIt-Anchor" href="#查看当前目录所占空间"></a> 查看当前目录所占空间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1667525725877.png" alt="" /></p><h3 id="查看当前目录所有文件包括内层文件所占空间"><a class="markdownIt-Anchor" href="#查看当前目录所有文件包括内层文件所占空间"></a> 查看当前目录所有文件（包括内层文件）所占空间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1667525880573.png" alt="" /></p><h3 id="查看当前目录所有文件及目录大小"><a class="markdownIt-Anchor" href="#查看当前目录所有文件及目录大小"></a> 查看当前目录所有文件及目录大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1667525959810.png" alt="" /></p><h3 id="查看当前目录所有隐藏文件及目录大小"><a class="markdownIt-Anchor" href="#查看当前目录所有隐藏文件及目录大小"></a> 查看当前目录所有隐藏文件及目录大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh .[!.]*</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1667526150032.png" alt="" /></p><h3 id="查看当前目录所有文件及目录大小包含隐藏文件夹"><a class="markdownIt-Anchor" href="#查看当前目录所有文件及目录大小包含隐藏文件夹"></a> 查看当前目录所有文件及目录大小，包含隐藏文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh * .[^.]*</span><br></pre></td></tr></table></figure><p><img data-src="https://img.iszy.xyz/1667525678301.png" alt="" /></p><h2 id="二-主要参数"><a class="markdownIt-Anchor" href="#二-主要参数"></a> 二、主要参数</h2><h3 id="-h-human-readable"><a class="markdownIt-Anchor" href="#-h-human-readable"></a> -h , --human-readable</h3><p><code>-h</code> 标志以人类可读的格式打印大小输出。</p><p>默认 du 输出的数值都是以 Bytes 为单位的，可读性不佳。加上<code>-h</code>参数后，可以自动转换为以 KB、MB、GB 的方式展示，更加贴合习惯。</p><h3 id="-s-summarize"><a class="markdownIt-Anchor" href="#-s-summarize"></a> -s, --summarize</h3><p><code>-s</code> 标志通常和 <code>-h</code> 标志一并使用。默认 du 会展示目录下的所有子级，加上 <code>-s</code> 标志后，则会显示当前目录下文件及目录大小汇总。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;du&lt;/code&gt; 命令是一个标准的 Linux/Unix 命令，允许用户快速获得磁盘使用信息。可以用来显示目录或文件的大小，查找文件和目录的磁盘使用情况的命令。du 命令在与各种选项一起使用时能以多种格式提供结果。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Linux" scheme="https://www.iszy.cc/tags/Linux/"/>
    
    <category term="du" scheme="https://www.iszy.cc/tags/du/"/>
    
  </entry>
  
  <entry>
    <title>利用HAR文件查看和诊断网络请求</title>
    <link href="https://www.iszy.cc/posts/chrome-har-debug/"/>
    <id>https://www.iszy.cc/posts/chrome-har-debug/</id>
    <published>2022-09-14T05:00:02.000Z</published>
    <updated>2022-09-14T05:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过 HAR 文件可以方便快捷的查看和诊断网络请求，定位问题。最近才学习到这个有用的知识，在此记录下</p><span id="more"></span><h2 id="一-har-是什么"><a class="markdownIt-Anchor" href="#一-har-是什么"></a> 一、HAR 是什么</h2><p>HAR（HTTP 归档）是多种 HTTP 会话工具用来导出所记录数据的 一种文件格式。这种格式基本上是 JSON 对象，并具有一组特定的字段。请注意，并非所有 HAR 格式的字段都是必填字段， 很多时候，部分信息不会保存到文件中。</p><p><strong>注意：</strong></p><p><strong>HAR 文件包含敏感数据！</strong></p><ul><li>录制过程中所下载网页中的内容。</li><li>Cookie（任何有 HAR 文件的人都可以使用这些 Cookie 冒用帐号）。</li><li>录制过程中提交的所有信息： 个人详细信息、密码、信用卡号码等。</li></ul><p>如有需要，可以在文本编辑器中编辑 HAR 文件以及对敏感信息进行 匿名处理。</p><p>以在多种浏览器中记录 HTTP 会话，包括 Google Chrome、Microsoft Edge 以及 Mozilla Firefox。</p><h2 id="二-创建和查看-har-文件"><a class="markdownIt-Anchor" href="#二-创建和查看-har-文件"></a> 二、创建和查看 HAR 文件</h2><p>这边我主要以 Chrome 浏览器为例，其他浏览器可以参考。IE 浏览器不支持保存为 HAR 文件，需要通过第三方软件如 <span class="exturl" data-url="aHR0cHM6Ly93d3cudGVsZXJpay5jb20vZmlkZGxlcg==">Fiddler<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuaHR0cHdhdGNoLmNvbS8=">HttpWatch<i class="fa fa-external-link-alt"></i></span> 等实现。</p><h3 id="创建-har-文件"><a class="markdownIt-Anchor" href="#创建-har-文件"></a> 创建 HAR 文件</h3><p>在 Network 面板中<strong>右键点击任意一条请求</strong>，点击<strong>Save As HAR With Content</strong>，即可将所有请求保存为 HAR 文件。<strong>注意，Network 面板中的过滤条件是被忽略的。</strong></p><p><img data-src="https://img.iszy.xyz/1663130958729.png" alt="" /></p><p>从 71 版本开始，导入导出 HAR 文件开始包好 Initiator 和 priority 信息。</p><p>从 <strong>76 版本</strong>开始，Chrome 导出的 HAR 文件中首次开始包含 WebSocket 消息。另外 ，Chrome 在 Network 面板<strong>新增了导入和导出 HAR 文件的按钮</strong>，使用更加便捷。</p><p><img data-src="https://img.iszy.xyz/1663131014757.png" alt="" /></p><h3 id="查看-har-文件"><a class="markdownIt-Anchor" href="#查看-har-文件"></a> 查看 HAR 文件</h3><p>从 <strong>62 版本</strong>开始，Chrome 增加了<strong>将 HAR 文件拖拽到 Network 面板进行导入展示</strong>的功能。</p><p><img data-src="https://img.iszy.xyz/1663130703947.png" alt="" /></p><p>从 76 版本开始，可以通过 Chrome 在 Network 面板<strong>新增的导入 HAR 文件的按钮</strong>进行导入。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过 HAR 文件可以方便快捷的查看和诊断网络请求，定位问题。最近才学习到这个有用的知识，在此记录下&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Chrome" scheme="https://www.iszy.cc/tags/Chrome/"/>
    
    <category term="浏览器" scheme="https://www.iszy.cc/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="Har" scheme="https://www.iszy.cc/tags/Har/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 开启压缩</title>
    <link href="https://www.iszy.cc/posts/springboot-enable-compress/"/>
    <id>https://www.iszy.cc/posts/springboot-enable-compress/</id>
    <published>2022-09-14T01:38:50.000Z</published>
    <updated>2022-09-14T01:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司的部分老项目还没有用上 webpack，前后端不分离，有不少静态资源不压缩的话还是比较大的。这边记录下 Spring Boot 开启压缩的方法。</p><span id="more"></span><h2 id="开启方法"><a class="markdownIt-Anchor" href="#开启方法"></a> 开启方法</h2><ol><li>首先需要在 <code>application.yml</code> 里启用压缩</li><li>因为默认只压缩 <code>text/html</code> 类型，需要添加上其他需要的类型，比如 <code>application/json</code></li><li>如有需要可以配置启用压缩的最小响应大小，默认为 <code>2048 byte</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">mime-types:</span> <span class="string">application/json,application/xml,text/html,text/xml,text/plain</span></span><br><span class="line">    <span class="attr">min-response-size:</span> <span class="number">2048</span></span><br></pre></td></tr></table></figure><h2 id="效果对比"><a class="markdownIt-Anchor" href="#效果对比"></a> 效果对比</h2><p>压缩前</p><p><img data-src="https://img.iszy.xyz/1663551069657.png" alt="" /></p><p>压缩后</p><p><img data-src="https://img.iszy.xyz/1663551287356.png" alt="" /></p><p>可以看到已经开启了 gzip 压缩</p><p><img data-src="https://img.iszy.xyz/1663551338263.png" alt="" /></p><h2 id="常见其他方法"><a class="markdownIt-Anchor" href="#常见其他方法"></a> 常见其他方法</h2><p>一般如果应用比较多，在每个应用里添加配置还是比较麻烦的。可以考虑使用 Nginx 进行代理，统一添加 gzip 甚至 brotli 压缩，会更加方便。brotli 和 gzip 可以同时开始，压缩效果更好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;公司的部分老项目还没有用上 webpack，前后端不分离，有不少静态资源不压缩的话还是比较大的。这边记录下 Spring Boot 开启压缩的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.iszy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Spring Boot" scheme="https://www.iszy.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>强制删除 Kubernetes Namespace</title>
    <link href="https://www.iszy.cc/posts/force-delete-k8s-namespace/"/>
    <id>https://www.iszy.cc/posts/force-delete-k8s-namespace/</id>
    <published>2022-08-12T08:43:41.000Z</published>
    <updated>2022-08-12T08:43:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一次 Kubernetes NameSpace 的强制删除。</p><span id="more"></span><h2 id="一-前情"><a class="markdownIt-Anchor" href="#一-前情"></a> 一、前情</h2><p>我在使用 Kubernetes 时，遇到了 Kubernetes NameSpace 无法正常删除的问题。</p><p>NameSpace 状态保持在 Terminating 已经挺久了，我决定强制删除这个 NameSpace。</p><h2 id="二-步骤"><a class="markdownIt-Anchor" href="#二-步骤"></a> 二、步骤</h2><h3 id="1-查看存在的-namespace"><a class="markdownIt-Anchor" href="#1-查看存在的-namespace"></a> 1. 查看存在的 NameSpace</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get ns</span><br><span class="line">NAME                   STATUS        AGE</span><br><span class="line">default                Active        5h46m</span><br><span class="line">istio-system           Terminating   11m</span><br><span class="line">kube-node-lease        Active        5h46m</span><br><span class="line">kube-public            Active        5h46m</span><br><span class="line">kube-system            Active        5h46m</span><br><span class="line">kubernetes-dashboard   Active        5h46m</span><br></pre></td></tr></table></figure><h3 id="2-尝试强制删除-namespace"><a class="markdownIt-Anchor" href="#2-尝试强制删除-namespace"></a> 2. 尝试强制删除 NameSpace</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl delete ns istio-system --force --grace-period=0</span><br><span class="line">warning: Immediate deletion does not <span class="built_in">wait</span> <span class="keyword">for</span> confirmation that the running resource has been terminated. The resource may <span class="built_in">continue</span> to run on the cluster indefinitely.</span><br></pre></td></tr></table></figure><p>卡了挺久也没有效果，看来是删不掉，得强制删了</p><h3 id="2-获取需要强制删除的-namespace-信息"><a class="markdownIt-Anchor" href="#2-获取需要强制删除的-namespace-信息"></a> 2. 获取需要强制删除的 NameSpace 信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get namespace istio-system -o json &gt; istio-system.json</span><br></pre></td></tr></table></figure><h3 id="3-删除-finalizers-相关内容"><a class="markdownIt-Anchor" href="#3-删除-finalizers-相关内容"></a> 3. 删除 finalizers 相关内容</h3><p><img data-src="https://img.iszy.xyz/1660293510641.png" alt="" /></p><h3 id="4-运行-kube-proxy"><a class="markdownIt-Anchor" href="#4-运行-kube-proxy"></a> 4. 运行 kube-proxy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl proxy</span><br><span class="line">Starting to serve on 127.0.0.1:8001</span><br></pre></td></tr></table></figure><h3 id="5-通过-api-强制删除-namespace"><a class="markdownIt-Anchor" href="#5-通过-api-强制删除-namespace"></a> 5. 通过 API 强制删除 NameSpace</h3><p>新运行个终端，调用 API 删除 NameSpace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# curl -k -H <span class="string">&quot;Content-Type: application/json&quot;</span> -X PUT --data-binary @istio-system.json http://127.0.0.1:8001/api/v1/namespaces/istio-system/finalize</span><br></pre></td></tr></table></figure><h3 id="6-关闭-kube-proxy-并确认-namespace-已删除"><a class="markdownIt-Anchor" href="#6-关闭-kube-proxy-并确认-namespace-已删除"></a> 6. 关闭 kube-proxy 并确认 NameSpace 已删除</h3><p>按 <code>CTRL-C</code> 关闭 kube-proxy，然后确认下现在的 NameSpace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get ns</span><br><span class="line">NAME                   STATUS        AGE</span><br><span class="line">default                Active        5h48m</span><br><span class="line">kube-node-lease        Active        5h48m</span><br><span class="line">kube-public            Active        5h48m</span><br><span class="line">kube-system            Active        5h48m</span><br><span class="line">kubernetes-dashboard   Active        5h48m</span><br></pre></td></tr></table></figure><p>可以看到 NameSpace 已经被强制删除了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记一次 Kubernetes NameSpace 的强制删除。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.iszy.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Docker" scheme="https://www.iszy.cc/tags/Docker/"/>
    
    <category term="Kubernetes" scheme="https://www.iszy.cc/tags/Kubernetes/"/>
    
    <category term="K8s" scheme="https://www.iszy.cc/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>下载老版本 Chromium 的正确姿势</title>
    <link href="https://www.iszy.cc/posts/old-chromium-download/"/>
    <id>https://www.iszy.cc/posts/old-chromium-download/</id>
    <published>2022-07-14T03:18:03.000Z</published>
    <updated>2022-07-14T03:18:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>网站开发中，有时候会遇到特定老版本 Chromium 才会产生的 bug，需要使用老版本的 Chromium 来解决。下面记录一下如何下载老版本的 Chromium 包。</p><span id="more"></span><h2 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h2><h3 id="一-查找对应版本的分支信息"><a class="markdownIt-Anchor" href="#一-查找对应版本的分支信息"></a> 一、查找对应版本的分支信息</h3><p><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWl1bWRhc2guYXBwc3BvdC5jb20vYnJhbmNoZXM=">https://chromiumdash.appspot.com/branches<i class="fa fa-external-link-alt"></i></span></p><p>这里有每个分支版本的相关信息以及分支位置</p><p><img data-src="https://img.iszy.xyz/1722480749524.png" alt="页面预览" /></p><p>比如我需要80版本的Chromium，这里就可以看下80分支的信息，主要需要这个 <code>Branch Pos.</code> 的内容，如图所示。</p><p><img data-src="https://img.iszy.xyz/1722480814407.png" alt="" /></p><h3 id="二-通过-position-号查找软件包"><a class="markdownIt-Anchor" href="#二-通过-position-号查找软件包"></a> 二、通过 Position 号查找软件包</h3><p><span class="exturl" data-url="aHR0cHM6Ly9jb21tb25kYXRhc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9jaHJvbWl1bS1icm93c2VyLXNuYXBzaG90cy9pbmRleC5odG1s">Chromium 历史存储仓库<i class="fa fa-external-link-alt"></i></span></p><p>先选择需要的平台</p><p><img data-src="https://img.iszy.xyz/1657769779611.png" alt="" /></p><p>然后根据 <code>Position</code> 号找到对应的版本</p><p><img data-src="https://img.iszy.xyz/1657769834283.png" alt="" /></p><p>可能会搜不到，可以手动拉到对应 <code>Position</code> 号附近的版本，大版本号基本是一致的。比如这里我选择了 <code>612439</code> 版本。</p><p><img data-src="https://img.iszy.xyz/1657769953873.png" alt="" /></p><p>下载对应的压缩版，解压即可使用。比如这里就是<code>chrome-win.zip</code>。</p><p><img data-src="https://img.iszy.xyz/1657770071034.png" alt="" /></p><h3 id="开始使用吧"><a class="markdownIt-Anchor" href="#开始使用吧"></a> 开始使用吧</h3><p><img data-src="https://img.iszy.xyz/1657770205975.png" alt="" /></p><h2 id="一点注意"><a class="markdownIt-Anchor" href="#一点注意"></a> 一点注意</h2><p>有一点小坑，在需要切换 Chromium 版本时，需要把已经开着的 Chromium 全都关闭，再打开新版本的 Chromium，否则版本不会切换。</p><p>另，Chrome 和 Chromium 是互不影响的，切换 Chromium 版本，不用考虑 Chrome 的状态。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网站开发中，有时候会遇到特定老版本 Chromium 才会产生的 bug，需要使用老版本的 Chromium 来解决。下面记录一下如何下载老版本的 Chromium 包。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://www.iszy.cc/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Chrome" scheme="https://www.iszy.cc/tags/Chrome/"/>
    
    <category term="Chromium" scheme="https://www.iszy.cc/tags/Chromium/"/>
    
  </entry>
  
</feed>
