<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MacOS 解决新版 Chrome 中 NET::ERR_CERT_INVALID不能继续的问题</title>
    <url>/posts/0/</url>
    <content><![CDATA[<p>在 Chrome 中，访问不受信任的 HTTPS 网站时，一般会提示如下的提示。这可能是由于证书过期、不匹配或者可能用的是自签名证书等情况。通常点击高级按钮会有一个继续按钮，浏览器就会关闭当前页面警告并继续访问。但在高版本的 Chrome for mac 中，是没有这个继续按钮的。</p>
<span id="more"></span>
<h2 id="图示">图示</h2>
<p>如图所示：</p>
<p><img data-src="https://img.iszy.xyz/1639981594486.png" alt=""></p>
<h2 id="解决">解决</h2>
<p>其实，Chrome 中只是隐藏了这个按钮，还是可以通过一个简单的办法来触发继续的功能的。</p>
<p>那就是<strong>点击页面的空白处，直接在键盘上输入<code>thisisunsafe</code></strong></p>
<p>注意不要选中按钮或者页面上的什么内容，输入法要在英文状态，然后直接在页面上敲这串字母就行了。</p>
<p>接下来你会发现页面可以正常跳转了，地址栏前面会标记不安全，点击会显示<strong>你已选择禁用此站点的安全警告</strong>。关闭警告是站点级别的，不会影响到其他网站。如果想要重新打开警告，可以点击下图中的<strong>启用警告</strong>。</p>
<p><img data-src="https://img.iszy.xyz/1639982038571.png" alt=""></p>
<h2 id="吐槽">吐槽</h2>
<p>这个东西隐藏的是真的很深，可能是开发者留出来的彩蛋，方便开发调试用？网上还有说可以输入<code>badidea</code>，亲测已经没有效果。不知道后续版本会不会移除<code>thisisunsafe</code>，理论上应该不会，毕竟不太可能误触。不然还得去 flags 页面关闭所有的安全警告，反而是更不安全了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>多次提前还贷计算器及PMT 函数</title>
    <url>/posts/1/</url>
    <content><![CDATA[<p>最近写了个计算多次提前还贷的计算器，大家可以尝试使用，计算结果仅供参考。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pc3p5Lnh5ei9tb25leS9tdHFMb2Fucw==">多次提前还贷计算器<i class="fa fa-external-link-alt"></i></span></p>
<p>网上这样的工具其实不少，不过用起来不是很得劲。比如有的还款时间只能写到月份，有的限制了多次提前还款的次数，不是很自由。</p>
<p>所以我就用 vue 自己写了一个，自认为还挺好用的吧，没有设置什么限制，不过精度问题还需要继续优化。</p>
<p><img data-src="https://img.iszy.xyz/20210416175915.png" alt=""></p>
<h2 id="实现">实现</h2>
<h3 id="输入输出">输入输出</h3>
<p>输入:</p>
<ul>
<li>贷款金额</li>
<li>贷款期限</li>
<li>贷款利率</li>
<li>还款方式(等额本息、等额本金)</li>
<li>首次还款时间</li>
<li>提前还款
<ul>
<li>还款金额</li>
<li>还款时间</li>
<li>调整期数</li>
<li>调整利率</li>
</ul>
</li>
</ul>
<p>输出:</p>
<ul>
<li>累计提前还款</li>
<li>累计调整期数</li>
<li>原累计利息</li>
<li>累计缴息</li>
<li>累计节省利息</li>
<li>每月明细</li>
</ul>
<h3 id="月明细计算">月明细计算</h3>
<ul>
<li>
<p><strong>每月利息</strong>: <code>本月剩余本金 * 年利率 / 12</code></p>
</li>
<li>
<p><strong>每月还款额</strong>:</p>
<ul>
<li>等额本息: 用 <code>PMT 函数</code>计算</li>
<li>等额本金: <code>本月偿还本金 + 本月利息</code></li>
</ul>
</li>
<li>
<p><strong>每月偿还本金</strong>:</p>
<ul>
<li>等额本息: <code>本月还款额 - 本月利息</code></li>
<li>等额本金: <code>本月剩余本金 / 剩余期数</code></li>
</ul>
</li>
</ul>
<h3 id="PMT-函数">PMT 函数</h3>
<p>这个函数本是 Excel 里的，不过 Excel 不开源，只好另外用 js 来实现。这里使用的是网上的大佬实现的版本。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copy of Excel&#x27;s PMT function.</span></span><br><span class="line"><span class="comment"> * Credit: http://stackoverflow.com/questions/2094967/excel-pmt-function-in-js</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>ratePerPeriod       The interest rate for the loan.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>numberOfPayments    The total number of payments for the loan in months.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>presentValue        The present value, or the total amount that a series of future payments is worth now;</span></span><br><span class="line"><span class="comment"> *                            Also known as the principal.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>futureValue         The future value, or a cash balance you want to attain after the last payment is made.</span></span><br><span class="line"><span class="comment"> *                            If fv is omitted, it is assumed to be 0 (zero), that is, the future value of a loan is 0.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type                Optional, defaults to 0. The number 0 (zero) or 1 and indicates when payments are due.</span></span><br><span class="line"><span class="comment"> *                              0 = At the end of period</span></span><br><span class="line"><span class="comment"> *                              1 = At the beginning of the period</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pmt</span>(<span class="params">ratePerPeriod, numberOfPayments, presentValue, futureValue, type</span>) </span>&#123;</span><br><span class="line">  futureValue = <span class="keyword">typeof</span> futureValue !== <span class="string">&quot;undefined&quot;</span> ? futureValue : <span class="number">0</span>;</span><br><span class="line">  type = <span class="keyword">typeof</span> type !== <span class="string">&quot;undefined&quot;</span> ? type : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ratePerPeriod !== <span class="number">0.0</span>) &#123;</span><br><span class="line">    <span class="comment">// Interest rate exists</span></span><br><span class="line">    <span class="keyword">const</span> q = <span class="built_in">Math</span>.pow(<span class="number">1</span> + ratePerPeriod, numberOfPayments);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      -(ratePerPeriod * (futureValue + q * presentValue)) /</span><br><span class="line">      ((-<span class="number">1</span> + q) * (<span class="number">1</span> + ratePerPeriod * type))</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numberOfPayments !== <span class="number">0.0</span>) &#123;</span><br><span class="line">    <span class="comment">// No interest rate, but number of payments exists</span></span><br><span class="line">    <span class="keyword">return</span> -(futureValue + presentValue) / numberOfPayments;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>应用</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>JavaScript</tag>
        <tag>PMT</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions + Webhooks 实现项目自动化部署</title>
    <url>/posts/10/</url>
    <content><![CDATA[<p>最近 Github 有推出类似 Gitlab ci 的 Github actions，想折腾一下博客的自动部署，在此记录。</p>
<span id="more"></span>
<h2 id="思路">思路</h2>
<p>初步的想法是通过 Github Actions 编译项目，然后将编译完成的输出推送到 deploy 或者 gh-pages 分支，然后通过 Webhook 通知服务器，最终通过脚本进入部署目录将文件 pull 下来完成整个部署流程。</p>
<h2 id="Github-Actions-脚本">Github Actions 脚本</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL215LWhleG8tYmxvZy9ibG9iLzljYWMxNWFhNTIyYTQ2ZWQ2NmE3MDdjMzM4ZWQyMjlkMjBkYWRjMTkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95LnltbA==">完整脚本<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="指定触发-Action-的事件">指定触发 Action 的事件</h3>
<p>首先要指定触发部署的事件，在这里我将事件指定为 main 分支的推送事件，main 分支的 pull_request 事件，以及允许手动启动部署操作以防万一。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br></pre></td></tr></table></figure>
<h3 id="设置-Action-要执行的命令">设置 Action 要执行的命令</h3>
<p>一个 Action 里可以配置多个 job，可以通过 <code>runs-on</code> 设置 job 执行的环境，这里我选择了 <code>ubuntu-latest</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br></pre></td></tr></table></figure>
<p>每个 job 由多个 step 组成，这里可以选择别人封装好的 action 脚本，也可以选择执行自定义的脚本。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎️</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">12</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">12.</span><span class="string">x</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">🔧</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">install</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">app</span> <span class="string">🔧</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@4.1.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>首先使用官方提供的<code>actions/checkout@v2</code>切换到需要执行的分支。如果像我这样没有指定任何配置，那将会默认切换到触发 Action 的分支。</p>
</li>
<li>
<p>使用 <code>actions/setup-node@v1</code> 切换 Node.js 版本。一般环境中都是预装了 Node.js 和 yarn 的，可以直接使用，如果不需要指定到 Node.js 的旧版本，则可以跳过这一步。<code>node-version</code>参数可以像我这样，指定一个版本，也可以配置成一个数组，那么接下来的操作会自动在每一个指定的 Node.js 版本下执行，比较适合测试兼容性这样的使用场景。</p>
</li>
<li>
<p>接下来直接用 <code>run</code> 参数执行自定义的编译脚本，运行默认都是在项目所在的根目录下执行的。</p>
</li>
<li>
<p>最终使用了第三方的 Action <code>JamesIves/github-pages-deploy-action@4.1.0</code>将指定目录(public)下的文件推送到对应的分支(gh-pages)，接下来只需要去服务器上把文件 pull 下来即可。</p>
</li>
</ol>
<h3 id="配置-Webhook">配置 Webhook</h3>
<p>由于是纯静态博客，所以我的服务器上也是没有后端的，所以我找了一个变通的方式来实现。</p>
<p>在网站的 deploy 路径下放了一个静态的 json 文件，配置允许通过任何请求方式请求，将此文件的请求日志写入系统目录。然后通过一个脚本监听此文件，当有新内容时，进入文件部署目录执行 <code>git pull</code>。</p>
<p>然后将此路径配置到项目的 Webhook 配置中，如图所示。这样当触发 push 操作时，github 就会发送一个 post 请求到此路径，也就能触发我服务器上的部署脚本了。</p>
<p><img data-src="https://img.iszy.xyz/20210923132313.png?x-oss-process=style/big" alt="Webhook"></p>
<h2 id="使用体验">使用体验</h2>
<p>基本能够在我提交代码后，很好的完成整套部署流程，不再需要去服务器上进行操作，方便了很多。不过感觉通过循环监听文件的方法不是很优雅，效率也不是很高，后面我会考虑是否能有更好的替代方案。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Github Actions</tag>
        <tag>自动化部署</tag>
        <tag>Webhooks</tag>
      </tags>
  </entry>
  <entry>
    <title>完全通过 Github Actions 实现项目的自动化部署</title>
    <url>/posts/11/</url>
    <content><![CDATA[<p>前段时间写了一个通过 Github Actions 配合 Webhooks 实现项目自动化部署，但是服务器上由于并没有后端服务，所以实现的方式不太优雅。今天我将完全抛弃 Webhook，完全通过 Github Actions 来实现项目的自动化部署。</p>
<span id="more"></span>
<h2 id="改进">改进</h2>
<p>如果还没看过上一篇的，可以移步这里看一下<a href="https://www.iszy.cc/posts/10/">Github Actions + Webhooks 实现项目自动化部署</a>。</p>
<p>这次的主要改进就是移除了 Webhooks 的依赖，不需要在服务器上进行监听。</p>
<p>其实很简单，就是通过 Github Actions 主动登录服务器，执行自定义脚本，完成 git pull 操作。</p>
<h2 id="Gihub-Actions-脚本">Gihub Actions 脚本</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL215LWhleG8tYmxvZy9ibG9iLzczYWY5OGFlNGVmOTUxNTZkMmU1MTY5NzYzM2I5ZmI0M2M1OTM4NmUvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95LnltbA==">完整脚本<i class="fa fa-external-link-alt"></i></span></p>
<p>大致内容和之前是一样的，优化了两个地方。</p>
<h3 id="增加缓存">增加缓存</h3>
<p>增加了对<code>node_modules</code>目录的缓存，从而在大部分时间里加速安装依赖的时间。由于 yarn 的机制，在没有更新 yarn.lock 文件时，安装依赖几乎可以说是直接跳过的，从而大大缩短了每次部署的时间。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎️</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">cached</span> <span class="string">./node_modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">./node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-yarn-lock-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;./yarn.lock&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-yarn-lock-</span></span><br></pre></td></tr></table></figure>
<p>可以看到这边采用了官方的<code>actions/cache@v2</code>脚本，根据 yarn.lock 的 hash 值来缓存 node_modules 目录，可以不用担心没法升级依赖。</p>
<h3 id="登录服务器">登录服务器</h3>
<p>这边为了安全因素，建议将登录参数储存到项目的 Secrets 中，这样就能通过环境变量在 Github Actions 中调用，不用担心泄露的问题。</p>
<p><img data-src="https://img.iszy.xyz/20210923134132.png?x-oss-process=style/big" alt="Secrets"></p>
<p>点击项目的<code>Settings</code>-<code>Secrets</code>-<code>New repository secret</code>即可创建。Secret 名称就是环境变量名，内容则是具体的值。</p>
<p>接着调用<code>appleboy/ssh-action@master</code>脚本，将登录参数指定为对应的环境变量，然后配置一组需要执行的脚本，这边可以根据个人的实际情况进行配置，自由度很高了。既然都能登陆服务器，那自然是想做什么都可以了。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎️</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">cached</span> <span class="string">./node_modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">./node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-yarn-lock-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;./yarn.lock&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-yarn-lock-</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">🔧</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">install</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">app</span> <span class="string">🔧</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@4.1.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">public</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">server</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">port:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            cd /your/path</span></span><br><span class="line"><span class="string">            git pull --rebase</span></span><br><span class="line"><span class="string">            ls -al</span></span><br></pre></td></tr></table></figure>
<h2 id="使用体验">使用体验</h2>
<p>这次的体验很好，基本上不用浪费自己服务器的性能，也可以通过自定义的脚本将服务器上自己关心的内容输出到日志中。我暂时认为这就是现阶段通过 Github Actions 完成自动化部署的最佳方案了。希望对大家有所帮助。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Github Actions</tag>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code + ESLint 自动格式化和快捷键配置</title>
    <url>/posts/12/</url>
    <content><![CDATA[<p>在此记录一下 VS Code 配合 ESLint 进行自动修复格式化，以及快捷键的配置。</p>
<span id="more"></span>
<h2 id="准备">准备</h2>
<p>首先在 VS Code 中使用 ESLint，<code>ESLint</code> 插件肯定是少不了的。</p>
<p><img data-src="https://img.iszy.xyz/1632972151436.png" alt="ESLint"></p>
<p>如果需要支持 Vue，还需要安装 <code>Vetur</code> 插件。</p>
<p><img data-src="https://img.iszy.xyz/1632972292437.png" alt="Vetur"></p>
<p>当然项目中需要在 devDependencies 里添加 eslint 相关内容。</p>
<p><img data-src="https://img.iszy.xyz/1632972500989.png" alt="devDependencies"></p>
<p>如果需要对所有项目使用，建议全局安装 eslint。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install eslint -g</span><br></pre></td></tr></table></figure>
<h2 id="配置自动格式化">配置自动格式化</h2>
<p>打开 VS Code 首选项，切换成 JSON 模式。</p>
<p><img data-src="https://img.iszy.xyz/1632973295099.png" alt=""></p>
<p>然后添加如下内容。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span>: [<span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;vue&quot;</span>, <span class="string">&quot;html&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时，当你在保存 js、vue、html 文件时，ESLint 将会执行自动修复格式化操作。</p>
<h2 id="添加-ESLint-自动修复快捷键">添加 ESLint 自动修复快捷键</h2>
<p>自动格式化是好，但是有时候我们想自己主动触发格式化，而不是在每次保存时自动修复格式化。那么为了方便，我们可以考虑设置一个快捷键，用于触发格式化。不用配置上一部分的内容。</p>
<p>打开 <code>文件</code> -&gt; <code>首选项</code> -&gt; <code>键盘快捷方式</code>。或者英文的 <code>Code</code> -&gt; <code>Preferences</code> -&gt; <code>Keyboard Shortcuts</code>。</p>
<p><img data-src="https://img.iszy.xyz/1632973421746.png" alt="快捷键"></p>
<p>此时会列出当前可以绑定快捷键的所有功能和快捷键，在这里搜索<code>fix</code>。</p>
<p><img data-src="https://img.iszy.xyz/1632973767580.png" alt="修复快捷键"></p>
<p>可以看到<code>全部修复</code>也就是修复当前文件的全部错误，是没有绑定快捷键的。点击条目前面的加号，或是双击该条，可以添加和覆盖绑定的快捷键。打开后先按下想要绑定的快捷键再回车，即可保存。右键该条目可以删除或重置键绑定。这边我按照自己的习惯绑定了<code>Alt</code> + <code>X</code>。</p>
<p><img data-src="https://img.iszy.xyz/1632973867998.png" alt=""></p>
<p>此时，在你打开的文件中按下此快捷键，就会触发 ESLint 的自动修复格式化。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>ESLint</tag>
        <tag>格式化</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile 指令 COPY 拷贝文件夹</title>
    <url>/posts/13/</url>
    <content><![CDATA[<p>今天在编写 dockerfile 时使用 COPY 拷贝文件夹时遇到了意料之外的情况。在此记录一下正确的使用方法。</p>
<span id="more"></span>
<h2 id="背景说明">背景说明</h2>
<p>今天在通过 dockerfile 将文件夹拷贝到镜像的时候发现，是把文件夹下的内容拷贝进去了。</p>
<p>dockerfile 如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> dist node_modules package.json ./</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;yarn&quot;</span>, <span class="string">&quot;start:prod&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>我是想把 dist 和 node_modules 两个文件夹都拷贝到镜像中，又不想用多条 COPY 来分别拷贝，那样会多一个 layer。结果发现 dist 和 node_modules 两个文件夹本身没有被拷贝进镜像，而是把文件夹下的内容分别拷贝进的镜像。</p>
<p>经过测试发现：</p>
<ul>
<li><code>ADD</code> 命令和 <code>COPY</code> 命令在复制文件时行为一致</li>
<li><code>COPY/ADD</code> 命令的源如果是文件夹，复制的是文件夹的内容而不是其本身</li>
<li>使用 <code>*</code> 匹配所有文件，如果遇到文件夹也会保持上述逻辑，即仅复制内容</li>
</ul>
<p>这个逻辑很诡异，和我们的一般预期不符。</p>
<p>我发现在六年前就已经有人问过类似的问题了，看来也没啥要改的意思。</p>
<h2 id="实现方法">实现方法</h2>
<p>下面列举几个事项方式，大家可以参考着使用。</p>
<h3 id="单个文件夹复制，指定目标目录">单个文件夹复制，指定目标目录</h3>
<p>一种方法就是一次复制一个文件夹，然后 COPY 的时候要指定到镜像中的具体目录，比如把上面的 dockerfile 改成这样：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> dist ./dist</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> node_modules ./node_modules</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json ./</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;yarn&quot;</span>, <span class="string">&quot;start:prod&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<h3 id="放到另一个文件夹中统一复制">放到另一个文件夹中统一复制</h3>
<p>上面那种写法很麻烦，还会增加 layer 数。这边想了一个变相的方法，不是很优雅。</p>
<p>就是将需要拷贝的文件夹都放到一个统一的文件夹中，然后在 dockerfile 中拷贝这个文件夹，文件夹下的目录结构就能够得到保持。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir dockerPackages &amp;&amp; mv dist node_modules dockerPackages</span><br></pre></td></tr></table></figure>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> dockerPackages package.json ./</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;yarn&quot;</span>, <span class="string">&quot;start:prod&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<h3 id="利用-dockerignore-文件">利用 .dockerignore 文件</h3>
<p>我们上面的写法其实就是像完成一件事，那就是仅把部分内容拷贝进镜像，然后忽略其他内容。这样，我们就可以利用 <code>.dockerignore</code> 文件，来更加优雅地实现。先忽略所有文件，然后将我们需要拷贝的文件排除。</p>
<p><code>.dockerignore</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">!dist</span><br><span class="line">!node_modules</span><br><span class="line">!package.json</span><br></pre></td></tr></table></figure>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . ./</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;yarn&quot;</span>, <span class="string">&quot;start:prod&quot;</span>]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Nexus OSS 为 Docker 镜像提供代理/缓存功能</title>
    <url>/posts/14/</url>
    <content><![CDATA[<p>今天记录一下利用 Nexus OSS 建立 Docker 镜像代理的过程。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>众所周知，在国内直接使用 docker 的官方镜像速度是很慢的，一般都需要使用镜像代理。不过，国内的代理一般采用定时同步的方式，镜像的版本更新不够及时，而且像 Github (<span class="exturl" data-url="aHR0cDovL2doY3IuaW8=">ghcr.io<i class="fa fa-external-link-alt"></i></span>)，Google (<span class="exturl" data-url="aHR0cDovL2djci5pbw==">gcr.io<i class="fa fa-external-link-alt"></i></span>)等第三方库一般都是没有代理的，这就需要自行搭建镜像代理。除此之外，一些公司需要私有仓库上传一些内部的镜像，也可以用 nexus 实现。</p>
<h2 id="搭建">搭建</h2>
<p>这边我准备使用 docker 容器的方式搭建 nexus，不容易出现问题。</p>
<h3 id="启动-Nexus-容器">启动 Nexus 容器</h3>
<p>这里选用 nexus3 的最新版本，当前为 3.34.1-01</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name nexus --restart=always \</span><br><span class="line">    -p 8081:8081 \</span><br><span class="line">    -v /data:/nexus-data \</span><br><span class="line">    -e INSTALL4J_ADD_VM_PARAMS=-Xms128m -Xmx256m -XX:MaxDirectMemorySize=256m \</span><br><span class="line">    sonatype/nexus3</span><br></pre></td></tr></table></figure>
<p>docker-compose 方式：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">INSTALL4J_ADD_VM_PARAMS:</span> <span class="string">-Xms128m</span> <span class="string">-Xmx256m</span> <span class="string">-XX:MaxDirectMemorySize=256m</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data:/nexus-data</span></span><br></pre></td></tr></table></figure>
<p>nexus 官方镜像的默认参数要求还挺高的。根据 nexus 的 dockerfile，可以看到可以通过环境变量<code>INSTALL4J_ADD_VM_PARAMS</code>覆盖默认参数。如果机器配置挺高的，可以不加上面的环境变量。</p>
<p>默认参数：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> INSTALL4J_ADD_VM_PARAMS=-Xms2703m -Xmx2703m -XX:MaxDirectMemorySize=<span class="number">2703</span>m -Djava.util.prefs.userRoot=/nexus-data/javaprefs</span><br></pre></td></tr></table></figure>
<p>当 8081 端口可以访问后，启动就完成了。</p>
<p>注意，给挂载的文件夹高点的权限，我这边直接给了 777，不然会报错，部分文件夹建不出来。</p>
<h3 id="配置-Nexus-OSS">配置 Nexus OSS</h3>
<p><img data-src="https://img.iszy.xyz/1633430503411.png?x-oss-process=style/big" alt=""></p>
<p>初始账号 admin，密码在挂载文件夹中的 <code>admin.password</code> 文件中。通过以下命令获取初始密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> nexus3 cat /nexus-data/admin.password</span><br></pre></td></tr></table></figure>
<h4 id="为-Docker-Hub-添加-Docker-Proxy-Repository">为 Docker Hub 添加 Docker Proxy Repository</h4>
<p>点击创建 Repository</p>
<p><img data-src="https://img.iszy.xyz/1633432311634.png" alt=""></p>
<p>可以看到支持非常多的内容，这里选择<code>docker(proxy)</code>。</p>
<p><img data-src="https://img.iszy.xyz/1633432371224.png" alt=""></p>
<p>关键内容:</p>
<ul>
<li><code>Proxy</code> - <code>Remote storage</code> 配置成 <code>https://registry-1.docker.io</code></li>
<li><code>Proxy</code> - <code>Docker Index</code> 选择 <code>Use Docker Hub</code>，能够保持最新</li>
</ul>
<p><img data-src="https://img.iszy.xyz/1633432604206.png?x-oss-process=style/big" alt=""></p>
<p>保存即可</p>
<h4 id="为-ghcr-io-添加-Docker-Proxy-Repository">为 <span class="exturl" data-url="aHR0cDovL2doY3IuaW8=">ghcr.io<i class="fa fa-external-link-alt"></i></span> 添加 Docker Proxy Repository</h4>
<p>这边再为 <span class="exturl" data-url="aHR0cDovL2doY3IuaW8=">ghcr.io<i class="fa fa-external-link-alt"></i></span> 创建一个代理，其他第三方仓库可以参考。</p>
<p><img data-src="https://img.iszy.xyz/1633432992527.png?x-oss-process=style/big" alt=""></p>
<h4 id="创建一个-Docker-Group-Repository">创建一个 Docker Group Repository</h4>
<p>现在创建一个 Docker Group Repository，这是我用 nexus 而不是官方的 docker registry 来创建代理的一个重要原因，可以把所有 docker 代理集合在一起共用一个地址。</p>
<p><img data-src="https://img.iszy.xyz/1633433470030.png" alt=""></p>
<p>这个 Repository 是我实际访问的仓库，所以要创建一个 http connector，端口自定，只要不是 8081。勾选 <code>Allow anonymous docker pull</code>，允许不登录执行 <code>docker pull</code>。</p>
<p><img data-src="https://img.iszy.xyz/1633433639787.png?x-oss-process=style/big" alt=""></p>
<h4 id="权限配置">权限配置</h4>
<p>这里要在<code>Security</code>-<code>Realms</code>里面启用<code>Docker Bearer Token Realm</code>，否则 docker 无法使用。</p>
<p><img data-src="https://img.iszy.xyz/1633434002040.png?x-oss-process=style/big" alt=""></p>
<h3 id="Nginx-代理">Nginx 代理</h3>
<p>也许你注意到，我刚刚配置的是 http connector，而且也没有给 nexus 配置 ssl。如果不想配置，可以直接使用刚刚的 <code>8082</code> 端口使用了。</p>
<p>这里是我的 nginx 配置，注意替换 server_name，和 nexus 的地址，大家参考着来。这样配置，可以让 docker 仓库 、其他仓库(maven)和 webui 共用地址。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> nexus.example.com ;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://$host$request_uri;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line">        <span class="attribute">server_name</span> nexus.example.com ;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 证书部分</span></span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/ssl//fullchain.cer;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/ssl/cert.key;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># TLS 握手优化</span></span><br><span class="line">        <span class="attribute">ssl_session_cache</span> builtin:<span class="number">1000</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">keepalive_timeout</span> <span class="number">75s</span>;</span><br><span class="line">        <span class="attribute">keepalive_requests</span> <span class="number">100</span>;</span><br><span class="line">        <span class="comment">#ssl_session_tickets off;</span></span><br><span class="line">        <span class="attribute">ssl_ecdh_curve</span> secp384r1;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># TLS 版本控制</span></span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-<span class="number">256</span>-GCM-SHA384:TLS13-AES-<span class="number">128</span>-GCM-SHA256:EECDH+CHACHA20:EECDH+AESGCM:EECDH+AES;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开启 1.3 0-RTT</span></span><br><span class="line">        <span class="attribute">ssl_early_data</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># SSL Stapling</span></span><br><span class="line">        <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">resolver</span> <span class="number">223.5.5.5</span> <span class="number">1.1.1.1</span> <span class="number">1.0.0.1</span> valid=<span class="number">300s</span>;</span><br><span class="line">        <span class="attribute">resolver_timeout</span> <span class="number">5s</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains; preload&quot;</span> always;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">120</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">proxy_buffering</span>    <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">tcp_nodelay</span>        <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://nexus:8081;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="string">&quot;https&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将 /v2/ 转到创建的docker http connector</span></span><br><span class="line">        <span class="attribute">location</span> /v2/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://nexus:8082;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="string">&quot;https&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<h3 id="直接使用">直接使用</h3>
<p>范例：</p>
<p>这样拉取一个官方 redis 镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nexus.example.com/redis</span><br></pre></td></tr></table></figure>
<p>这样拉取一个 Github(<span class="exturl" data-url="aHR0cDovL2doY3IuaW8=">ghcr.io<i class="fa fa-external-link-alt"></i></span>) 的 zvonimirsun/yourls 镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nexus.example.com/zvonimirsun/yourls</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li>docker pull 的时候不要加<code>https://</code></li>
<li>docker api 不支持 content-path，docker pull 直接使用根地址加上对应的包名，不要使用 repo 列表后面复制的 url。</li>
</ul>
<h3 id="配置到镜像">配置到镜像</h3>
<p>现在可以将地址配置到 docker 配置中了，nexus 本地找不到的仓库会依次去 group 中配置的 proxy repo 里面查找。</p>
<p><code>/etc/docker/daemon.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://nexus.example.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是 http 地址，则配置到 insecure-registries 里。</p>
<p>现在 docker pull 使用的就是 nexus 的代理地址了，可以省去前面的地址了。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 代码块可声明编程语言类型</title>
    <url>/posts/15/</url>
    <content><![CDATA[<p>Markdown 代码块可声明编程语言类型，实现代码高亮。有的书写规范要求必须声明，此处记录一下 Markdown 支持的所有编程语言。</p>
<span id="more"></span>
<h2 id="示例">示例</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">  &quot;test&quot;: 1</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>
<h2 id="清单">清单</h2>
<p>Markdown 编程语言声明可直接使用后缀名，比如 js 即可表示 JavaScript，也可使用完整的声明，清单如下：</p>
<blockquote>
<p>数据来源: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9saW5ndWlzdC9ibG9iL21hc3Rlci9saWIvbGluZ3Vpc3QvbGFuZ3VhZ2VzLnltbA==">linguist 项目<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th>语言名称</th>
<th>Markdown 语言声明</th>
<th>常见文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td>1C Enterprise</td>
<td>1c-enterprise</td>
<td>*.bsl</td>
</tr>
<tr>
<td>4D</td>
<td>4d</td>
<td>*.4dm</td>
</tr>
<tr>
<td>ABAP</td>
<td>abap</td>
<td>*.abap</td>
</tr>
<tr>
<td>ABNF</td>
<td>abnf</td>
<td>*.abnf</td>
</tr>
<tr>
<td>AGS Script</td>
<td>ags-script, ags</td>
<td>*.asc</td>
</tr>
<tr>
<td>AMPL</td>
<td>ampl</td>
<td>*.ampl</td>
</tr>
<tr>
<td>ANTLR</td>
<td>antlr</td>
<td>*.g4</td>
</tr>
<tr>
<td>API Blueprint</td>
<td>api-blueprint</td>
<td>*.apib</td>
</tr>
<tr>
<td>APL</td>
<td>apl</td>
<td>*.apl</td>
</tr>
<tr>
<td>ASN.1</td>
<td>asn.1</td>
<td>*.asn</td>
</tr>
<tr>
<td>ASP</td>
<td>asp, aspx, aspx-vb</td>
<td>*.asp</td>
</tr>
<tr>
<td>ATS</td>
<td>ats, ats2</td>
<td>*.dats</td>
</tr>
<tr>
<td>ActionScript</td>
<td>actionscript, actionscript3, as3</td>
<td>*.as</td>
</tr>
<tr>
<td>Ada</td>
<td>ada, ada95, ada2005</td>
<td>*.adb</td>
</tr>
<tr>
<td>Adobe Font Metrics</td>
<td>adobe-font-metrics, acfm, amfm</td>
<td>*.afm</td>
</tr>
<tr>
<td>Agda</td>
<td>agda</td>
<td>*.agda</td>
</tr>
<tr>
<td>Alloy</td>
<td>alloy</td>
<td>*.als</td>
</tr>
<tr>
<td>Alpine Abuild</td>
<td>alpine-abuild, abuild, apkbuild</td>
<td>APKBUILD</td>
</tr>
<tr>
<td>Altium Designer</td>
<td>altium-designer, altium</td>
<td>*.OutJob</td>
</tr>
<tr>
<td>AngelScript</td>
<td>angelscript</td>
<td>*.as</td>
</tr>
<tr>
<td>Ant Build System</td>
<td>ant-build-system</td>
<td>ant.xml</td>
</tr>
<tr>
<td>ApacheConf</td>
<td>apacheconf, aconf, apache</td>
<td>*.apacheconf, .htaccess</td>
</tr>
<tr>
<td>Apex</td>
<td>apex</td>
<td>*.cls</td>
</tr>
<tr>
<td>Apollo Guidance Computer</td>
<td>apollo-guidance-computer</td>
<td>*.agc</td>
</tr>
<tr>
<td>AppleScript</td>
<td>applescript, osascript</td>
<td>*.applescript</td>
</tr>
<tr>
<td>Arc</td>
<td>arc</td>
<td>*.arc</td>
</tr>
<tr>
<td>AsciiDoc</td>
<td>asciidoc</td>
<td>*.asciidoc</td>
</tr>
<tr>
<td>AspectJ</td>
<td>aspectj</td>
<td>*.aj</td>
</tr>
<tr>
<td>Assembly</td>
<td>assembly, asm, nasm</td>
<td>*.asm</td>
</tr>
<tr>
<td>Asymptote</td>
<td>asymptote</td>
<td>*.asy</td>
</tr>
<tr>
<td>Augeas</td>
<td>augeas</td>
<td>*.aug</td>
</tr>
<tr>
<td>AutoHotkey</td>
<td>autohotkey, ahk</td>
<td>*.ahk</td>
</tr>
<tr>
<td>AutoIt</td>
<td>autoit, au3, AutoIt3, AutoItScript</td>
<td>*.au3</td>
</tr>
<tr>
<td>Awk</td>
<td>awk</td>
<td>*.awk</td>
</tr>
<tr>
<td>Ballerina</td>
<td>ballerina</td>
<td>*.bal</td>
</tr>
<tr>
<td>Batchfile</td>
<td>batchfile, bat, batch, dosbatch, winbatch</td>
<td>*.bat</td>
</tr>
<tr>
<td>Befunge</td>
<td>befunge</td>
<td>*.befunge</td>
</tr>
<tr>
<td>BibTeX</td>
<td>bibtex</td>
<td>*.bib</td>
</tr>
<tr>
<td>Bison</td>
<td>bison</td>
<td>*.bison</td>
</tr>
<tr>
<td>BitBake</td>
<td>bitbake</td>
<td>*.bb</td>
</tr>
<tr>
<td>Blade</td>
<td>blade</td>
<td>*.blade</td>
</tr>
<tr>
<td>BlitzBasic</td>
<td>blitzbasic, b3d, blitz3d, blitzplus, bplus</td>
<td>*.bb</td>
</tr>
<tr>
<td>BlitzMax</td>
<td>blitzmax, bmax</td>
<td>*.bmx</td>
</tr>
<tr>
<td>Bluespec</td>
<td>bluespec</td>
<td>*.bsv</td>
</tr>
<tr>
<td>Boo</td>
<td>boo</td>
<td>*.boo</td>
</tr>
<tr>
<td>Brainfuck</td>
<td>brainfuck</td>
<td>*.b</td>
</tr>
<tr>
<td>Brightscript</td>
<td>brightscript</td>
<td>*.brs</td>
</tr>
<tr>
<td>C</td>
<td>c</td>
<td>*.c</td>
</tr>
<tr>
<td>C#</td>
<td>c#, csharp</td>
<td>*.cs</td>
</tr>
<tr>
<td>C++</td>
<td>c++, cpp</td>
<td>*.cpp</td>
</tr>
<tr>
<td>C-ObjDump</td>
<td>c-objdump</td>
<td>*.c-objdump</td>
</tr>
<tr>
<td>C2hs Haskell</td>
<td>c2hs-haskell, c2hs</td>
<td>*.chs</td>
</tr>
<tr>
<td>CLIPS</td>
<td>clips</td>
<td>*.clp</td>
</tr>
<tr>
<td>CMake</td>
<td>cmake</td>
<td>*.cmake, CMakeLists.txt</td>
</tr>
<tr>
<td>COBOL</td>
<td>cobol</td>
<td>*.cob</td>
</tr>
<tr>
<td>COLLADA</td>
<td>collada</td>
<td>*.dae</td>
</tr>
<tr>
<td>CSON</td>
<td>cson</td>
<td>*.cson</td>
</tr>
<tr>
<td>CSS</td>
<td>css</td>
<td>*.css</td>
</tr>
<tr>
<td>CSV</td>
<td>csv</td>
<td>*.csv</td>
</tr>
<tr>
<td>CWeb</td>
<td>cweb</td>
<td>*.w</td>
</tr>
<tr>
<td>Cabal Config</td>
<td>cabal-config, Cabal</td>
<td>*.cabal, cabal.config</td>
</tr>
<tr>
<td>Cap’n Proto</td>
<td>cap’n-proto</td>
<td>*.capnp</td>
</tr>
<tr>
<td>CartoCSS</td>
<td>cartocss, Carto</td>
<td>*.mss</td>
</tr>
<tr>
<td>Ceylon</td>
<td>ceylon</td>
<td>*.ceylon</td>
</tr>
<tr>
<td>Chapel</td>
<td>chapel, chpl</td>
<td>*.chpl</td>
</tr>
<tr>
<td>Charity</td>
<td>charity</td>
<td>*.ch</td>
</tr>
<tr>
<td>ChucK</td>
<td>chuck</td>
<td>*.ck</td>
</tr>
<tr>
<td>Cirru</td>
<td>cirru</td>
<td>*.cirru</td>
</tr>
<tr>
<td>Clarion</td>
<td>clarion</td>
<td>*.clw</td>
</tr>
<tr>
<td>Clean</td>
<td>clean</td>
<td>*.icl</td>
</tr>
<tr>
<td>Click</td>
<td>click</td>
<td>*.click</td>
</tr>
<tr>
<td>Clojure</td>
<td>clojure</td>
<td>*.clj, riemann.config</td>
</tr>
<tr>
<td>Closure Templates</td>
<td>closure-templates, soy</td>
<td>*.soy</td>
</tr>
<tr>
<td>Cloud Firestore Security Rules</td>
<td>cloud-firestore-security-rules</td>
<td>firestore.rules</td>
</tr>
<tr>
<td>CoNLL-U</td>
<td>conll-u, CoNLL, CoNLL-X</td>
<td>*.conllu</td>
</tr>
<tr>
<td>CodeQL</td>
<td>codeql, ql</td>
<td>*.ql</td>
</tr>
<tr>
<td>CoffeeScript</td>
<td>coffeescript, coffee, coffee-script</td>
<td>*.coffee, Cakefile</td>
</tr>
<tr>
<td>ColdFusion</td>
<td>coldfusion, cfm, cfml</td>
<td>*.cfm</td>
</tr>
<tr>
<td>ColdFusion CFC</td>
<td>coldfusion-cfc, cfc</td>
<td>*.cfc</td>
</tr>
<tr>
<td>Common Lisp</td>
<td>common-lisp, lisp</td>
<td>*.lisp</td>
</tr>
<tr>
<td>Common Workflow Language</td>
<td>common-workflow-language, cwl</td>
<td>*.cwl</td>
</tr>
<tr>
<td>Component Pascal</td>
<td>component-pascal, delphi, objectpascal</td>
<td>*.cp</td>
</tr>
<tr>
<td>Cool</td>
<td>cool</td>
<td>*.cl</td>
</tr>
<tr>
<td>Coq</td>
<td>coq</td>
<td>*.coq</td>
</tr>
<tr>
<td>Cpp-ObjDump</td>
<td>cpp-objdump, c+±objdump</td>
<td>*.cppobjdump</td>
</tr>
<tr>
<td>Creole</td>
<td>creole</td>
<td>*.creole</td>
</tr>
<tr>
<td>Crystal</td>
<td>crystal</td>
<td>*.cr</td>
</tr>
<tr>
<td>Csound</td>
<td>csound, csound-orc</td>
<td>*.orc</td>
</tr>
<tr>
<td>Csound Document</td>
<td>csound-document, csound-csd</td>
<td>*.csd</td>
</tr>
<tr>
<td>Csound Score</td>
<td>csound-score, csound-sco</td>
<td>*.sco</td>
</tr>
<tr>
<td>Cuda</td>
<td>cuda</td>
<td>*.cu</td>
</tr>
<tr>
<td>Cycript</td>
<td>cycript</td>
<td>*.cy</td>
</tr>
<tr>
<td>Cython</td>
<td>cython, pyrex</td>
<td>*.pyx</td>
</tr>
<tr>
<td>D</td>
<td>d</td>
<td>*.d</td>
</tr>
<tr>
<td>D-ObjDump</td>
<td>d-objdump</td>
<td>*.d-objdump</td>
</tr>
<tr>
<td>DIGITAL Command Language</td>
<td>digital-command-language, dcl</td>
<td>*.com</td>
</tr>
<tr>
<td>DM</td>
<td>dm, byond</td>
<td>*.dm</td>
</tr>
<tr>
<td>DNS Zone</td>
<td>dns-zone</td>
<td>*.zone</td>
</tr>
<tr>
<td>DTrace</td>
<td>dtrace, dtrace-script</td>
<td>*.d</td>
</tr>
<tr>
<td>Dafny</td>
<td>dafny</td>
<td>*.dfy</td>
</tr>
<tr>
<td>Darcs Patch</td>
<td>darcs-patch, dpatch</td>
<td>*.darcspatch</td>
</tr>
<tr>
<td>Dart</td>
<td>dart</td>
<td>*.dart</td>
</tr>
<tr>
<td>DataWeave</td>
<td>dataweave</td>
<td>*.dwl</td>
</tr>
<tr>
<td>Dhall</td>
<td>dhall</td>
<td>*.dhall</td>
</tr>
<tr>
<td>Diff</td>
<td>diff, udiff</td>
<td>*.diff</td>
</tr>
<tr>
<td>DirectX 3D File</td>
<td>directx-3d-file</td>
<td>*.x</td>
</tr>
<tr>
<td>Dockerfile</td>
<td>dockerfile</td>
<td>*.dockerfile, Dockerfile</td>
</tr>
<tr>
<td>Dogescript</td>
<td>dogescript</td>
<td>*.djs</td>
</tr>
<tr>
<td>Dylan</td>
<td>dylan</td>
<td>*.dylan</td>
</tr>
<tr>
<td>E</td>
<td>e</td>
<td>*.E</td>
</tr>
<tr>
<td>EBNF</td>
<td>ebnf</td>
<td>*.ebnf</td>
</tr>
<tr>
<td>ECL</td>
<td>ecl</td>
<td>*.ecl</td>
</tr>
<tr>
<td>ECLiPSe</td>
<td>eclipse</td>
<td>*.ecl</td>
</tr>
<tr>
<td>EJS</td>
<td>ejs</td>
<td>*.ejs</td>
</tr>
<tr>
<td>EML</td>
<td>eml</td>
<td>*.eml</td>
</tr>
<tr>
<td>EQ</td>
<td>eq</td>
<td>*.eq</td>
</tr>
<tr>
<td>Eagle</td>
<td>eagle</td>
<td>*.sch</td>
</tr>
<tr>
<td>Easybuild</td>
<td>easybuild</td>
<td>*.eb</td>
</tr>
<tr>
<td>Ecere Projects</td>
<td>ecere-projects</td>
<td>*.epj</td>
</tr>
<tr>
<td>EditorConfig</td>
<td>editorconfig, editor-config</td>
<td>.editorconfig</td>
</tr>
<tr>
<td>Edje Data Collection</td>
<td>edje-data-collection</td>
<td>*.edc</td>
</tr>
<tr>
<td>Eiffel</td>
<td>eiffel</td>
<td>*.e</td>
</tr>
<tr>
<td>Elixir</td>
<td>elixir</td>
<td>*.ex, mix.lock</td>
</tr>
<tr>
<td>Elm</td>
<td>elm</td>
<td>*.elm</td>
</tr>
<tr>
<td>Emacs Lisp</td>
<td>emacs-lisp, elisp, emacs</td>
<td>*.el, .abbrev_defs</td>
</tr>
<tr>
<td>EmberScript</td>
<td>emberscript</td>
<td>*.em</td>
</tr>
<tr>
<td>Erlang</td>
<td>erlang</td>
<td>*.erl, Emakefile</td>
</tr>
<tr>
<td>F#</td>
<td>f#, fsharp</td>
<td>*.fs</td>
</tr>
<tr>
<td>F*</td>
<td>f*, fstar</td>
<td>*.fst</td>
</tr>
<tr>
<td>FIGlet Font</td>
<td>figlet-font, FIGfont</td>
<td>*.flf</td>
</tr>
<tr>
<td>FLUX</td>
<td>flux</td>
<td>*.fx</td>
</tr>
<tr>
<td>Factor</td>
<td>factor</td>
<td>*.factor, .factor-boot-rc</td>
</tr>
<tr>
<td>Fancy</td>
<td>fancy</td>
<td>*.fy, Fakefile</td>
</tr>
<tr>
<td>Fantom</td>
<td>fantom</td>
<td>*.fan</td>
</tr>
<tr>
<td>Faust</td>
<td>faust</td>
<td>*.dsp</td>
</tr>
<tr>
<td>Filebench WML</td>
<td>filebench-wml</td>
<td>*.f</td>
</tr>
<tr>
<td>Filterscript</td>
<td>filterscript</td>
<td>*.fs</td>
</tr>
<tr>
<td>Formatted</td>
<td>formatted</td>
<td>*.for</td>
</tr>
<tr>
<td>Forth</td>
<td>forth</td>
<td>*.fth</td>
</tr>
<tr>
<td>Fortran</td>
<td>fortran</td>
<td>*.f</td>
</tr>
<tr>
<td>Fortran Free Form</td>
<td>fortran-free-form</td>
<td>*.f90</td>
</tr>
<tr>
<td>FreeMarker</td>
<td>freemarker, ftl</td>
<td>*.ftl</td>
</tr>
<tr>
<td>Frege</td>
<td>frege</td>
<td>*.fr</td>
</tr>
<tr>
<td>Futhark</td>
<td>futhark</td>
<td>*.fut</td>
</tr>
<tr>
<td>G-code</td>
<td>g-code</td>
<td>*.g</td>
</tr>
<tr>
<td>GAML</td>
<td>gaml</td>
<td>*.gaml</td>
</tr>
<tr>
<td>GAMS</td>
<td>gams</td>
<td>*.gms</td>
</tr>
<tr>
<td>GAP</td>
<td>gap</td>
<td>*.g</td>
</tr>
<tr>
<td>GCC Machine Description</td>
<td>gcc-machine-description</td>
<td>*.md</td>
</tr>
<tr>
<td>GDB</td>
<td>gdb</td>
<td>*.gdb</td>
</tr>
<tr>
<td>GDScript</td>
<td>gdscript</td>
<td>*.gd</td>
</tr>
<tr>
<td>GEDCOM</td>
<td>gedcom</td>
<td>*.ged</td>
</tr>
<tr>
<td>GLSL</td>
<td>glsl</td>
<td>*.glsl</td>
</tr>
<tr>
<td>GN</td>
<td>gn</td>
<td>*.gn, .gn</td>
</tr>
<tr>
<td>Game Maker Language</td>
<td>game-maker-language</td>
<td>*.gml</td>
</tr>
<tr>
<td>Genie</td>
<td>genie</td>
<td>*.gs</td>
</tr>
<tr>
<td>Genshi</td>
<td>genshi, xml+genshi, xml+kid</td>
<td>*.kid</td>
</tr>
<tr>
<td>Gentoo Ebuild</td>
<td>gentoo-ebuild</td>
<td>*.ebuild</td>
</tr>
<tr>
<td>Gentoo Eclass</td>
<td>gentoo-eclass</td>
<td>*.eclass</td>
</tr>
<tr>
<td>Gerber Image</td>
<td>gerber-image, rs-274x</td>
<td>*.gbr</td>
</tr>
<tr>
<td>Gettext Catalog</td>
<td>gettext-catalog, pot</td>
<td>*.po</td>
</tr>
<tr>
<td>Gherkin</td>
<td>gherkin, cucumber</td>
<td>*.feature</td>
</tr>
<tr>
<td>Git Attributes</td>
<td>git-attributes, gitattributes</td>
<td>.gitattributes</td>
</tr>
<tr>
<td>Git Config</td>
<td>git-config, gitconfig, gitmodules</td>
<td>*.gitconfig, .gitconfig</td>
</tr>
<tr>
<td>Glyph</td>
<td>glyph</td>
<td>*.glf</td>
</tr>
<tr>
<td>Glyph Bitmap Distribution Format</td>
<td>glyph-bitmap-distribution-format</td>
<td>*.bdf</td>
</tr>
<tr>
<td>Gnuplot</td>
<td>gnuplot</td>
<td>*.gp</td>
</tr>
<tr>
<td>Go</td>
<td>go, golang</td>
<td>*.go</td>
</tr>
<tr>
<td>Golo</td>
<td>golo</td>
<td>*.golo</td>
</tr>
<tr>
<td>Gosu</td>
<td>gosu</td>
<td>*.gs</td>
</tr>
<tr>
<td>Grace</td>
<td>grace</td>
<td>*.grace</td>
</tr>
<tr>
<td>Gradle</td>
<td>gradle</td>
<td>*.gradle</td>
</tr>
<tr>
<td>Grammatical Framework</td>
<td>grammatical-framework, gf</td>
<td>*.gf</td>
</tr>
<tr>
<td>Graph Modeling Language</td>
<td>graph-modeling-language</td>
<td>*.gml</td>
</tr>
<tr>
<td>GraphQL</td>
<td>graphql</td>
<td>*.graphql</td>
</tr>
<tr>
<td>Graphviz (DOT)</td>
<td>dot</td>
<td>*.dot</td>
</tr>
<tr>
<td>Groovy</td>
<td>groovy</td>
<td>*.groovy, Jenkinsfile</td>
</tr>
<tr>
<td>Groovy Server Pages</td>
<td>groovy-server-pages, gsp</td>
<td>*.gsp</td>
</tr>
<tr>
<td>HAProxy</td>
<td>haproxy</td>
<td>*.cfg, haproxy.cfg</td>
</tr>
<tr>
<td>HCL</td>
<td>hcl, terraform</td>
<td>*.hcl</td>
</tr>
<tr>
<td>HLSL</td>
<td>hlsl</td>
<td>*.hlsl</td>
</tr>
<tr>
<td>HTML</td>
<td>html, xhtml</td>
<td>*.html</td>
</tr>
<tr>
<td>HTML+Django</td>
<td>html+django, django, html+jinja, htmldjango</td>
<td>*.jinja</td>
</tr>
<tr>
<td>HTML+ECR</td>
<td>html+ecr, ecr</td>
<td>*.ecr</td>
</tr>
<tr>
<td>HTML+EEX</td>
<td>html+eex, eex</td>
<td>*.eex</td>
</tr>
<tr>
<td>HTML+ERB</td>
<td>html+erb, erb</td>
<td>*.erb</td>
</tr>
<tr>
<td>HTML+PHP</td>
<td>html+php</td>
<td>*.phtml</td>
</tr>
<tr>
<td>HTML+Razor</td>
<td>html+razor, razor</td>
<td>*.cshtml</td>
</tr>
<tr>
<td>HTTP</td>
<td>http</td>
<td>*.http</td>
</tr>
<tr>
<td>HXML</td>
<td>hxml</td>
<td>*.hxml</td>
</tr>
<tr>
<td>Hack</td>
<td>hack</td>
<td>*.hack</td>
</tr>
<tr>
<td>Haml</td>
<td>haml</td>
<td>*.haml</td>
</tr>
<tr>
<td>Handlebars</td>
<td>handlebars, hbs, htmlbars</td>
<td>*.handlebars</td>
</tr>
<tr>
<td>Harbour</td>
<td>harbour</td>
<td>*.hb</td>
</tr>
<tr>
<td>Haskell</td>
<td>haskell</td>
<td>*.hs</td>
</tr>
<tr>
<td>Haxe</td>
<td>haxe</td>
<td>*.hx</td>
</tr>
<tr>
<td>HiveQL</td>
<td>hiveql</td>
<td>*.q</td>
</tr>
<tr>
<td>HolyC</td>
<td>holyc</td>
<td>*.hc</td>
</tr>
<tr>
<td>Hy</td>
<td>hy, hylang</td>
<td>*.hy</td>
</tr>
<tr>
<td>HyPhy</td>
<td>hyphy</td>
<td>*.bf</td>
</tr>
<tr>
<td>IDL</td>
<td>idl</td>
<td>*.pro</td>
</tr>
<tr>
<td>IGOR Pro</td>
<td>igor-pro, igor, igorpro</td>
<td>*.ipf</td>
</tr>
<tr>
<td>INI</td>
<td>ini, dosini</td>
<td>*.ini, buildozer.spec</td>
</tr>
<tr>
<td>IRC log</td>
<td>irc-log, irc</td>
<td>*.irclog</td>
</tr>
<tr>
<td>Idris</td>
<td>idris</td>
<td>*.idr</td>
</tr>
<tr>
<td>Ignore List</td>
<td>ignore-list, ignore, gitignore, git-ignore</td>
<td>*.gitignore, .atomignore</td>
</tr>
<tr>
<td>Inform 7</td>
<td>inform-7, i7, inform7</td>
<td>*.ni</td>
</tr>
<tr>
<td>Inno Setup</td>
<td>inno-setup</td>
<td>*.iss</td>
</tr>
<tr>
<td>Io</td>
<td>io</td>
<td>*.io</td>
</tr>
<tr>
<td>Ioke</td>
<td>ioke</td>
<td>*.ik</td>
</tr>
<tr>
<td>Isabelle</td>
<td>isabelle</td>
<td>*.thy</td>
</tr>
<tr>
<td>Isabelle ROOT</td>
<td>isabelle-root</td>
<td>ROOT</td>
</tr>
<tr>
<td>J</td>
<td>j</td>
<td>*.ijs</td>
</tr>
<tr>
<td>JFlex</td>
<td>jflex</td>
<td>*.flex</td>
</tr>
<tr>
<td>JSON</td>
<td>json</td>
<td>*.json, .arcconfig</td>
</tr>
<tr>
<td>JSON with Comments</td>
<td>json-with-comments, jsonc</td>
<td>*.jsonc, .babelrc</td>
</tr>
<tr>
<td>JSON5</td>
<td>json5</td>
<td>*.json5</td>
</tr>
<tr>
<td>JSONLD</td>
<td>jsonld</td>
<td>*.jsonld</td>
</tr>
<tr>
<td>JSONiq</td>
<td>jsoniq</td>
<td>*.jq</td>
</tr>
<tr>
<td>JSX</td>
<td>jsx</td>
<td>*.jsx</td>
</tr>
<tr>
<td>Jasmin</td>
<td>jasmin</td>
<td>*.j</td>
</tr>
<tr>
<td>Java</td>
<td>java</td>
<td>*.java</td>
</tr>
<tr>
<td>Java Properties</td>
<td>java-properties</td>
<td>*.properties</td>
</tr>
<tr>
<td>Java Server Pages</td>
<td>java-server-pages, jsp</td>
<td>*.jsp</td>
</tr>
<tr>
<td>JavaScript</td>
<td>javascript, js, node</td>
<td>*.js, Jakefile</td>
</tr>
<tr>
<td>JavaScript+ERB</td>
<td>javascript+erb</td>
<td>*.js.erb</td>
</tr>
<tr>
<td>Jison</td>
<td>jison</td>
<td>*.jison</td>
</tr>
<tr>
<td>Jison Lex</td>
<td>jison-lex</td>
<td>*.jisonlex</td>
</tr>
<tr>
<td>Jolie</td>
<td>jolie</td>
<td>*.ol</td>
</tr>
<tr>
<td>Jsonnet</td>
<td>jsonnet</td>
<td>*.jsonnet</td>
</tr>
<tr>
<td>Julia</td>
<td>julia</td>
<td>*.jl</td>
</tr>
<tr>
<td>Jupyter Notebook</td>
<td>jupyter-notebook</td>
<td>*.ipynb, Notebook</td>
</tr>
<tr>
<td>KRL</td>
<td>krl</td>
<td>*.krl</td>
</tr>
<tr>
<td>KiCad Layout</td>
<td>kicad-layout, pcbnew</td>
<td>*.kicad_pcb, fp-lib-table</td>
</tr>
<tr>
<td>KiCad Legacy Layout</td>
<td>kicad-legacy-layout</td>
<td>*.brd</td>
</tr>
<tr>
<td>KiCad Schematic</td>
<td>kicad-schematic</td>
<td>*.sch</td>
</tr>
<tr>
<td>Kit</td>
<td>kit</td>
<td>*.kit</td>
</tr>
<tr>
<td>Kotlin</td>
<td>kotlin</td>
<td>*.kt</td>
</tr>
<tr>
<td>LFE</td>
<td>lfe</td>
<td>*.lfe</td>
</tr>
<tr>
<td>LLVM</td>
<td>llvm</td>
<td>*.ll</td>
</tr>
<tr>
<td>LOLCODE</td>
<td>lolcode</td>
<td>*.lol</td>
</tr>
<tr>
<td>LSL</td>
<td>lsl</td>
<td>*.lsl</td>
</tr>
<tr>
<td>LTspice Symbol</td>
<td>ltspice-symbol</td>
<td>*.asy</td>
</tr>
<tr>
<td>LabVIEW</td>
<td>labview</td>
<td>*.lvproj</td>
</tr>
<tr>
<td>Lasso</td>
<td>lasso, lassoscript</td>
<td>*.lasso</td>
</tr>
<tr>
<td>Latte</td>
<td>latte</td>
<td>*.latte</td>
</tr>
<tr>
<td>Lean</td>
<td>lean</td>
<td>*.lean</td>
</tr>
<tr>
<td>Less</td>
<td>less</td>
<td>*.less</td>
</tr>
<tr>
<td>Lex</td>
<td>lex, flex</td>
<td>*.l</td>
</tr>
<tr>
<td>LilyPond</td>
<td>lilypond</td>
<td>*.ly</td>
</tr>
<tr>
<td>Limbo</td>
<td>limbo</td>
<td>*.b</td>
</tr>
<tr>
<td>Linker Script</td>
<td>linker-script</td>
<td>*.ld, ld.script</td>
</tr>
<tr>
<td>Linux Kernel Module</td>
<td>linux-kernel-module</td>
<td>*.mod</td>
</tr>
<tr>
<td>Liquid</td>
<td>liquid</td>
<td>*.liquid</td>
</tr>
<tr>
<td>Literate Agda</td>
<td>literate-agda</td>
<td>*.lagda</td>
</tr>
<tr>
<td>Literate CoffeeScript</td>
<td>literate-coffeescript, litcoffee</td>
<td>*.litcoffee</td>
</tr>
<tr>
<td>Literate Haskell</td>
<td>literate-haskell, lhaskell, lhs</td>
<td>*.lhs</td>
</tr>
<tr>
<td>LiveScript</td>
<td>livescript, live-script, ls</td>
<td>*.ls, Slakefile</td>
</tr>
<tr>
<td>Logos</td>
<td>logos</td>
<td>*.xm</td>
</tr>
<tr>
<td>Logtalk</td>
<td>logtalk</td>
<td>*.lgt</td>
</tr>
<tr>
<td>LookML</td>
<td>lookml</td>
<td>*.lookml</td>
</tr>
<tr>
<td>LoomScript</td>
<td>loomscript</td>
<td>*.ls</td>
</tr>
<tr>
<td>Lua</td>
<td>lua</td>
<td>*.lua, .luacheckrc</td>
</tr>
<tr>
<td>M</td>
<td>m, mumps</td>
<td>*.mumps</td>
</tr>
<tr>
<td>M4</td>
<td>m4</td>
<td>*.m4</td>
</tr>
<tr>
<td>M4Sugar</td>
<td>m4sugar, autoconf</td>
<td>*.m4, <span class="exturl" data-url="aHR0cDovL2NvbmZpZ3VyZS5hYw==">configure.ac<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td>MATLAB</td>
<td>matlab, octave</td>
<td>*.matlab</td>
</tr>
<tr>
<td>MAXScript</td>
<td>maxscript</td>
<td>*.ms</td>
</tr>
<tr>
<td>MLIR</td>
<td>mlir</td>
<td>*.mlir</td>
</tr>
<tr>
<td>MQL4</td>
<td>mql4</td>
<td>*.mq4</td>
</tr>
<tr>
<td>MQL5</td>
<td>mql5</td>
<td>*.mq5</td>
</tr>
<tr>
<td>MTML</td>
<td>mtml</td>
<td>*.mtml</td>
</tr>
<tr>
<td>MUF</td>
<td>muf</td>
<td>*.muf</td>
</tr>
<tr>
<td>Macaulay2</td>
<td>macaulay2, m2</td>
<td>*.m2</td>
</tr>
<tr>
<td>Makefile</td>
<td>makefile, bsdmake, make, mf</td>
<td>*.mak, BSDmakefile</td>
</tr>
<tr>
<td>Mako</td>
<td>mako</td>
<td>*.mako</td>
</tr>
<tr>
<td>Markdown</td>
<td>markdown, pandoc</td>
<td>*.md, <span class="exturl" data-url="aHR0cDovL2NvbnRlbnRzLmxy">contents.lr<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td>Marko</td>
<td>marko, markojs</td>
<td>*.marko</td>
</tr>
<tr>
<td>Mask</td>
<td>mask</td>
<td>*.mask</td>
</tr>
<tr>
<td>Mathematica</td>
<td>mathematica, mma</td>
<td>*.mathematica</td>
</tr>
<tr>
<td>Maven POM</td>
<td>maven-pom</td>
<td>pom.xml</td>
</tr>
<tr>
<td>Max</td>
<td>max, max/msp, maxmsp</td>
<td>*.maxpat</td>
</tr>
<tr>
<td>MediaWiki</td>
<td>mediawiki</td>
<td>*.mediawiki</td>
</tr>
<tr>
<td>Mercury</td>
<td>mercury</td>
<td>*.m</td>
</tr>
<tr>
<td>Meson</td>
<td>meson</td>
<td>meson.build</td>
</tr>
<tr>
<td>Metal</td>
<td>metal</td>
<td>*.metal</td>
</tr>
<tr>
<td>Microsoft Developer Studio Project</td>
<td>microsoft-developer-studio-project</td>
<td>*.dsp</td>
</tr>
<tr>
<td>MiniD</td>
<td>minid</td>
<td>*.minid</td>
</tr>
<tr>
<td>Mirah</td>
<td>mirah</td>
<td>*.druby</td>
</tr>
<tr>
<td>Modelica</td>
<td>modelica</td>
<td>*.mo</td>
</tr>
<tr>
<td>Modula-2</td>
<td>modula-2</td>
<td>*.mod</td>
</tr>
<tr>
<td>Modula-3</td>
<td>modula-3</td>
<td>*.i3</td>
</tr>
<tr>
<td>Module Management System</td>
<td>module-management-system</td>
<td>*.mms, descrip.mmk</td>
</tr>
<tr>
<td>Monkey</td>
<td>monkey</td>
<td>*.monkey</td>
</tr>
<tr>
<td>Moocode</td>
<td>moocode</td>
<td>*.moo</td>
</tr>
<tr>
<td>MoonScript</td>
<td>moonscript</td>
<td>*.moon</td>
</tr>
<tr>
<td>Motorola 68K Assembly</td>
<td>motorola-68k-assembly, m68k</td>
<td>*.asm</td>
</tr>
<tr>
<td>Muse</td>
<td>muse, amusewiki</td>
<td>*.muse</td>
</tr>
<tr>
<td>Myghty</td>
<td>myghty</td>
<td>*.myt</td>
</tr>
<tr>
<td>NASL</td>
<td>nasl</td>
<td>*.nasl</td>
</tr>
<tr>
<td>NCL</td>
<td>ncl</td>
<td>*.ncl</td>
</tr>
<tr>
<td>NEON</td>
<td>neon, ne-on</td>
<td>*.neon</td>
</tr>
<tr>
<td>NL</td>
<td>nl</td>
<td>*.nl</td>
</tr>
<tr>
<td>NPM Config</td>
<td>npm-config, npmrc</td>
<td>.npmrc</td>
</tr>
<tr>
<td>NSIS</td>
<td>nsis</td>
<td>*.nsi</td>
</tr>
<tr>
<td>Nearley</td>
<td>nearley</td>
<td>*.ne</td>
</tr>
<tr>
<td>Nemerle</td>
<td>nemerle</td>
<td>*.n</td>
</tr>
<tr>
<td>NetLinx</td>
<td>netlinx</td>
<td>*.axs</td>
</tr>
<tr>
<td>NetLinx+ERB</td>
<td>netlinx+erb</td>
<td>*.axs.erb</td>
</tr>
<tr>
<td>NetLogo</td>
<td>netlogo</td>
<td>*.nlogo</td>
</tr>
<tr>
<td>NewLisp</td>
<td>newlisp</td>
<td>*.nl</td>
</tr>
<tr>
<td>Nextflow</td>
<td>nextflow</td>
<td>*.nf, nextflow.config</td>
</tr>
<tr>
<td>Nginx</td>
<td>nginx</td>
<td>*.nginxconf, nginx.conf</td>
</tr>
<tr>
<td>Nim</td>
<td>nim</td>
<td>*.nim, nim.cfg</td>
</tr>
<tr>
<td>Ninja</td>
<td>ninja</td>
<td>*.ninja</td>
</tr>
<tr>
<td>Nit</td>
<td>nit</td>
<td>*.nit</td>
</tr>
<tr>
<td>Nix</td>
<td>nix, nixos</td>
<td>*.nix</td>
</tr>
<tr>
<td>Nu</td>
<td>nu, nush</td>
<td>*.nu, Nukefile</td>
</tr>
<tr>
<td>NumPy</td>
<td>numpy</td>
<td>*.numpy</td>
</tr>
<tr>
<td>OCaml</td>
<td>ocaml</td>
<td>*.ml</td>
</tr>
<tr>
<td>ObjDump</td>
<td>objdump</td>
<td>*.objdump</td>
</tr>
<tr>
<td>Object Data Instance Notation</td>
<td>object-data-instance-notation</td>
<td>*.odin</td>
</tr>
<tr>
<td>ObjectScript</td>
<td>objectscript</td>
<td>*.cls</td>
</tr>
<tr>
<td>Objective-C</td>
<td>objective-c, obj-c, objc, objectivec</td>
<td>*.m</td>
</tr>
<tr>
<td>Objective-C++</td>
<td>objective-c++, obj-c++, objc++, objectivec++</td>
<td>*.mm</td>
</tr>
<tr>
<td>Objective-J</td>
<td>objective-j, obj-j, objectivej, objj</td>
<td>*.j</td>
</tr>
<tr>
<td>Odin</td>
<td>odin, odinlang, odin-lang</td>
<td>*.odin</td>
</tr>
<tr>
<td>Omgrofl</td>
<td>omgrofl</td>
<td>*.omgrofl</td>
</tr>
<tr>
<td>Opa</td>
<td>opa</td>
<td>*.opa</td>
</tr>
<tr>
<td>Opal</td>
<td>opal</td>
<td>*.opal</td>
</tr>
<tr>
<td>Open Policy Agent</td>
<td>open-policy-agent</td>
<td>*.rego</td>
</tr>
<tr>
<td>OpenCL</td>
<td>opencl</td>
<td>*.cl</td>
</tr>
<tr>
<td>OpenEdge ABL</td>
<td>openedge-abl, progress, openedge, abl</td>
<td>*.p</td>
</tr>
<tr>
<td>OpenQASM</td>
<td>openqasm</td>
<td>*.qasm</td>
</tr>
<tr>
<td>OpenRC runscript</td>
<td>openrc-runscript, openrc</td>
<td></td>
</tr>
<tr>
<td>OpenSCAD</td>
<td>openscad</td>
<td>*.scad</td>
</tr>
<tr>
<td>OpenStep Property List</td>
<td>openstep-property-list</td>
<td>*.plist</td>
</tr>
<tr>
<td>OpenType Feature File</td>
<td>opentype-feature-file, AFDKO</td>
<td>*.fea</td>
</tr>
<tr>
<td>Org</td>
<td>org</td>
<td>*.org</td>
</tr>
<tr>
<td>Ox</td>
<td>ox</td>
<td>*.ox</td>
</tr>
<tr>
<td>Oxygene</td>
<td>oxygene</td>
<td>*.oxygene</td>
</tr>
<tr>
<td>Oz</td>
<td>oz</td>
<td>*.oz</td>
</tr>
<tr>
<td>P4</td>
<td>p4</td>
<td>*.p4</td>
</tr>
<tr>
<td>PHP</td>
<td>php, inc</td>
<td>*.php, .php</td>
</tr>
<tr>
<td>PLSQL</td>
<td>plsql</td>
<td>*.pls</td>
</tr>
<tr>
<td>PLpgSQL</td>
<td>plpgsql</td>
<td>*.pgsql</td>
</tr>
<tr>
<td>POV-Ray SDL</td>
<td>pov-ray-sdl, pov-ray, povray</td>
<td>*.pov</td>
</tr>
<tr>
<td>Pan</td>
<td>pan</td>
<td>*.pan</td>
</tr>
<tr>
<td>Papyrus</td>
<td>papyrus</td>
<td>*.psc</td>
</tr>
<tr>
<td>Parrot</td>
<td>parrot</td>
<td>*.parrot</td>
</tr>
<tr>
<td>Parrot Assembly</td>
<td>parrot-assembly, pasm</td>
<td>*.pasm</td>
</tr>
<tr>
<td>Parrot Internal Representation</td>
<td>parrot-internal-representation, pir</td>
<td>*.pir</td>
</tr>
<tr>
<td>Pascal</td>
<td>pascal</td>
<td>*.pas</td>
</tr>
<tr>
<td>Pawn</td>
<td>pawn</td>
<td>*.pwn</td>
</tr>
<tr>
<td>Pep8</td>
<td>pep8</td>
<td>*.pep</td>
</tr>
<tr>
<td>Perl</td>
<td>perl, cperl</td>
<td>*.pl, <span class="exturl" data-url="aHR0cDovL01ha2VmaWxlLlBM">Makefile.PL<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td>Pic</td>
<td>pic</td>
<td>*.pic</td>
</tr>
<tr>
<td>Pickle</td>
<td>pickle</td>
<td>*.pkl</td>
</tr>
<tr>
<td>PicoLisp</td>
<td>picolisp</td>
<td>*.l</td>
</tr>
<tr>
<td>PigLatin</td>
<td>piglatin</td>
<td>*.pig</td>
</tr>
<tr>
<td>Pike</td>
<td>pike</td>
<td>*.pike</td>
</tr>
<tr>
<td>PlantUML</td>
<td>plantuml</td>
<td>*.puml</td>
</tr>
<tr>
<td>Pod</td>
<td>pod</td>
<td>*.pod</td>
</tr>
<tr>
<td>Pod 6</td>
<td>pod-6</td>
<td>*.pod</td>
</tr>
<tr>
<td>PogoScript</td>
<td>pogoscript</td>
<td>*.pogo</td>
</tr>
<tr>
<td>Pony</td>
<td>pony</td>
<td>*.pony</td>
</tr>
<tr>
<td>PostCSS</td>
<td>postcss</td>
<td>*.pcss</td>
</tr>
<tr>
<td>PostScript</td>
<td>postscript, postscr</td>
<td>*.ps</td>
</tr>
<tr>
<td>PowerBuilder</td>
<td>powerbuilder</td>
<td>*.pbt</td>
</tr>
<tr>
<td>PowerShell</td>
<td>powershell, posh, pwsh</td>
<td>*.ps1</td>
</tr>
<tr>
<td>Prisma</td>
<td>prisma</td>
<td>*.prisma</td>
</tr>
<tr>
<td>Processing</td>
<td>processing</td>
<td>*.pde</td>
</tr>
<tr>
<td>Proguard</td>
<td>proguard</td>
<td>*.pro</td>
</tr>
<tr>
<td>Prolog</td>
<td>prolog</td>
<td>*.pl</td>
</tr>
<tr>
<td>Propeller Spin</td>
<td>propeller-spin</td>
<td>*.spin</td>
</tr>
<tr>
<td>Protocol Buffer</td>
<td>protocol-buffer, protobuf</td>
<td>*.proto</td>
</tr>
<tr>
<td>Public Key</td>
<td>public-key</td>
<td>*.asc</td>
</tr>
<tr>
<td>Pug</td>
<td>pug</td>
<td>*.jade</td>
</tr>
<tr>
<td>Puppet</td>
<td>puppet</td>
<td>*.pp, Modulefile</td>
</tr>
<tr>
<td>Pure Data</td>
<td>pure-data</td>
<td>*.pd</td>
</tr>
<tr>
<td>PureBasic</td>
<td>purebasic</td>
<td>*.pb</td>
</tr>
<tr>
<td>PureScript</td>
<td>purescript</td>
<td>*.purs</td>
</tr>
<tr>
<td>Python</td>
<td>python, python3, rusthon</td>
<td>*.py, .gclient</td>
</tr>
<tr>
<td>Python console</td>
<td>python-console, pycon</td>
<td></td>
</tr>
<tr>
<td>Python traceback</td>
<td>python-traceback</td>
<td>*.pytb</td>
</tr>
<tr>
<td>QML</td>
<td>qml</td>
<td>*.qml</td>
</tr>
<tr>
<td>QMake</td>
<td>qmake</td>
<td>*.pro</td>
</tr>
<tr>
<td>Quake</td>
<td>quake</td>
<td>m3makefile</td>
</tr>
<tr>
<td>R</td>
<td>r, R, Rscript, splus</td>
<td>*.r, .Rprofile</td>
</tr>
<tr>
<td>RAML</td>
<td>raml</td>
<td>*.raml</td>
</tr>
<tr>
<td>RDoc</td>
<td>rdoc</td>
<td>*.rdoc</td>
</tr>
<tr>
<td>REALbasic</td>
<td>realbasic</td>
<td>*.rbbas</td>
</tr>
<tr>
<td>REXX</td>
<td>rexx, arexx</td>
<td>*.rexx</td>
</tr>
<tr>
<td>RHTML</td>
<td>rhtml, html+ruby</td>
<td>*.rhtml</td>
</tr>
<tr>
<td>RMarkdown</td>
<td>rmarkdown</td>
<td>*.rmd</td>
</tr>
<tr>
<td>RPC</td>
<td>rpc, rpcgen, oncrpc, xdr</td>
<td>*.x</td>
</tr>
<tr>
<td>RPM Spec</td>
<td>rpm-spec, specfile</td>
<td>*.spec</td>
</tr>
<tr>
<td>RUNOFF</td>
<td>runoff</td>
<td>*.rnh</td>
</tr>
<tr>
<td>Racket</td>
<td>racket</td>
<td>*.rkt</td>
</tr>
<tr>
<td>Ragel</td>
<td>ragel, ragel-rb, ragel-ruby</td>
<td>*.rl</td>
</tr>
<tr>
<td>Raku</td>
<td>raku, perl6, perl-6</td>
<td>*.6pl</td>
</tr>
<tr>
<td>Rascal</td>
<td>rascal</td>
<td>*.rsc</td>
</tr>
<tr>
<td>Raw token data</td>
<td>raw-token-data, raw</td>
<td>*.raw</td>
</tr>
<tr>
<td>Readline Config</td>
<td>readline-config, inputrc, readline</td>
<td>.inputrc</td>
</tr>
<tr>
<td>Reason</td>
<td>reason</td>
<td>*.re</td>
</tr>
<tr>
<td>Rebol</td>
<td>rebol</td>
<td>*.reb</td>
</tr>
<tr>
<td>Red</td>
<td>red, red/system</td>
<td>*.red</td>
</tr>
<tr>
<td>Redcode</td>
<td>redcode</td>
<td>*.cw</td>
</tr>
<tr>
<td>Regular Expression</td>
<td>regular-expression, regexp, regex</td>
<td>*.regexp</td>
</tr>
<tr>
<td>Ren’Py</td>
<td>ren’py, renpy</td>
<td>*.rpy</td>
</tr>
<tr>
<td>RenderScript</td>
<td>renderscript</td>
<td>*.rs</td>
</tr>
<tr>
<td>Rich Text Format</td>
<td>rich-text-format</td>
<td>*.rtf</td>
</tr>
<tr>
<td>Ring</td>
<td>ring</td>
<td>*.ring</td>
</tr>
<tr>
<td>Riot</td>
<td>riot</td>
<td>*.riot</td>
</tr>
<tr>
<td>RobotFramework</td>
<td>robotframework</td>
<td>*.robot</td>
</tr>
<tr>
<td>Roff</td>
<td>roff, groff, mdoc, nroff, troff</td>
<td>*.roff, eqnrc</td>
</tr>
<tr>
<td>Roff Manpage</td>
<td>roff-manpage</td>
<td>*.1</td>
</tr>
<tr>
<td>Rouge</td>
<td>rouge</td>
<td>*.rg</td>
</tr>
<tr>
<td>Ruby</td>
<td>ruby, jruby, macruby, rake, rb, rbx</td>
<td>*.rb, .irbrc</td>
</tr>
<tr>
<td>Rust</td>
<td>rust</td>
<td>*.rs</td>
</tr>
<tr>
<td>SAS</td>
<td>sas</td>
<td>*.sas</td>
</tr>
<tr>
<td>SCSS</td>
<td>scss</td>
<td>*.scss</td>
</tr>
<tr>
<td>SMT</td>
<td>smt</td>
<td>*.smt2</td>
</tr>
<tr>
<td>SPARQL</td>
<td>sparql</td>
<td>*.sparql</td>
</tr>
<tr>
<td>SQF</td>
<td>sqf</td>
<td>*.sqf</td>
</tr>
<tr>
<td>SQL</td>
<td>sql</td>
<td>*.sql</td>
</tr>
<tr>
<td>SQLPL</td>
<td>sqlpl</td>
<td>*.sql</td>
</tr>
<tr>
<td>SRecode Template</td>
<td>srecode-template</td>
<td>*.srt</td>
</tr>
<tr>
<td>SSH Config</td>
<td>ssh-config</td>
<td>ssh-config</td>
</tr>
<tr>
<td>STON</td>
<td>ston</td>
<td>*.ston</td>
</tr>
<tr>
<td>SVG</td>
<td>svg</td>
<td>*.svg</td>
</tr>
<tr>
<td>SWIG</td>
<td>swig</td>
<td>*.i</td>
</tr>
<tr>
<td>Sage</td>
<td>sage</td>
<td>*.sage</td>
</tr>
<tr>
<td>SaltStack</td>
<td>saltstack, saltstate, salt</td>
<td>*.sls</td>
</tr>
<tr>
<td>Sass</td>
<td>sass</td>
<td>*.sass</td>
</tr>
<tr>
<td>Scala</td>
<td>scala</td>
<td>*.scala</td>
</tr>
<tr>
<td>Scaml</td>
<td>scaml</td>
<td>*.scaml</td>
</tr>
<tr>
<td>Scheme</td>
<td>scheme</td>
<td>*.scm</td>
</tr>
<tr>
<td>Scilab</td>
<td>scilab</td>
<td>*.sci</td>
</tr>
<tr>
<td>Self</td>
<td>self</td>
<td>*.self</td>
</tr>
<tr>
<td>ShaderLab</td>
<td>shaderlab</td>
<td>*.shader</td>
</tr>
<tr>
<td>Shell</td>
<td>shell, sh, shell-script, bash, zsh</td>
<td>*.sh, .bash_aliases</td>
</tr>
<tr>
<td>ShellSession</td>
<td>shellsession, console</td>
<td>*.sh-session</td>
</tr>
<tr>
<td>Shen</td>
<td>shen</td>
<td>*.shen</td>
</tr>
<tr>
<td>Sieve</td>
<td>sieve</td>
<td>*.sieve</td>
</tr>
<tr>
<td>Slash</td>
<td>slash</td>
<td>*.sl</td>
</tr>
<tr>
<td>Slice</td>
<td>slice</td>
<td>*.ice</td>
</tr>
<tr>
<td>Slim</td>
<td>slim</td>
<td>*.slim</td>
</tr>
<tr>
<td>SmPL</td>
<td>smpl, coccinelle</td>
<td>*.cocci</td>
</tr>
<tr>
<td>Smali</td>
<td>smali</td>
<td>*.smali</td>
</tr>
<tr>
<td>Smalltalk</td>
<td>smalltalk, squeak</td>
<td>*.st</td>
</tr>
<tr>
<td>Smarty</td>
<td>smarty</td>
<td>*.tpl</td>
</tr>
<tr>
<td>Solidity</td>
<td>solidity</td>
<td></td>
</tr>
<tr>
<td>SourcePawn</td>
<td>sourcepawn, sourcemod</td>
<td>*.sp</td>
</tr>
<tr>
<td>Spline Font Database</td>
<td>spline-font-database</td>
<td>*.sfd</td>
</tr>
<tr>
<td>Squirrel</td>
<td>squirrel</td>
<td>*.nut</td>
</tr>
<tr>
<td>Stan</td>
<td>stan</td>
<td>*.stan</td>
</tr>
<tr>
<td>Standard ML</td>
<td>standard-ml, sml</td>
<td>*.ML</td>
</tr>
<tr>
<td>Starlark</td>
<td>starlark, bazel, bzl</td>
<td>*.bzl, BUCK</td>
</tr>
<tr>
<td>Stata</td>
<td>stata</td>
<td>*.do</td>
</tr>
<tr>
<td>Stylus</td>
<td>stylus</td>
<td>*.styl</td>
</tr>
<tr>
<td>SubRip Text</td>
<td>subrip-text</td>
<td>*.srt</td>
</tr>
<tr>
<td>SugarSS</td>
<td>sugarss</td>
<td>*.sss</td>
</tr>
<tr>
<td>SuperCollider</td>
<td>supercollider</td>
<td>*.sc</td>
</tr>
<tr>
<td>Svelte</td>
<td>svelte</td>
<td>*.svelte</td>
</tr>
<tr>
<td>Swift</td>
<td>swift</td>
<td>*.swift</td>
</tr>
<tr>
<td>SystemVerilog</td>
<td>systemverilog</td>
<td>*.sv</td>
</tr>
<tr>
<td>TI Program</td>
<td>ti-program</td>
<td>*.8xp</td>
</tr>
<tr>
<td>TLA</td>
<td>tla</td>
<td>*.tla</td>
</tr>
<tr>
<td>TOML</td>
<td>toml</td>
<td>*.toml, Cargo.lock</td>
</tr>
<tr>
<td>TSQL</td>
<td>tsql</td>
<td>*.sql</td>
</tr>
<tr>
<td>TSX</td>
<td>tsx</td>
<td>*.tsx</td>
</tr>
<tr>
<td>TXL</td>
<td>txl</td>
<td>*.txl</td>
</tr>
<tr>
<td>Tcl</td>
<td>tcl</td>
<td>*.tcl, owh</td>
</tr>
<tr>
<td>Tcsh</td>
<td>tcsh</td>
<td>*.tcsh</td>
</tr>
<tr>
<td>TeX</td>
<td>tex, latex</td>
<td>*.tex</td>
</tr>
<tr>
<td>Tea</td>
<td>tea</td>
<td>*.tea</td>
</tr>
<tr>
<td>Terra</td>
<td>terra</td>
<td>*.t</td>
</tr>
<tr>
<td>Texinfo</td>
<td>texinfo</td>
<td>*.texinfo</td>
</tr>
<tr>
<td>Text</td>
<td>text, fundamental</td>
<td>*.txt, COPYING</td>
</tr>
<tr>
<td>Textile</td>
<td>textile</td>
<td>*.textile</td>
</tr>
<tr>
<td>Thrift</td>
<td>thrift</td>
<td>*.thrift</td>
</tr>
<tr>
<td>Turing</td>
<td>turing</td>
<td>*.t</td>
</tr>
<tr>
<td>Turtle</td>
<td>turtle</td>
<td>*.ttl</td>
</tr>
<tr>
<td>Twig</td>
<td>twig</td>
<td>*.twig</td>
</tr>
<tr>
<td>Type Language</td>
<td>type-language, tl</td>
<td>*.tl</td>
</tr>
<tr>
<td>TypeScript</td>
<td>typescript, ts</td>
<td>*.ts</td>
</tr>
<tr>
<td>Unified Parallel C</td>
<td>unified-parallel-c</td>
<td>*.upc</td>
</tr>
<tr>
<td>Unity3D Asset</td>
<td>unity3d-asset</td>
<td>*.anim</td>
</tr>
<tr>
<td>Unix Assembly</td>
<td>unix-assembly</td>
<td>*.s</td>
</tr>
<tr>
<td>Uno</td>
<td>uno</td>
<td>*.uno</td>
</tr>
<tr>
<td>UnrealScript</td>
<td>unrealscript</td>
<td>*.uc</td>
</tr>
<tr>
<td>UrWeb</td>
<td>urweb, Ur/Web, Ur</td>
<td>*.ur</td>
</tr>
<tr>
<td>V</td>
<td>v, vlang</td>
<td>*.v</td>
</tr>
<tr>
<td>VBA</td>
<td>vba, vb6</td>
<td>*.bas</td>
</tr>
<tr>
<td>VBScript</td>
<td>vbscript</td>
<td>*.vbs</td>
</tr>
<tr>
<td>VCL</td>
<td>vcl</td>
<td>*.vcl</td>
</tr>
<tr>
<td>VHDL</td>
<td>vhdl</td>
<td>*.vhdl</td>
</tr>
<tr>
<td>Vala</td>
<td>vala</td>
<td>*.vala</td>
</tr>
<tr>
<td>Verilog</td>
<td>verilog</td>
<td>*.v</td>
</tr>
<tr>
<td>Vim Snippet</td>
<td>vim-snippet, SnipMate, UltiSnip, NeoSnippet</td>
<td>*.snip</td>
</tr>
<tr>
<td>Vim script</td>
<td>vim-script, vim, viml, nvim</td>
<td>*.vim, .gvimrc</td>
</tr>
<tr>
<td>Visual Basic .NET</td>
<td>vbnet, <span class="exturl" data-url="aHR0cDovL3ZiLm5ldA==">vb.net<i class="fa fa-external-link-alt"></i></span></td>
<td>*.vb</td>
</tr>
<tr>
<td>Volt</td>
<td>volt</td>
<td>*.volt</td>
</tr>
<tr>
<td>Vue</td>
<td>vue</td>
<td>*.vue</td>
</tr>
<tr>
<td>Wavefront Material</td>
<td>wavefront-material</td>
<td>*.mtl</td>
</tr>
<tr>
<td>Wavefront Object</td>
<td>wavefront-object</td>
<td>*.obj</td>
</tr>
<tr>
<td>Web Ontology Language</td>
<td>web-ontology-language</td>
<td>*.owl</td>
</tr>
<tr>
<td>WebAssembly</td>
<td>webassembly, wast, wasm</td>
<td>*.wast</td>
</tr>
<tr>
<td>WebIDL</td>
<td>webidl</td>
<td>*.webidl</td>
</tr>
<tr>
<td>WebVTT</td>
<td>webvtt</td>
<td>*.vtt</td>
</tr>
<tr>
<td>Wget Config</td>
<td>wget-config, wgetrc</td>
<td>.wgetrc</td>
</tr>
<tr>
<td>Windows Registry Entries</td>
<td>windows-registry-entries</td>
<td>*.reg</td>
</tr>
<tr>
<td>Wollok</td>
<td>wollok</td>
<td>*.wlk</td>
</tr>
<tr>
<td>World of Warcraft Addon Data</td>
<td>world-of-warcraft-addon-data</td>
<td>*.toc</td>
</tr>
<tr>
<td>X BitMap</td>
<td>x-bitmap, xbm</td>
<td>*.xbm</td>
</tr>
<tr>
<td>X Font Directory Index</td>
<td>x-font-directory-index</td>
<td>encodings.dir</td>
</tr>
<tr>
<td>X PixMap</td>
<td>x-pixmap, xpm</td>
<td>*.xpm</td>
</tr>
<tr>
<td>X10</td>
<td>x10, xten</td>
<td>*.x10</td>
</tr>
<tr>
<td>XC</td>
<td>xc</td>
<td>*.xc</td>
</tr>
<tr>
<td>XCompose</td>
<td>xcompose</td>
<td>.XCompose</td>
</tr>
<tr>
<td>XML</td>
<td>xml, rss, xsd, wsdl</td>
<td>*.xml, .classpath</td>
</tr>
<tr>
<td>XML Property List</td>
<td>xml-property-list</td>
<td>*.plist</td>
</tr>
<tr>
<td>XPages</td>
<td>xpages</td>
<td>*.xsp-config</td>
</tr>
<tr>
<td>XProc</td>
<td>xproc</td>
<td>*.xpl</td>
</tr>
<tr>
<td>XQuery</td>
<td>xquery</td>
<td>*.xquery</td>
</tr>
<tr>
<td>XS</td>
<td>xs</td>
<td>*.xs</td>
</tr>
<tr>
<td>XSLT</td>
<td>xslt, xsl</td>
<td>*.xslt</td>
</tr>
<tr>
<td>Xojo</td>
<td>xojo</td>
<td>*.xojo_code</td>
</tr>
<tr>
<td>Xtend</td>
<td>xtend</td>
<td>*.xtend</td>
</tr>
<tr>
<td>YAML</td>
<td>yaml, yml</td>
<td>*.yml, .clang-format</td>
</tr>
<tr>
<td>YANG</td>
<td>yang</td>
<td>*.yang</td>
</tr>
<tr>
<td>YARA</td>
<td>yara</td>
<td>*.yar</td>
</tr>
<tr>
<td>YASnippet</td>
<td>yasnippet, snippet, yas</td>
<td>*.yasnippet</td>
</tr>
<tr>
<td>Yacc</td>
<td>yacc</td>
<td>*.y</td>
</tr>
<tr>
<td>ZAP</td>
<td>zap</td>
<td>*.zap</td>
</tr>
<tr>
<td>ZIL</td>
<td>zil</td>
<td>*.zil</td>
</tr>
<tr>
<td>Zeek</td>
<td>zeek, bro</td>
<td>*.zeek</td>
</tr>
<tr>
<td>ZenScript</td>
<td>zenscript</td>
<td>*.zs</td>
</tr>
<tr>
<td>Zephir</td>
<td>zephir</td>
<td>*.zep</td>
</tr>
<tr>
<td>Zig</td>
<td>zig</td>
<td>*.zig</td>
</tr>
<tr>
<td>Zimpl</td>
<td>zimpl</td>
<td>*.zimpl</td>
</tr>
<tr>
<td>cURL Config</td>
<td>curl-config, curlrc</td>
<td>.curlrc</td>
</tr>
<tr>
<td>desktop</td>
<td>desktop</td>
<td>*.desktop</td>
</tr>
<tr>
<td>dircolors</td>
<td>dircolors</td>
<td>*.dircolors, .dir_colors</td>
</tr>
<tr>
<td>eC</td>
<td>ec</td>
<td>*.ec</td>
</tr>
<tr>
<td>edn</td>
<td>edn</td>
<td>*.edn</td>
</tr>
<tr>
<td>fish</td>
<td>fish</td>
<td>*.fish</td>
</tr>
<tr>
<td>mIRC Script</td>
<td>mirc-script</td>
<td>*.mrc</td>
</tr>
<tr>
<td>mcfunction</td>
<td>mcfunction</td>
<td>*.mcfunction</td>
</tr>
<tr>
<td>mupad</td>
<td>mupad</td>
<td>*.mu</td>
</tr>
<tr>
<td>nanorc</td>
<td>nanorc</td>
<td>*.nanorc, .nanorc</td>
</tr>
<tr>
<td>nesC</td>
<td>nesc</td>
<td>*.nc</td>
</tr>
<tr>
<td>ooc</td>
<td>ooc</td>
<td>*.ooc</td>
</tr>
<tr>
<td>q</td>
<td>q</td>
<td>*.q</td>
</tr>
<tr>
<td>reStructuredText</td>
<td>restructuredtext, rst</td>
<td>*.rst</td>
</tr>
<tr>
<td>sed</td>
<td>sed</td>
<td>*.sed</td>
</tr>
<tr>
<td>wdl</td>
<td>wdl</td>
<td>*.wdl</td>
</tr>
<tr>
<td>wisp</td>
<td>wisp</td>
<td>*.wisp</td>
</tr>
<tr>
<td>xBase</td>
<td>xbase, advpl, clipper, foxpro</td>
<td>*.prg</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>知识笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>GeoTools坐标转换(scala)</title>
    <url>/posts/16/</url>
    <content><![CDATA[<p>今天在使用 GeoTools 做坐标转换的时候，发现转出来的坐标与预期不符。经过查询 GeoTools 文档，发现需要通过设置 Axis Order 来指定经纬度哪个在前哪个在后，在此记录一下。</p>
<span id="more"></span>
<blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdlb3Rvb2xzLm9yZy9sYXRlc3QvdXNlcmd1aWRlL2xpYnJhcnkvcmVmZXJlbmNpbmcvb3JkZXIuaHRtbA==">Axis Order — GeoTools 27-SNAPSHOT User Guide<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="问题">问题</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.geotools.geometry.jts.<span class="type">JTSFactoryFinder</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.geometry.jts.<span class="type">JTS</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.referencing.<span class="type">CRS</span></span><br><span class="line"><span class="keyword">import</span> org.locationtech.jts.geom.<span class="type">Coordinate</span></span><br><span class="line"><span class="keyword">import</span> org.locationtech.jts.geom.<span class="type">GeometryFactory</span></span><br><span class="line"><span class="keyword">import</span> org.locationtech.jts.geom.<span class="type">Point</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建个点用于转换</span></span><br><span class="line"><span class="keyword">val</span> geometryFactory: <span class="type">GeometryFactory</span> = <span class="type">JTSFactoryFinder</span>.getGeometryFactory</span><br><span class="line"><span class="keyword">val</span> coord: <span class="type">Coordinate</span> = <span class="keyword">new</span> <span class="type">Coordinate</span>(<span class="number">121</span>, <span class="number">32</span>)</span><br><span class="line"><span class="keyword">val</span> point: <span class="type">Point</span> = geometryFactory.createPoint(coord)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> mathTransform = <span class="type">CRS</span>.findMathTransform(<span class="type">CRS</span>.decode(<span class="string">&quot;EPSG:4490&quot;</span>), <span class="type">CRS</span>.decode(<span class="string">&quot;EPSG:4528&quot;</span>))</span><br><span class="line"><span class="keyword">val</span> newPoint: <span class="type">Point</span> = <span class="type">JTS</span>.transform(point, mathTransform).asInstanceOf[<span class="type">Point</span>]</span><br></pre></td></tr></table></figure>
<p>这段代码乍一看没啥问题，就是转出来的 Point 坐标是错误的。</p>
<p>经过查询 GeoTools 文档，可以知道，由于历史原因，GeoTools 无法自动判断何时返回与 EPSG 库一致的 CRS，以及何时返回带有轴序配置的 CRS。所以 GeoTools 决定无论轴序是什么样的，都认为是和 EPSG 一致的 CRS，也就是 x 为纬度，y 为经度。如果需要调整数据的轴序，可以由用户自行规定 CRS。</p>
<h2 id="解决方案">解决方案</h2>
<p>按照我们一般的习惯，想要经度在前，纬度在后。</p>
<p>为了帮助旧应用程序实现过渡，可以通过设置系统属性<code>org.geotools.referencing.forceXY</code>为<code>true</code>，此时，会将提示值<code>FORCE_LONGITUDE_FIRST_AXIS_ORDER</code>设置为<code>true</code>，将会强制认为轴序为经度在前，纬度在后。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">System</span>.setProperty(<span class="string">&quot;org.geotools.referencing.forceXY&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>也可以在代码里手动指定，代码如下。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.supermap.bdt.base.algorithm.<span class="type">CRSTransform</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.factory.<span class="type">Hints</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.geometry.jts.<span class="type">JTSFactoryFinder</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.geometry.jts.<span class="type">JTS</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.referencing.<span class="type">CRS</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.referencing.<span class="type">ReferencingFactoryFinder</span></span><br><span class="line"><span class="keyword">import</span> org.locationtech.jts.geom.<span class="type">Coordinate</span></span><br><span class="line"><span class="keyword">import</span> org.locationtech.jts.geom.<span class="type">GeometryFactory</span></span><br><span class="line"><span class="keyword">import</span> org.locationtech.jts.geom.<span class="type">Point</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建个点用于转换</span></span><br><span class="line"><span class="keyword">val</span> geometryFactory: <span class="type">GeometryFactory</span> = <span class="type">JTSFactoryFinder</span>.getGeometryFactory</span><br><span class="line"><span class="keyword">val</span> coord: <span class="type">Coordinate</span> = <span class="keyword">new</span> <span class="type">Coordinate</span>(<span class="number">121</span>, <span class="number">32</span>)</span><br><span class="line"><span class="keyword">val</span> point: <span class="type">Point</span> = geometryFactory.createPoint(coord)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> hints = <span class="keyword">new</span> <span class="type">Hints</span>(<span class="type">Hints</span>.<span class="type">FORCE_LONGITUDE_FIRST_AXIS_ORDER</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">val</span> factory = <span class="type">ReferencingFactoryFinder</span>.getCRSAuthorityFactory(<span class="string">&quot;EPSG&quot;</span>, hints)</span><br><span class="line"><span class="keyword">val</span> mathTransform = <span class="type">CRS</span>.findMathTransform(factory.createCoordinateReferenceSystem(<span class="string">&quot;EPSG:4490&quot;</span>), factory.createCoordinateReferenceSystem(<span class="string">&quot;EPSG:4528&quot;</span>))</span><br><span class="line"><span class="keyword">val</span> newPoint: <span class="type">Point</span> = <span class="type">JTS</span>.transform(point, mathTransform).asInstanceOf[<span class="type">Point</span>]</span><br></pre></td></tr></table></figure>
<p>通过手动指定了轴序，转出来的结果就是正确的了。</p>
<h2 id="SuperMap-iObject-for-Spark">SuperMap iObject for Spark</h2>
<p>我是在 Spark 环境下使用坐标转换，超图的 SuperMap iObject for Spark 中也引了一下这个方法。这里改成超图 iObject 里的方法。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.supermap.bdt.base.algorithm.<span class="type">CRSTransform</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.factory.<span class="type">Hints</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.geometry.jts.<span class="type">JTSFactoryFinder</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.referencing.<span class="type">CRS</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.referencing.<span class="type">ReferencingFactoryFinder</span></span><br><span class="line"><span class="keyword">import</span> org.locationtech.jts.geom.<span class="type">Coordinate</span></span><br><span class="line"><span class="keyword">import</span> org.locationtech.jts.geom.<span class="type">GeometryFactory</span></span><br><span class="line"><span class="keyword">import</span> org.locationtech.jts.geom.<span class="type">Point</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建个点用于转换</span></span><br><span class="line"><span class="keyword">val</span> geometryFactory: <span class="type">GeometryFactory</span> = <span class="type">JTSFactoryFinder</span>.getGeometryFactory</span><br><span class="line"><span class="keyword">val</span> coord: <span class="type">Coordinate</span> = <span class="keyword">new</span> <span class="type">Coordinate</span>(<span class="number">121</span>, <span class="number">32</span>)</span><br><span class="line"><span class="keyword">val</span> point: <span class="type">Point</span> = geometryFactory.createPoint(coord)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> hints = <span class="keyword">new</span> <span class="type">Hints</span>(<span class="type">Hints</span>.<span class="type">FORCE_LONGITUDE_FIRST_AXIS_ORDER</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">val</span> factory = <span class="type">ReferencingFactoryFinder</span>.getCRSAuthorityFactory(<span class="string">&quot;EPSG&quot;</span>, hints)</span><br><span class="line"><span class="keyword">val</span> mathTransform = <span class="type">CRSTransform</span>.findMathTransform(factory.createCoordinateReferenceSystem(<span class="string">&quot;EPSG:4490&quot;</span>), factory.createCoordinateReferenceSystem(<span class="string">&quot;EPSG:4528&quot;</span>))</span><br><span class="line"><span class="keyword">val</span> newPoint: <span class="type">Point</span> = <span class="type">CRSTransform</span>.transform(point, mathTransform).asInstanceOf[<span class="type">Point</span>]</span><br></pre></td></tr></table></figure>
<p>直接转换 FeatureRDD，这边不写 FeatureRDD 怎么构建了。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.supermap.bdt.base.algorithm.<span class="type">CRSTransform</span></span><br><span class="line"><span class="keyword">import</span> com.supermap.bdt.<span class="type">FeatureRDD</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.factory.<span class="type">Hints</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.geometry.jts.<span class="type">JTSFactoryFinder</span></span><br><span class="line"><span class="keyword">import</span> org.geotools.referencing.<span class="type">ReferencingFactoryFinder</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处仅为示例</span></span><br><span class="line"><span class="keyword">val</span> featureRDD: <span class="type">FeatureRDD</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> hints = <span class="keyword">new</span> <span class="type">Hints</span>(<span class="type">Hints</span>.<span class="type">FORCE_LONGITUDE_FIRST_AXIS_ORDER</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">val</span> factory = <span class="type">ReferencingFactoryFinder</span>.getCRSAuthorityFactory(<span class="string">&quot;EPSG&quot;</span>, hints)</span><br><span class="line"><span class="keyword">val</span> newFeatureRDD: <span class="type">FeatureRDD</span> = <span class="type">CRSTransform</span>.transform(featureRDD, factory.createCoordinateReferenceSystem(<span class="string">&quot;EPSG:4528&quot;</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>GeoTools</tag>
        <tag>Spark</tag>
        <tag>SuperMap</tag>
      </tags>
  </entry>
  <entry>
    <title>哔哩哔哩AV号、BV号转换</title>
    <url>/posts/2/</url>
    <content><![CDATA[<p>哔哩哔哩把以前 <code>av</code> + 数字的稿件地址格式更换为 <code>BV</code> + 字母数字的格式，类似 Youtube 的稿件编码方式已经有一段时间了。最近闲来无聊，搜了下，发现大佬们已经破解了转换的方法，并给出了 Python 测试代码。正好最近在写小工具合集，写着玩，就用 js 写了一个，留作备用。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pc3p5Lnh5ei9hbmltZS9iaWxpYmlsaUJ2MmF2">哔哩哔哩 AV、BV 号转换<i class="fa fa-external-link-alt"></i></span></p>
<p>网上应该已经有了类似工具，不过还是喜欢用自己写的，有问题也好改。有需要的可以用一下。</p>
<h2 id="原文-来自知乎mcfx-的答案">原文(来自知乎<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM4MTc4NDM3Ny9hbnN3ZXIvMTA5OTQzODc4NA==">mcfx 的答案<i class="fa fa-external-link-alt"></i></span></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table=<span class="string">&#x27;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&#x27;</span></span><br><span class="line">tr=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>):</span><br><span class="line">    tr[table[i]]=i</span><br><span class="line">s=[<span class="number">11</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">xor=<span class="number">177451812</span></span><br><span class="line">add=<span class="number">8728348608</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">x</span>):</span></span><br><span class="line">    r=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        r+=tr[x[s[i]]]*<span class="number">58</span>**i</span><br><span class="line">    <span class="keyword">return</span> (r-add)^xor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">x</span>):</span></span><br><span class="line">    x=(x^xor)+add</span><br><span class="line">    r=<span class="built_in">list</span>(<span class="string">&#x27;BV1  4 1 7  &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        r[s[i]]=table[x//<span class="number">58</span>**i%<span class="number">58</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(r)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dec(<span class="string">&#x27;BV17x411w7KC&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dec(<span class="string">&#x27;BV1Q541167Qg&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dec(<span class="string">&#x27;BV1mK4y1C7Bz&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(enc(<span class="number">170001</span>))</span><br><span class="line"><span class="built_in">print</span>(enc(<span class="number">455017605</span>))</span><br><span class="line"><span class="built_in">print</span>(enc(<span class="number">882584971</span>))</span><br></pre></td></tr></table></figure>
<p>互相转换脚本，如果算法没猜错，可以保证在 av 号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup></mrow><annotation encoding="application/x-tex">&lt; 2^{27}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="base textstyle uncramped"><span class="mrel">&lt;</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 时正确，同时应该在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><msup><mn>2</mn><mrow><mn>3</mn><mn>0</mn></mrow></msup></mrow><annotation encoding="application/x-tex">&lt; 2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="base textstyle uncramped"><span class="mrel">&lt;</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 时也是正确的。此代码以 WTFPL 开源。</p>
<p>UPD：之前的代码中，所有数位都被用到是乱凑的，实际上并不需要，目前只要低 6 位就足够了。（更大的 av 号需要 64 位整数存储，但是 b 站现在使用的应该还是 32 位整数，所以应该还要很久）</p>
<p>发现的方法：</p>
<p>首先从各种渠道的信息来看，应该是 base58 编码的。设 x 是一个钦定的 av 号，查询 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mn>8</mn><mi>k</mi><mo>+</mo><mi>x</mi><mo separator="true">,</mo><mn>5</mn><msup><mn>8</mn><mrow><mn>2</mn></mrow></msup><mi>k</mi><mo>+</mo><mi>x</mi><mo separator="true">,</mo><mn>5</mn><msup><mn>8</mn><mrow><mn>3</mn></mrow></msup><mi>k</mi><mo>+</mo><mi>x</mi><mo separator="true">,</mo><mn>5</mn><msup><mn>8</mn><mrow><mn>4</mn></mrow></msup><mi>k</mi><mo>+</mo><mi>x</mi><mo>(</mo><mi>k</mi><mo>∈</mo><mi>Z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">58k+x,58^{2}k+x,58^{3}k+x,58^{4}k+x(k \in Z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">5</span><span class="mord mathrm">8</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit">x</span><span class="mpunct">,</span><span class="mord mathrm">5</span><span class="mord"><span class="mord mathrm">8</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit">x</span><span class="mpunct">,</span><span class="mord mathrm">5</span><span class="mord"><span class="mord mathrm">8</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit">x</span><span class="mpunct">,</span><span class="mord mathrm">5</span><span class="mord"><span class="mord mathrm">8</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mrel">∈</span><span class="mord mathit" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span> 这些 av 号对应的 bv 号，发现 bv 号的第 12、11、4、9、5 位分别会变化。所以猜测这些是 58 进制下的相应位。</p>
<p>但是直接 base58 是不行的，所以猜测异或了一个大数，并且 base58 的字符表可能打乱了。经过实验，bv 号最低位相同的数，av 号的奇偶性相同，这一定程度上印证了之前的猜想。</p>
<p>接下来找了一些 av 号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span>，满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span> 对应 bv 号的第 11 位不同。设异或的数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span></span>，那么 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mfrac><mrow><mi>X</mi><mo>⊕</mo><mi>x</mi></mrow><mrow><mn>5</mn><mn>8</mn></mrow></mfrac><mo fence="true">]</mo></mrow><mo>≠</mo><mrow><mo fence="true">[</mo><mfrac><mrow><mi>X</mi><mo>⊕</mo><mo>(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>5</mn><mn>8</mn></mrow></mfrac><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left [\frac{X\oplus x}{58} \right]\neq \left [\frac{X\oplus (x+1)}{58} \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.15em;"></span><span class="strut bottom" style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="base textstyle uncramped"><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">5</span><span class="mord mathrm">8</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mbin">⊕</span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mrel">≠</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">5</span><span class="mord mathrm">8</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mbin">⊕</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size2">]</span></span></span></span></span></span>（ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⊕</mo></mrow><annotation encoding="application/x-tex">\oplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.58333em;"></span><span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord">⊕</span></span></span></span> 表示异或）。</p>
<p>由于 av 号（除了最新的少量视频）最多只有 27 bits，所以可以设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mi>a</mi><mo>+</mo><mi>b</mi><mo>(</mo><mn>0</mn><mo>≤</mo><mi>b</mi><mo>≤</mo><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">X=2^{27}a+b(0\leq b\leq 2^{27})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mrel">=</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">a</span><span class="mbin">+</span><span class="mord mathit">b</span><span class="mopen">(</span><span class="mord mathrm">0</span><span class="mrel">≤</span><span class="mord mathit">b</span><span class="mrel">≤</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span> 。然后可以发现 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span></span> 只和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>5</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">2^{27}a\ mod\ 58</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">a</span><span class="mord mspace"> </span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathrm">5</span><span class="mord mathrm">8</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span> 有关，那么可以枚举这两个值（一共 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mo>⋅</mo><mn>5</mn><mn>8</mn><mo>=</mo><mn>7</mn><mn>7</mn><mn>8</mn><mn>4</mn><mn>6</mn><mn>2</mn><mn>8</mn><mn>2</mn><mn>2</mn><mn>4</mn></mrow><annotation encoding="application/x-tex">2^{27} \cdot 58=7784628224</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">⋅</span><span class="mord mathrm">5</span><span class="mord mathrm">8</span><span class="mrel">=</span><span class="mord mathrm">7</span><span class="mord mathrm">7</span><span class="mord mathrm">8</span><span class="mord mathrm">4</span><span class="mord mathrm">6</span><span class="mord mathrm">2</span><span class="mord mathrm">8</span><span class="mord mathrm">2</span><span class="mord mathrm">2</span><span class="mord mathrm">4</span></span></span></span> 种情况）然后使用上面的式子检查，就能得到若干可能的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span></span> 只和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>5</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">2^{27}a\ mod\ 58</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">a</span><span class="mord mspace"> </span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathrm">5</span><span class="mord mathrm">8</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span>。</p>
<p>这里我得到的可能值如下：（左边是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>5</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">2^{27}a\ mod\ 58</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">a</span><span class="mord mspace"> </span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathrm">5</span><span class="mord mathrm">8</span></span></span></span>，右边是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22 90983642</span><br><span class="line">22 90983643</span><br><span class="line">50 43234084</span><br><span class="line">50 43234085</span><br></pre></td></tr></table></figure>
<p>有奇有偶是因为异或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> 之后也能找到轮换表。而 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn><mn>0</mn><mn>9</mn><mn>8</mn><mn>3</mn><mn>6</mn><mn>4</mn><mn>2</mn><mo>+</mo><mn>4</mn><mn>3</mn><mn>2</mn><mn>3</mn><mn>4</mn><mn>0</mn><mn>8</mn><mn>5</mn><mo>=</mo><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">90983642+43234085=2^{27}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">9</span><span class="mord mathrm">0</span><span class="mord mathrm">9</span><span class="mord mathrm">8</span><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">4</span><span class="mord mathrm">2</span><span class="mbin">+</span><span class="mord mathrm">4</span><span class="mord mathrm">3</span><span class="mord mathrm">2</span><span class="mord mathrm">3</span><span class="mord mathrm">4</span><span class="mord mathrm">0</span><span class="mord mathrm">8</span><span class="mord mathrm">5</span><span class="mrel">=</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span> 则使得模 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">58</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">5</span><span class="mord mathrm">8</span></span></span></span> 的余数刚好变成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{27}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span> 减它。</p>
<p>我取了 <code>b=43234084</code>，然后处理最低位，可以得到一个字符表，即 <code>fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF</code>。</p>
<p>对于更高位，实际上还需要知道 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>5</mn><msup><mn>8</mn><mrow><mn>2</mn></mrow></msup><mo separator="true">,</mo><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>5</mn><msup><mn>8</mn><mrow><mn>3</mn></mrow></msup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">2^{27}a\ mod\ 58^{2},2^{27}a\ mod\ 58^{3},...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">a</span><span class="mord mspace"> </span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathrm">5</span><span class="mord"><span class="mord mathrm">8</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">a</span><span class="mord mspace"> </span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathrm">5</span><span class="mord"><span class="mord mathrm">8</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span></span></span></span>，这些值也可以 枚举 58 次得到，最后我得到的值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>5</mn><msup><mn>8</mn><mrow><mn>4</mn></mrow></msup><mo>=</mo><mn>1</mn><mn>7</mn><mn>4</mn><mn>9</mn><mn>9</mn><mn>6</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">2^{27}a\ mod\ 58^{4}=1749968</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">a</span><span class="mord mspace"> </span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathrm">5</span><span class="mord"><span class="mord mathrm">8</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathrm">1</span><span class="mord mathrm">7</span><span class="mord mathrm">4</span><span class="mord mathrm">9</span><span class="mord mathrm">9</span><span class="mord mathrm">6</span><span class="mord mathrm">8</span></span></span></span> 。</p>
<p>这时我发现，每一位的字符表是相同的（实际上只对 <code>b=43234084</code> 是这样的），然后再微调一下参数（上面代码中的两个 magic number 就相当于这里的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a,b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathit">b</span></span></span></span>），最后处理了一下 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo><msup><mn>2</mn><mrow><mn>2</mn><mn>7</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\geq 2^{27}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.950078em;vertical-align:-0.13597em;"></span><span class="base textstyle uncramped"><span class="mrel">≥</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">7</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 的情况就得到了这份代码。</p>
<h2 id="Vue-JS-实现">Vue + JS 实现</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;bilibiliBv2av&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">aid</span>: <span class="string">&quot;19390801&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">bvid</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="attr">table</span>: <span class="string">&quot;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">tr</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">s</span>: [<span class="number">11</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>],</span></span><br><span class="line"><span class="javascript">      <span class="attr">xor</span>: <span class="number">177451812</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">add</span>: <span class="number">8728348608</span>,</span></span><br><span class="line"><span class="javascript">    &#125;),</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.init();</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">58</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.tr[<span class="built_in">this</span>.table[i]] = i;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.enc(<span class="built_in">this</span>.aid);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">dec</span>(<span class="params">x</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> r = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">            r += <span class="built_in">this</span>.tr[x[<span class="built_in">this</span>.s[i]]] * <span class="number">58</span> ** i;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.aid = (r - <span class="built_in">this</span>.add) ^ <span class="built_in">this</span>.xor;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.aid = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">enc</span>(<span class="params">x</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">          x = <span class="built_in">parseInt</span>(x);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(x)) &#123;</span></span><br><span class="line"><span class="javascript">            x = (x ^ <span class="built_in">this</span>.xor) + <span class="built_in">this</span>.add;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> r = [</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot;B&quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot;V&quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot;4&quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot;7&quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="javascript">            ];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">              r[<span class="built_in">this</span>.s[i]] = <span class="built_in">this</span>.table[<span class="built_in">Math</span>.floor(x / <span class="number">58</span> ** i) % <span class="number">58</span>];</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.bvid = r.join(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.bvid = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.bvid = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Python</tag>
        <tag>Vue</tag>
        <tag>Bilibili</tag>
        <tag>哔哩哔哩</tag>
      </tags>
  </entry>
  <entry>
    <title>2017年终总结</title>
    <url>/posts/2017review/</url>
    <content><![CDATA[<p>再过两天就是除夕了，新的一年即将到来。值此新春来临之际，我想对过去的一年进行一个简单的回顾，以后我也能回来翻看。</p>
<span id="more"></span>
<p><img data-src="https://img.iszy.xyz/20190318211304.png" alt=""></p>
<p>其实吧，2017 年已经过去两个多月了，各个国产 App 早就已经发完了各自的一年回顾，比如支付宝的一年账单啦，网易云的一年听歌历史什么的，忘记叫啥名了。但是无所谓啦，什么时候回顾都是一样的嘛。再说了，那个 1 月 1 日的新年到底是国外的新年，我们传统的新年才是真的新年嘛，真正的有了除旧迎新的感觉。</p>
<p>说起来，为啥我突然想回顾过去的一年呢？是这个样子的。我今天在 B 站看视频，欸，正好，我一直看的一个 B 站 Up 主上传了一个年终总结的视频，用于回顾一年干过的事情，发表一些感悟。看过之后，我觉得吧，做一个年终总结还挺好，总结一年得失，上一年的愿望目标有没有达成，对新的一年做出一些展望，立下新的 flag。其实吧，扯了半天，主要还是一时兴起，就想来做一下，23333。</p>
<p>2017 年，我都做了哪些事呢？在这一年里，我接触了许多新事物，有些是源于兴趣，有些是迫于需求。我来随便掰扯掰扯吧。</p>
<p>首先，我这个博客就是今年创建的。我其实从小就觉得有一个自己的网站是一件很酷的事情，当时觉得有个 QQ 空间很棒，还想着我要写点日志来充实一下我的页面呢。结果吧，到底我还是没有怎么写日志，空空荡荡，不咋好看，干脆就不看它了。现在我已经大学了，我还是很想搞自己的网站，选择博客自然是最正常不过的了。看国内的各种博客网站，总觉得哪里不顺眼，不尽如心意，还是自己建比较靠谱，于是，就有了这个博客。具体怎么建的在这里就不讲了，免得篇幅太长。</p>
<p>我原本的设想是，每周我都能写点东西，不论是想说的话，还是新学习点东西，做点记录。但是，也能看到，我的 post 总的来说，不怎么多，发的间隔也比较长。=像我这种不善言辞，不擅长写作的人，能有时候发一发就不错了，其实大多是给我自己看的，一懒下来就不想写了。在新的一年里，说不定能多写点东西吧，立个 flag 在这。嘿嘿，明年我再过来看看。</p>
<p>除了博客以外，我这个 <span class="exturl" data-url="aHR0cDovL3N1bnppeWFuZy5jb20=">sunziyang.com<i class="fa fa-external-link-alt"></i></span> 的域名好像也是今年注册的。我有一门课的老师跟我们讲，一个人应该有一个自己的域名，拥有一个自己的域名可以做很多有用的事情。我觉得很有道理啊，申请一个个性化的域名来代表我的身份，我拿来做什么都行啊，弄个网站，弄个域名邮箱什么的都很好玩。就算是放在那里备用也不错，万一什么时候我就用到了，毕竟我比较喜欢折腾。我这域名大概会一直续下去的吧。</p>
<p>2017 年初，我曾想过，这一年，在我看完正在追的网络小说以后，就不再看新的了，毕竟好多套路都差不多，也没什么意思，毫无营养。我有个 kindle 放在那里，我还买了些准备看的书下在里面，准备看完那些网络小说以后就拿 kindle 看看好书吧。转眼间一年就过去了，果然，我还是没能克制住，又继续追了作者大大的新作，kindle 又闲置了一年，真的是对不起了。新的一年，我继续立下这个 flag，我觉得这次我会付诸实施的（坚定脸）。</p>
<p>这一年，我在学校做项目，需要写网站，导师对我们的期望很高，希望能与另外一个项目的网站进行对接，那边需要框架的兼容，要求使用微软的 <span class="exturl" data-url="aHR0cDovL0FTUC5ORVQ=">ASP.NET<i class="fa fa-external-link-alt"></i></span> MVC5 框架。我当时是懵逼的，感觉很高大上嘛。我倒是学过 C#，可惜我完全没有接触过 html、css 和 JavaScript 等一系列写网站需要的东西，时间要求又比较紧张，没有办法细致地从头学起，真是让我很头疼。磕磕碰碰地直接从网页模板开始改，遇到啥问题就直接查解决方案，最后总算是搞出了一个粗糙的网站。各种东西都是一知半懂的状态，终究也不敢说是学会了，待我有空了，我再系统地学习一下这些技术吧。</p>
<p>暑假里，用着学校的无人机对学校进行了航拍。无人机这个东西吧，这几年越来越热门了，应用到了各种领域。当然啦，我也就体验一下也就满足了，我也没什么需求，关键是买不起。等有钱了，买个大疆的 Mavic 系列一定很不错。</p>
<p>在这一年中，我偶然间听人提起过 raspberry pi，说这是一个有趣的玩意，可以用来做不少事情，适合折腾。我这样一个喜欢折腾的人最喜欢这种小玩意了，我查了一下，偶哟都出到第三代了。对我这样一个穷学生来说，这个玩具还是挺贵的，我咬咬牙还是买了。最终似乎我也没有拿它来干很多有意义的事，就尝试了一些大佬们已经玩过的有趣花样。现在先摆在一边吧，等我想到拿它来做什么再说吧。</p>
<p>在这一年里，我学习了不少重要的专业课，这都是未来发展的重要基础，再此我就不多说了。</p>
<p>这一年中，我还养成了两个坑爹费钱的坏习惯，一个是买 VPS，一个是买游戏。仔细看了一下，其实两个差不多嘛，看见便宜的打折的就想买，然后吃灰（滑稽）。在 VPS 这方面，我还算及时收手，现阶段还有两个大流量 VPS 和一个大容量存储 VPS 在手，emmm，大概还不算多吧，我一定不会再剁手了。游戏嘛，我觉得我立 flag 也没用啊，收不住手啊，看见喜欢的游戏打折了，怎么能握得住钱包？每次翻看库存都有新发现，原来我还有这个游戏啊（滑稽）。</p>
<p>新的一年里，我希望我能多看点书，多学点东西；我想多省点钱，多减点肥。也不多说，我感觉这都完不成，新年暂时就先这点展望吧。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>总结回顾</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vue中使用CodeMirror实现编写JSON编辑器</title>
    <url>/posts/3/</url>
    <content><![CDATA[<p>最近写了个 JSON 编辑器给自己用，用 CodeMirror 来实现代码编辑器的功能，这边来记录下。</p>
<span id="more"></span>
<h2 id="安装依赖">安装依赖</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save codemirror</span><br><span class="line">npm install --save jsonlint-mod</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add codemirror</span><br><span class="line">yarn add jsonlint-mod</span><br></pre></td></tr></table></figure>
<h2 id="代码">代码</h2>
<p>这边用的环境时 <code>Vue 3 + Vite 2</code></p>
<p><strong>要点:</strong></p>
<ul>
<li>不要将准备被渲染的 textarea 标签放在 template 顶层，在 vue 组件 unbind 时，由 CodeMirror 添加的 DOM 无法自动被移除。</li>
<li>根据需要引入对应的样式和 js</li>
<li>JSON 编辑器的 lint 需要引入外部插件<code>jsonlint-mod</code>，不要直接使用<code>jsonlint</code>，不支持通过 import 导入</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;codePanel&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ref</span>=<span class="string">&quot;codemirror&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 引入CodeMirror和基础样式</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CodeMirror <span class="keyword">from</span> <span class="string">&quot;codemirror&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/lib/codemirror.css&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// JSON代码高亮需要由JavaScript插件支持</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/mode/javascript/javascript.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 选择IDEA主题样式，还有其他很多主题可选</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/theme/idea.css&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 支持使用Sublime快捷键</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/keymap/sublime.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 搜索功能的依赖</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/dialog/dialog.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/dialog/dialog.css&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 支持搜索功能</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/search/search&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/search/searchcursor.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 支持各种代码折叠</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/foldgutter.css&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/foldcode.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/foldgutter.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/brace-fold.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/comment-fold.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 支持代码区域全屏功能</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/display/fullscreen.css&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/display/fullscreen.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 支持括号自动匹配</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/edit/matchbrackets.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/edit/closebrackets.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 支持代码自动补全</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/hint/show-hint.css&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/hint/show-hint.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/hint/anyword-hint.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 行注释</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/comment/comment.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// JSON错误检查</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/lint/lint.css&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/lint/lint.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 需要依赖全局的jsonlint，不是很优雅</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/lint/json-lint.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 引入jsonlint</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> jsonlint <span class="keyword">from</span> <span class="string">&quot;jsonlint-mod&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.jsonlint = jsonlint;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> codemirror;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;JSON编辑器&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">code</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;),</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 防止转为监听对象，vue3中如果CodeMirror对象被转为监听对象，会无法正常使用</span></span></span><br><span class="line"><span class="javascript">      codemirror = markRaw(</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 用ref获取需要渲染的textarea的DOM</span></span></span><br><span class="line"><span class="javascript">        CodeMirror.fromTextArea(<span class="built_in">this</span>.$refs.codemirror, &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// JS高亮显示</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">mode</span>: <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">indentUnit</span>: <span class="number">2</span>, <span class="comment">// 缩进单位，默认2</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">smartIndent</span>: <span class="literal">true</span>, <span class="comment">// 是否智能缩进</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 显示行号</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">styleActiveLine</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">lineNumbers</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 设置主题</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">theme</span>: <span class="string">&quot;idea&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 绑定sublime快捷键</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">keyMap</span>: <span class="string">&quot;sublime&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 开启代码折叠</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">lineWrapping</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">foldGutter</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">gutters</span>: [</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;CodeMirror-linenumbers&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;CodeMirror-foldgutter&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;CodeMirror-lint-markers&quot;</span>,</span></span><br><span class="line"><span class="javascript">          ],</span></span><br><span class="line"><span class="javascript">          <span class="comment">// CodeMirror-lint-markers是实现语法报错功能</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">lint</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 全屏模式</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">fullScreen</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 括号匹配</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">matchBrackets</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">autoCloseBrackets</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 额外快捷键</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">extraKeys</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">F11</span>: <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              cm.setOption(<span class="string">&quot;fullScreen&quot;</span>, !cm.getOption(<span class="string">&quot;fullScreen&quot;</span>));</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">Esc</span>: <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span> (cm.getOption(<span class="string">&quot;fullScreen&quot;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">                cm.setOption(<span class="string">&quot;fullScreen&quot;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">              &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">      );</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 将编辑器中的值存储下来</span></span></span><br><span class="line"><span class="javascript">      codemirror.on(<span class="string">&quot;change&quot;</span>, <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.code = cm.getValue();</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUnmount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.destroy();</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">destroy</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取代表编辑器的DOM</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> element = codemirror.doc.cm.getWrapperElement();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 删除编辑器实例</span></span></span><br><span class="line"><span class="javascript">        element &amp;&amp; element.remove &amp;&amp; element.remove();</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>应用</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
        <tag>CodeMirror</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex数据持久化</title>
    <url>/posts/4/</url>
    <content><![CDATA[<p>众所周知，Vuex 的数据是存储在内存中的，刷新一下网页这些数据就会丢失。而有些数据我们希望刷新后仍然能够留存，这就需要把数据存储下来。这里就记录一下，使用 localStorage 来持久化 Vuex 中的数据。</p>
<span id="more"></span>
<h2 id="实现思路">实现思路</h2>
<ol>
<li>因为 state 中的数据理论上只能通过 mutation 来进行更新，所以可以监听 mutation 事件，在每次事件执行后，将此时整个 state 的数据转为字符串后存储进 localStorage。</li>
<li>在页面初始化 state 时，读取 localStorage 值，重新转为 JSON 后，合并进当前 state。</li>
<li>这种方法只是一个简单的实现，只适用于简单对象，对复杂对象来说，重新转为 JSON 可能会失去对应的事件和方法，后面可以考虑以其他方式存储。</li>
</ol>
<h2 id="代码">代码</h2>
<p>插件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (options = &#123;&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> storage = options.storage || (<span class="built_in">window</span> &amp;&amp; <span class="built_in">window</span>.localStorage);</span><br><span class="line">  <span class="keyword">const</span> key = options.key || <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取state的值</span></span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function">(<span class="params">key, storage</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = storage.getItem(key);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value !== <span class="string">&quot;undefined&quot;</span> ? <span class="built_in">JSON</span>.parse(value) : <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置state的值</span></span><br><span class="line">  <span class="keyword">const</span> setState = <span class="function">(<span class="params">key, state, storage</span>) =&gt;</span></span><br><span class="line">    storage.setItem(key, <span class="built_in">JSON</span>.stringify(state));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">store</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化时获取数据，如果有的话，把原来的vuex的state替换掉</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(store.state, getState(key, storage));</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      store.replaceState(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅 store 的 mutation。handler 会在每个 mutation 完成后调用，接收 mutation 和经过 mutation 后的状态作为参数</span></span><br><span class="line">    store.subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">      setState(key, state, storage);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>调用方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VuexPersist <span class="keyword">from</span> <span class="string">&quot;@/plugins/VuexPersist&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [VuexPersist()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>奥利奥生成器与Canvas绘制图片不显示问题</title>
    <url>/posts/5/</url>
    <content><![CDATA[<p>最近尝试在 Vue 中实现奥利奥生成器的效果，遇到使用 Canvas 的 drawImage 方法绘制图片不显示的问题，在此记录下解决过程。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>欢迎体验</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pc3p5Lnh5ei9vdGhlcnMvb3Jlb29v">奥利奥生成器<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20210523144733.png" alt=""><img data-src="https://img.iszy.xyz/20210523144706.png" alt=""></p>
<h2 id="实现思路">实现思路</h2>
<p>奥利奥的原理，就是根据不同的字符串组合，对应不同的图片，然后按顺序将图片绘制到 canvas 上，最终生成图片。</p>
<p>canvas 的 drawImage 有几种用法。</p>
<ul>
<li>在画布上定位图像: <code>ctx.drawImage(img,x,y);</code></li>
<li>在画布上定位图像，并规定图像的宽度和高度: <code>ctx.drawImage(img,x,y,width,height);</code></li>
<li>剪切图像，并在画布上定位被剪切的部分: <code>ctx.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</code></li>
</ul>
<p>我们这里只需要使用第二种方法，控制下图片的大小即可。</p>
<p>参数值</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>img</td>
<td>规定要使用的图像、画布或视频。</td>
</tr>
<tr>
<td>sx 可选。</td>
<td>开始剪切的 x 坐标位置。</td>
</tr>
<tr>
<td>sy 可选。</td>
<td>开始剪切的 y 坐标位置。</td>
</tr>
<tr>
<td>swidth 可选。</td>
<td>被剪切图像的宽度。</td>
</tr>
<tr>
<td>sheight 可选。</td>
<td>被剪切图像的高度。</td>
</tr>
<tr>
<td>x</td>
<td>在画布上放置图像的 x 坐标位置。</td>
</tr>
<tr>
<td>y</td>
<td>在画布上放置图像的 y 坐标位置。</td>
</tr>
<tr>
<td>width 可选。</td>
<td>要使用的图像的宽度（伸展或缩小图像）。</td>
</tr>
<tr>
<td>height 可选。</td>
<td>要使用的图像的高度（伸展或缩小图像）。</td>
</tr>
</tbody>
</table>
<p>一般情况下，都按照下面的示例来使用。把绘制写到 img 的 onload 事件里，是因为如果图片还没有加载完成，drawImage 是不生效的，这样能够保证图片已经加载完成。不过因为我们需要多次调用同一张图片，绘制多次，这样的方法就不是很方便。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = c.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;scream&quot;</span>);</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.drawImage(img, <span class="number">10</span>, <span class="number">10</span>, <span class="number">150</span>, <span class="number">180</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>于是尝试将加载的图片缓存一下，方便调用，使用的是下面的方法。sources 中是图片名称和图片地址的键值对，使用 Image 对象设置 src 的方式加载图片；在 onload 事件中，记录加载完成的次数；当全部加载完成时，将存储了这些 Image 对象的 cacheImages 对象存储下来以便调用。</p>
<p>在原版 oreooo 的页面中，我可以看到这个方法是有效的。但是我在 Vue 3 + Vite 2 的环境下，虽然 cacheImages 成功存储了，也能在 Networks 里面看到网络请求，但是 canvas 绘制出来的图形一直是空白的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loadImages: <span class="function"><span class="keyword">function</span> (<span class="params">sources, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cacheImages = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> attCount = <span class="built_in">Object</span>.getOwnPropertyNames(sources).length;</span><br><span class="line">    <span class="keyword">for</span> (imgItem <span class="keyword">in</span> sources) &#123;</span><br><span class="line">        cacheImages[imgItem] = <span class="keyword">new</span> Image();</span><br><span class="line">        cacheImages[imgItem].onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (index == attCount) &#123;</span><br><span class="line">                images = cacheImages;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                    callback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cacheImages[imgItem].src = sources[imgItem];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或许是需要实际存在的 img 标签才有用，我如果页面上实际就有这个图片，我测试了下，确实就能获取到图片绘制出来了。于是我换了种写法，通过在页面实际加载图片，然后在绘制时获取图片 DOM 的 image，只要图片已经加载完成了，绘制时就能正常出图了。下面是在 Vue 里的一个大概示例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;imgContainer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;assets.O&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;O&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;assets.R&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;R&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;assets.Ob&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;Ob&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;output-image&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">&quot;oreo_canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">      您的浏览器不支持 HTML5 canvas 标签。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> O <span class="keyword">from</span> <span class="string">&quot;./assets/image/O.png&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> R <span class="keyword">from</span> <span class="string">&quot;./assets/image/R.png&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Ob <span class="keyword">from</span> <span class="string">&quot;./assets/image/Ob.png&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">assets</span>: &#123;</span></span><br><span class="line"><span class="javascript">        O,</span></span><br><span class="line"><span class="javascript">        R,</span></span><br><span class="line"><span class="javascript">        Ob,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;),</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">generateImage</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> canvas = <span class="built_in">this</span>.$refs.oreo_canvas;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="javascript">        ctx.drawImage(<span class="built_in">this</span>.$refs.O.image, <span class="number">0</span>, <span class="number">0</span>, <span class="number">240</span>, <span class="number">160</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.imgContainer</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p>Canvas 的 drawImage 在图片还未加载完成时是不会生效的，由于这个特性，需要保证在调用 drawImage 时图片已经加载完成，否则就会有不显示的现象。解决的方案有下面两种。</p>
<ul>
<li>将 drawImage 事件写在图片的 onload 事件中，这样可以保证图片已经加载。</li>
<li>可以在页面上写上 img 标签实际加载图片，然后 drawImage 时调用 img 的 DOM 下的 image 属性进行绘制。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>应用</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>给数组原型对象添加方法</title>
    <url>/posts/6/</url>
    <content><![CDATA[<p>今天使用<code>for...in</code>方法的时候发现枚举到了意料之外的<code>prototype</code>内的方法，发现是没有正确为数组原型对象添加方法，在此记录。</p>
<span id="more"></span>
<h2 id="问题">问题</h2>
<p>一般我们如何给一个数组原型对象添加方法呢，比如我们添加一个去重方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = &#123;&#125;,</span><br><span class="line">    r = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!n[<span class="built_in">this</span>[i]]) &#123;</span><br><span class="line">      n[<span class="built_in">this</span>[i]] = <span class="literal">true</span>;</span><br><span class="line">      r.push(<span class="built_in">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我看不少文章里这样就好了，这就会出现我刚刚说到的问题。在你使用<code>for...in</code>方法遍历数组时就会拿到<code>unique</code>这个 key 值，这个是不符合我们预期的。</p>
<p>其实出现这样的情况是因为<code>Array.prototype</code>对象的<code>unique</code>属性的描述值<code>enumerable</code>为<code>true</code>，也就是可枚举，在枚举对象属性时会被枚举到（<code>for...in</code>或<code>Object.keys</code>方法）。</p>
<p>根据<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9FbnVtZXJhYmlsaXR5X2FuZF9vd25lcnNoaXBfb2ZfcHJvcGVydGllcw==">MDN Web Docs<i class="fa fa-external-link-alt"></i></span>说明，可枚举属性是指那些内部 <code>可枚举</code> 标志设置为 <code>true</code> 的属性，对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 <code>true</code>，对于通过 <code>Object.defineProperty</code> 等定义的属性，该标识值默认为 <code>false</code>。可枚举的属性可以通过 <code>for...in</code> 循环进行遍历（除非该属性名是一个 <code>Symbol</code>）。</p>
<h2 id="解决">解决</h2>
<p>正确的方法如下，忽略方法内容。</p>
<h3 id="方法一">方法一</h3>
<p>先添加方法，再通过 <code>Object.defineProperty</code> 设置为不可枚举。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Array</span>.prototype, <span class="string">&quot;unique&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="方法二">方法二</h3>
<p>或者直接通过 <code>Object.defineProperty</code> 方法添加。此时<code>enumerable</code>默认为<code>false</code>，不用特别指定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Array</span>.prototype, <span class="string">&quot;unique&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>解决ElasticSearch查询记录超过10000时的异常</title>
    <url>/posts/6x5bzj/</url>
    <content><![CDATA[<p>最近遇到使用 ElasticSearch 做分页查询时，前面的页码都正常，后面的页码就会 500 错误的问题，一度怀疑是接口页码算错了。后来想起 ES 有个 10000 条数据的限制，默认返回数据量为 10000 条，超过的话就会报错。这里记录下解决办法。</p>
<span id="more"></span>
<h2 id="异常信息">异常信息</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: ElasticsearchException[Elasticsearch exception [type=illegal_argument_exception, reason=Result window is too large, from + size must be less than or equal to: [10000] but was [10100]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting.]]; nested: ElasticsearchException[Elasticsearch exception [type=illegal_argument_exception, reason=Result window is too large, from + size must be less than or equal to: [10000] but was [10100]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting.]];</span><br></pre></td></tr></table></figure>
<p>从错误信息里面其实已经能看到解决方法了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This limit can be set by changing the [index.max_result_window] index level setting.</span><br></pre></td></tr></table></figure>
<h2 id="解决办法">解决办法</h2>
<ol>
<li>
<p>修改配置文件(需要重启 ES 服务)</p>
<p>修改 ES 配置文件<code>config/elasticsearch.yml</code>，在文件末尾添加一行:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">max_result_window:</span> <span class="number">200000000</span></span><br></pre></td></tr></table></figure>
<p>在 5.x 版本以上的 ES 中已经不再支持。</p>
<p><img data-src="https://img.iszy.xyz/20210226173324.png?x-oss-process=style/big" alt=""></p>
</li>
<li>
<p>通过接口修改索引的配置(推荐)</p>
<p>修改 max_result_window 设置的最大索引值，注意以 put 方式提交。这种方式只能对每个 index 单独开启，毕竟也不是每个索引都需要返回那么大数据量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://localhost:9200/my_index/_settings?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> &quot;index&quot;:&#123;</span></span><br><span class="line"><span class="string">     &quot;max_result_window&quot;:200000000</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>NestJS 实践记录（一）：项目创建</title>
    <url>/posts/7/</url>
    <content><![CDATA[<p>最近想写一些功能接口给自己用，平常写前端比较多，我自己可怜的小服务器用 java 资源不是很充足，所以准备还是用 Node.js 来实现后端，选用 NestJS 作为本次开发的后端框架。</p>
<span id="more"></span>
<blockquote>
<p>Nest (NestJS) 是一个用于构建高效、可扩展的 Node.js 服务器端应用程序的开发框架。它利用 JavaScript 的渐进增强的能力，使用并完全支持 TypeScript （仍然允许开发者使用纯 JavaScript 进行开发），并结合了 OOP （面向对象编程）、FP （函数式编程）和 FRP （函数响应式编程）。</p>
<p>在底层，Nest 构建在强大的 HTTP 服务器框架上，例如 Express （默认），并且还可以通过配置从而使用 Fastify ！</p>
<p>Nest 在这些常见的 Node.js 框架 (Express/Fastify) 之上提高了一个抽象级别，但仍然向开发者直接暴露了底层框架的 API。这使得开发者可以自由地使用适用于底层平台的无数的第三方模块。</p>
</blockquote>
<p>NestJS 是我最近才了解到的一个非常流行的 Node.js 框架，用起来很有一种在编写 Spring Boot 的熟悉感，又能使用我更加熟悉的 JavaScript 来进行编写，是对我来说比较理想的后端框架。在此记录下实践的过程。</p>
<h2 id="项目创建">项目创建</h2>
<p>本机环境：</p>
<ul>
<li>Node.js: 14.17.0</li>
<li>npm: 7.11.2</li>
<li>NestJS: 8.0.0</li>
<li>TypeScirpt: 4.3.5</li>
</ul>
<p>在安装好 Node.js 后，在全局安装 <code>NestJS cli</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @nestjs/cli</span><br></pre></td></tr></table></figure>
<p>运行如下命令创建项目，<code>nest-cli</code>会根据参数初始化项目文件。接着会让你选择想用的包管理器，<code>npm</code>或<code>yarn</code>，我选择了<code>yarn</code>，因为我感觉国内即使换了源，<code>yarn</code> 似乎也更快一些。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest new project-name</span><br></pre></td></tr></table></figure>
<p>完成安装后就会显示如下信息。</p>
<p><img data-src="https://img.iszy.xyz/20210724195818.png" alt=""></p>
<p>目录结构可以参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25lc3Rqcy90eXBlc2NyaXB0LXN0YXJ0ZXI=">Nest framework TypeScript starter repository<i class="fa fa-external-link-alt"></i></span>，项目就是基于这个创建的。我们可以看到这个模板使用了 TypeScript 语言，NestJS 也是可以基于 JavaScript 运行的，创建时加上参数配置如下所示即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest new project-name -l JavaScript</span><br></pre></td></tr></table></figure>
<p>更多参数可以参考 cli 的帮助，<code>nest new --help</code>。</p>
<p><img data-src="https://img.iszy.xyz/20210724201411.png" alt=""></p>
<p>运行<code>yarn start</code>后，NestJS 就会开始运行，当显示<code>Nest application successfully started</code>时，即表示启动完成。</p>
<p><img data-src="https://img.iszy.xyz/20210724201050.png" alt=""></p>
<p>此时可以访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDozMDAw">http://localhost:3000<i class="fa fa-external-link-alt"></i></span>，就能看到默认返回的 <code>Hello World!</code> 了。</p>
<p><img data-src="https://img.iszy.xyz/20210724201226.png" alt=""></p>
<h2 id="项目结构">项目结构</h2>
<p>初始项目结构如下，我们主要关注 <code>src</code> 目录</p>
<p><img data-src="https://img.iszy.xyz/20210725123352.png" alt=""></p>
<p>初始内容由一个入口文件 <code>main.ts</code>、用于定义路由的 controller 文件<code>app.controller.ts</code>、用于具体方法实现的 provider 文件 <code>app.service.ts</code>、以及一个将 controller 和 service 文件关联在一起的 module 文件组成。</p>
<p>打开入口文件<code>src/main.ts</code>，内容如下。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&quot;./app.module&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure>
<p>可以看到使用 Nest 工厂函数创建了 <code>AppModule</code>，然后将应用监听到了 3000 端口，现在应用将在 3000 端口接受 HTTP 请求。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&quot;./app.controller&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&quot;./app.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>在根模组 AppModule 中，注册了 AppController 和 AppService。<strong>值得注意的是，provider 需要在 module 中注册后才能为其他 provider 或者 controller 提供服务。</strong></p>
<p>在 AppController 中，添加了默认的 Get 路由 getHello，通过引入的 provider AppService 来实际提供逻辑代码。因为没有指定路由的路径，那就是默认的根路径，也就是我们访问的<code>http://localhost:3000/</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.controller.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&quot;./app.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.appService.getHello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 provider AppService 中，我们可以看到这个<code>getHello</code>方法就是返回了一个<code>Hello World!</code>，也是就我们之前访问<code>http://localhost:3000/</code>看到的内容。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppService</span> </span>&#123;</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里基本可以了解了 NestJS 的设计理念，主要就是由<code>Controller</code>、<code>Provider</code>和<code>Module</code>组成成模组来提供服务。</p>
<ul>
<li>Controller: 控制器，提供 Api 接口，定义路由等，不实际处理业务。</li>
<li>Provider: 也就是<code>Service</code>，为<code>Controller</code>或其他<code>Provider</code>提供服务，在这里编写实际的处理代码。</li>
<li>Module: 负责连接<code>Provider</code>和<code>Controller</code>，类似于命名空间的概念，在同一个<code>Module</code>中注册过的 <code>Provider</code>才能引入并提供服务。</li>
</ul>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>NestJS</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>八数码问题宽度优先算法</title>
    <url>/posts/8-puzzle-problem-breadth-first/</url>
    <content><![CDATA[<p>作业做到八数码问题，在此记录一下我的宽度优先算法的实现。</p>
<span id="more"></span>
<h2 id="问题描述">问题描述</h2>
<p>3×3 九宫格，放置 1 到 8 的 8 个数和一个空格，通过向空格的移动数字来改变九宫格的布局，最终达到目标状态。</p>
<p>要求：根据给定初始状态和目标状态，如何移动才能从初始状态到达目标状态。</p>
<h2 id="功能设计">功能设计</h2>
<ul>
<li>宽度优先，open 表先进先出，采用队列实现，可以将 open 表和 close 表简化为同一张表。</li>
<li>约束条件是不能将空格移出九宫格。</li>
<li>只能前进，不允许后退。</li>
</ul>
<h2 id="步骤">步骤</h2>
<ol>
<li>初始状态存入 open 表</li>
<li>若 open 表为空，则无解</li>
<li>若 open 表不为空，open 表头移入 close 表</li>
<li>扩展该节点并存入 open 表，如果有目标节点，则结束。</li>
<li>没有目标节点，则转到 2。</li>
</ol>
<h2 id="程序设计">程序设计</h2>
<h3 id="类声明">类声明</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Node *father;<span class="comment">//父节点</span></span><br><span class="line">    <span class="keyword">int</span> p;<span class="comment">//八数码空白位置</span></span><br><span class="line">    <span class="keyword">int</span> cal;<span class="comment">//操作符</span></span><br><span class="line">    <span class="keyword">int</span> data[<span class="number">9</span>];<span class="comment">//状态数组</span></span><br><span class="line">    Node *next;<span class="comment">//队列下一节点</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> p, <span class="keyword">int</span> cal, <span class="keyword">int</span> d[<span class="number">9</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node* front;<span class="comment">//头指针</span></span><br><span class="line">    Node* open;<span class="comment">//open表指针</span></span><br><span class="line">    Node* close;<span class="comment">//close表指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>();<span class="comment">//队列初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(Node *)</span></span>;<span class="comment">//节点入队</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">()</span></span>;<span class="comment">//open表移入close表，扩展节点</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsEnd</span><span class="params">()</span></span>;<span class="comment">//判断算法终止</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsExist</span><span class="params">(<span class="keyword">int</span> d[<span class="number">9</span>])</span></span>;<span class="comment">//判断状态是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintResult</span><span class="params">()</span></span>;<span class="comment">//打印结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>几个用到的函数声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> target[<span class="number">9</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span> &#125;;<span class="comment">//目标状态</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CanGo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;<span class="comment">//判断操作是否可行</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equal</span><span class="params">(<span class="keyword">int</span> d1[<span class="number">9</span>], <span class="keyword">int</span> d2[<span class="number">9</span>])</span></span>;<span class="comment">//判断状态是否相等</span></span><br></pre></td></tr></table></figure>
<h3 id="函数实现">函数实现</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建节点</span></span><br><span class="line">Node::<span class="built_in">Node</span>(<span class="keyword">int</span> p, <span class="keyword">int</span> cal, <span class="keyword">int</span> d[<span class="number">9</span>]) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;p = p;</span><br><span class="line">    <span class="keyword">this</span>-&gt;cal = cal;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        data[i] = d[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列初始化</span></span><br><span class="line">Queue::<span class="built_in">Queue</span>() &#123;</span><br><span class="line">    front = close = open = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将节点存入open表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Queue::EnQueue</span><span class="params">(Node *n)</span> </span>&#123;</span><br><span class="line">    n-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    n-&gt;father = close;</span><br><span class="line">    open-&gt;next = n;</span><br><span class="line">    open = n;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一次运算</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Queue::DeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断算法是否结束，未结束则将open表开头移入close表</span></span><br><span class="line">    <span class="keyword">if</span> (close-&gt;next) &#123;</span><br><span class="line">        close = close-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拓展节点并存入open表</span></span><br><span class="line">    <span class="keyword">int</span> p = close-&gt;p;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CanGo</span>(p, <span class="number">1</span>)) &#123;</span><br><span class="line">        Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(p - <span class="number">1</span>, <span class="number">1</span>, close-&gt;data);</span><br><span class="line">        n-&gt;data[p - <span class="number">1</span>] = n-&gt;data[p - <span class="number">2</span>]; n-&gt;data[p - <span class="number">2</span>] = <span class="number">0</span>;<span class="comment">//移动空白位置</span></span><br><span class="line">        <span class="comment">//判断是否为目标</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">equal</span>(n-&gt;data, target)) &#123;</span><br><span class="line">            <span class="built_in">EnQueue</span>(n);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不存在则入队</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">IsExist</span>(n-&gt;data)) <span class="built_in">EnQueue</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CanGo</span>(p, <span class="number">2</span>)) &#123;</span><br><span class="line">        Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(p - <span class="number">3</span>, <span class="number">2</span>, close-&gt;data);</span><br><span class="line">        n-&gt;data[p - <span class="number">1</span>] = n-&gt;data[p - <span class="number">4</span>]; n-&gt;data[p - <span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">equal</span>(n-&gt;data, target)) &#123;</span><br><span class="line">            <span class="built_in">EnQueue</span>(n);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">IsExist</span>(n-&gt;data)) <span class="built_in">EnQueue</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CanGo</span>(p, <span class="number">3</span>)) &#123;</span><br><span class="line">        Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(p + <span class="number">3</span>, <span class="number">3</span>, close-&gt;data);</span><br><span class="line">        n-&gt;data[p - <span class="number">1</span>] = n-&gt;data[p + <span class="number">2</span>]; n-&gt;data[p + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">equal</span>(n-&gt;data, target)) &#123;</span><br><span class="line">            <span class="built_in">EnQueue</span>(n);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">IsExist</span>(n-&gt;data)) <span class="built_in">EnQueue</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CanGo</span>(p, <span class="number">4</span>)) &#123;</span><br><span class="line">        Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(p + <span class="number">1</span>, <span class="number">4</span>, close-&gt;data);</span><br><span class="line">        n-&gt;data[p - <span class="number">1</span>] = n-&gt;data[p]; n-&gt;data[p] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">equal</span>(n-&gt;data, target)) &#123;</span><br><span class="line">            <span class="built_in">EnQueue</span>(n);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">IsExist</span>(n-&gt;data)) <span class="built_in">EnQueue</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断算法是否终止，如果open表为空，说明没有解法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::IsEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (close == open) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历表，判断状态是否存在过</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::IsExist</span><span class="params">(<span class="keyword">int</span> d[<span class="number">9</span>])</span> </span>&#123;</span><br><span class="line">    Node* tmp = front;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        tmp = tmp-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">equal</span>(tmp-&gt;data, d)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (tmp-&gt;next);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Queue::PrintResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node* tmp = open;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; tmp-&gt;data[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (tmp-&gt;father-&gt;p &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = tmp-&gt;father;</span><br><span class="line">        cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;\t/\\&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;\t||&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            cout &lt;&lt; tmp-&gt;data[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断操作是否可行</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CanGo</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> cal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cal == <span class="number">1</span> &amp;&amp; p != <span class="number">1</span> &amp;&amp; p != <span class="number">4</span> &amp;&amp; p != <span class="number">7</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (cal == <span class="number">2</span> &amp;&amp; p != <span class="number">1</span> &amp;&amp; p != <span class="number">2</span> &amp;&amp; p != <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (cal == <span class="number">3</span> &amp;&amp; p != <span class="number">7</span> &amp;&amp; p != <span class="number">8</span> &amp;&amp; p != <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (cal == <span class="number">4</span> &amp;&amp; p != <span class="number">3</span> &amp;&amp; p != <span class="number">6</span> &amp;&amp; p != <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断两个数组是否完全相等，用于判断八数码状态是否经历过</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equal</span><span class="params">(<span class="keyword">int</span> d1[<span class="number">9</span>], <span class="keyword">int</span> d2[<span class="number">9</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d1[i] != d2[i]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="主函数">主函数</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">9</span>] = &#123; <span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">5</span> &#125;;<span class="comment">//初始状态</span></span><br><span class="line">    <span class="keyword">int</span> success = <span class="number">0</span>;<span class="comment">//结果标志</span></span><br><span class="line">    Node* f = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">8</span>, <span class="number">-1</span>, d);<span class="comment">//建立初始节点</span></span><br><span class="line">    Queue table;<span class="comment">//新建链表</span></span><br><span class="line">    table.<span class="built_in">EnQueue</span>(f);<span class="comment">//将起始节点放入open表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当open表不为空，则继续运算</span></span><br><span class="line">    <span class="keyword">while</span> (!table.<span class="built_in">IsEnd</span>()) &#123;</span><br><span class="line">        success = table.<span class="built_in">DeQueue</span>();</span><br><span class="line">        <span class="keyword">if</span> (success == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (success == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (success == <span class="number">1</span>) table.<span class="built_in">PrintResult</span>();<span class="comment">//打印节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No result!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);<span class="comment">//按任意键退出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现效果">实现效果</h3>
<p><img data-src="https://img.iszy.xyz/20190318211228.png" alt=""></p>
<h2 id="后话">后话</h2>
<p>程序不太好看，仅仅满足实现，欢迎指正。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>自用GeoJSON工具</title>
    <url>/posts/8/</url>
    <content><![CDATA[<p>平常遇到 GeoJSON 都喜欢去 <span class="exturl" data-url="aHR0cHM6Ly9nZW9qc29uLmlv">GeoJSON.IO<i class="fa fa-external-link-alt"></i></span> 上看一下数据，是 Mapbox 做的，功能还挺好用的。不过这个网站不开代理有时候速度还是挺慢的，我正好在写小工具集合，何不自己写一个呢。</p>
<span id="more"></span>
<h2 id="成果">成果</h2>
<p>欢迎体验</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pc3p5Lnh5ei9naXMvZ2VvanNvbg==">GeoJSON-ISZY 工具集合<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20210903134058.png?x-oss-process=style/big" alt="GeoJSON-ISZY 工具集合"></p>
<h2 id="功能">功能</h2>
<p>当然，自己看过 <span class="exturl" data-url="aHR0cDovL0dlb0pTT04uSU8=">GeoJSON.IO<i class="fa fa-external-link-alt"></i></span> 这个网站后呢，可以发现虽然看着挺简单的页面，功能还不少呢。我决定先做个比较基础的，包含以下功能，先能用再说。</p>
<ul>
<li>界面由 Leaflet 地图窗口和 JSON 编辑器组成</li>
<li>底图，默认使用高德街道底图，天地图个人 token 每日访问次数有限
<ul>
<li>高德街道底图</li>
<li>高德影像底图</li>
<li>天地图街道底图</li>
<li>天地图影像底图</li>
<li>天地图地形底图</li>
<li>OpenStreetMap 街道底图</li>
</ul>
</li>
<li>支持在 JSON 编辑器输入 GeoJSON 后将 GeoJSON 添加到地图上
<ul>
<li>在 JSON 编辑器输入完，编辑器失焦后，尝试解析 GeoJSON 并添加到地图上</li>
<li>在 JSON 编辑器一段时间没有继续输入，但没有失焦的情况下，也尝试解析 GeoJSON 并添加到地图上</li>
</ul>
</li>
<li>支持地图上单个 Feature 图形选择，选择后跳出弹窗展示属性，可编辑，编辑实时同步</li>
<li>通过表格界面展示所有 Feature 的属性表，支持编辑</li>
</ul>
<h2 id="部分说明">部分说明</h2>
<p>使用 Vue 3 开发，有些注意事项记录下。</p>
<ol>
<li>
<p>通过 leaflet-src.esm.js 能够按需导出 leaflet 中的组件，引入 jsoneditor 用于 GeoJSON 输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  map,</span><br><span class="line">  control,</span><br><span class="line">  tileLayer,</span><br><span class="line">  layerGroup,</span><br><span class="line">  geoJSON,</span><br><span class="line">  GeoJSON,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;leaflet/dist/leaflet-src.esm.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> JSONEditor <span class="keyword">from</span> <span class="string">&quot;jsoneditor&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;jsoneditor/dist/jsoneditor.min.css&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>初始化的 <code>map 对象</code>和 <code>JSONEditor 对象</code>如果要存入 data，需要使用 <code>markRaw</code> 标记不监听。</p>
</li>
<li>
<p>勿把经过代理的 <code>Layer 对象</code>直接加入图层控制组件，否则不能成功销毁 <code>map 对象</code>，可以通过以下方法规避。</p>
<ul>
<li>在销毁 <code>map 对象</code>前提前将该图层移出地图</li>
<li>在将 <code>Layer 对象</code>存入 data 前，使用 <code>markRaw</code> 标记不监听</li>
<li>如果需要监听该 <code>Layer 对象</code>变化，可以将监听后的对象用 <code>toRaw</code>方法转出未监听版本加入图层控制</li>
<li>在组件 beforeUnmount 时销毁对应的 <code>map 对象</code>和 <code>JSONEditor 对象</code>，这样会清除页面上的 DOM 和监听事件</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
        <tag>GIS</tag>
        <tag>GeoJSON</tag>
      </tags>
  </entry>
  <entry>
    <title>经纬度定位工具</title>
    <url>/posts/9/</url>
    <content><![CDATA[<p>我有个朋友有经纬度定位的需求，正好前几天做了个 GeoJSON 工具给自己用，部分内容可以直接用上，就准备自己做一个，应该能比网上的界面更加清爽舒服一些。</p>
<span id="more"></span>
<h2 id="成果">成果</h2>
<p>欢迎体验</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pc3p5Lnh5ei9naXMvbGF0TG5n">经纬度查询-ISZY 工具集合<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20210903134509.png?x-oss-process=style/big" alt="经纬度查询-ISZY 工具集合"></p>
<h2 id="功能">功能</h2>
<ul>
<li>界面由 Leaflet 地图窗口和 JSON 编辑器组成</li>
<li>底图，默认使用高德街道底图，天地图个人 token 每日访问次数有限
<ul>
<li>高德街道底图</li>
<li>高德影像底图</li>
<li>天地图街道底图</li>
<li>天地图影像底图</li>
<li>天地图地形底图</li>
<li>OpenStreetMap 街道底图</li>
</ul>
</li>
<li>默认定位到 <code>105N , 35E</code> 感觉地图展示起来好看点，中心点默认弹窗展示中心经纬度。经纬度随着移动地图会实时更新。</li>
<li>如果允许定位，初始会尝试定位到设备所在位置。坐标经过高德接口转换成高德地图所用的火星坐标系</li>
<li>点击地图，会展示点击位置的经纬度。</li>
<li>通过直接输入经纬度，将会在地图进行定位，并调用高德接口查询标准地址。</li>
<li>可以输入结构化地址，查找目标定位。</li>
</ul>
<h2 id="后续">后续</h2>
<ol>
<li>考虑支持切换坐标系，火星坐标系和 WGS84 坐标系</li>
<li>考虑将高德瓦片做偏移，矫正到 WGS84 坐标系</li>
</ol>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
        <tag>GIS</tag>
      </tags>
  </entry>
  <entry>
    <title>道格拉斯—普克法</title>
    <url>/posts/Douglas-Peucker-algorithm/</url>
    <content><![CDATA[<h2 id="算法描述">算法描述</h2>
<p>道格拉斯-普克算法(Douglas–Peucker algorithm，亦称为拉默-道格拉斯-普克算法、迭代适应点算法、分裂与合并算法)是将曲线近似表示为一系列点，并减少点的数量的一种算法。它的优点是具有平移和旋转不变性，给定曲线与阈值后，抽样结果一定。</p>
<span id="more"></span>
<h2 id="思路">思路</h2>
<ul>
<li>首先，将一条曲线首末点连一条直线</li>
<li>求出其余各点到该直线的距离</li>
<li>选其最大者与规定的临界值相比较
<ul>
<li>若大于临界值，则离该直线距离最大的点保留</li>
<li>否则将直线两端间各点全部舍去</li>
</ul>
</li>
</ul>
<p><img data-src="https://img.iszy.xyz/20190318212807.png" alt=""></p>
<h2 id="要求">要求</h2>
<ol>
<li>根据道格拉斯一普克法，编写程序对经过兰勃特投影的中国版图数据进行抽稀处理 （不限语言）</li>
<li>屏幕绘图显示压缩前后的地图数据</li>
<li>数据压缩率为 50%</li>
</ol>
<h2 id="代码">代码</h2>
<p>Github 库地址:<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL0RvdWdsYXNQZXVja2Vy">https://github.com/ZvonimirSun/DouglasPeucker<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 道格拉斯_普克法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">DouglasPeucker</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DouglasPeucker</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">struct</span> Point</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> x &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> y &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">bool</span> existance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 道格拉斯普拉格压缩算法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Compress</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">List</span>&lt;<span class="title">Point</span>[]&gt; lineList</span> = <span class="keyword">new</span> List&lt;Point[]&gt;();</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">double</span> e;<span class="comment">// 误差限制</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 运行算法</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;filePath&quot;&gt;</span>文档路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;outPath&quot;&gt;</span>输出路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Compress</span>(<span class="params"><span class="built_in">string</span> filePath, <span class="built_in">string</span> outPath, <span class="built_in">double</span> e</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.e = e;</span><br><span class="line">                readFile(filePath);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; lineList.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    compressFile(<span class="number">1</span>, (<span class="built_in">int</span>)lineList[i][<span class="number">0</span>].x, i);</span><br><span class="line">                &#125;</span><br><span class="line">                writeFile(outPath);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 读取文档</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;P&quot;&gt;</span>文档所在路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">readFile</span>(<span class="params"><span class="built_in">string</span> P</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line">                    StreamReader sr = <span class="keyword">new</span> StreamReader(P);</span><br><span class="line">                    Point[] pointList = <span class="keyword">new</span> Point[<span class="number">1000</span>];</span><br><span class="line">                    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!sr.EndOfStream)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 按行读取文件</span></span><br><span class="line">                        <span class="built_in">string</span> line = sr.ReadLine();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 判断是否为线的开始</span></span><br><span class="line">                        <span class="built_in">int</span> temp;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">int</span>.TryParse(line, <span class="keyword">out</span> temp))</span><br><span class="line">                        &#123;</span><br><span class="line">                            pointList = <span class="keyword">new</span> Point[<span class="number">1000</span>];</span><br><span class="line">                            count = <span class="number">0</span>;</span><br><span class="line">                            flag = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 判断结尾</span></span><br><span class="line">                        <span class="keyword">if</span> (line == <span class="string">&quot;END&quot;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 线的结束</span></span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                pointList[<span class="number">0</span>].x = count;</span><br><span class="line"></span><br><span class="line">                                lineList.Add(pointList);</span><br><span class="line">                                flag = <span class="number">0</span>;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 如果不是开头或结尾，则读取点</span></span><br><span class="line">                        <span class="built_in">string</span>[] p = line.Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                        count++;</span><br><span class="line">                        pointList[count].x = <span class="built_in">double</span>.Parse(p[<span class="number">0</span>]);</span><br><span class="line">                        pointList[count].y = <span class="built_in">double</span>.Parse(p[<span class="number">1</span>]);</span><br><span class="line">                        pointList[count].existance = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch</span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 压缩算法</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FirstPoint&quot;&gt;</span>线的开始节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;LastPoint&quot;&gt;</span>线的结束节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span>线的索引<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">compressFile</span>(<span class="params"><span class="built_in">int</span> FirstPoint, <span class="built_in">int</span> LastPoint, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">double</span> max = <span class="number">0</span>;<span class="comment">// 记录最大距离</span></span><br><span class="line">                <span class="built_in">int</span> FarthestPoint = <span class="number">0</span>;<span class="comment">// 记录最远节点</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果只剩两个节点则退出</span></span><br><span class="line">                <span class="keyword">if</span> ((LastPoint - FirstPoint) &gt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 判断是否为环路</span></span><br><span class="line">                    <span class="keyword">if</span> (lineList[index][FirstPoint].x == lineList[index][LastPoint].x &amp;&amp; lineList[index][FirstPoint].y == lineList[index][LastPoint].y)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> mid = (<span class="built_in">int</span>)((FirstPoint + LastPoint) / <span class="number">2</span>);<span class="comment">// 拆分环路</span></span><br><span class="line">                        compressFile(FirstPoint, mid, index);</span><br><span class="line">                        compressFile(mid, LastPoint, index);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 寻找最大距离</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = FirstPoint + <span class="number">1</span>; i &lt; LastPoint; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">double</span> temp = pointToLineDistance(lineList[index][FirstPoint], lineList[index][LastPoint], lineList[index][i]);</span><br><span class="line">                        <span class="keyword">if</span> (temp &gt; max)</span><br><span class="line">                        &#123;</span><br><span class="line">                            max = temp;</span><br><span class="line">                            FarthestPoint = i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 根据界限判断是否压缩</span></span><br><span class="line">                    <span class="keyword">if</span> (max &lt;= e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> i = FirstPoint + <span class="number">1</span>; i &lt; LastPoint; i++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            lineList[index][i].existance = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        compressFile(FirstPoint, FarthestPoint, index);</span><br><span class="line">                        compressFile(FarthestPoint, LastPoint, index);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 输出压缩后的文件</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;P&quot;&gt;</span>输出路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">writeFile</span>(<span class="params"><span class="built_in">string</span> P</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    StreamWriter sw = <span class="keyword">new</span> StreamWriter(File.Open(P, FileMode.Create));</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; lineList.Count; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        sw.WriteLine(i + <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= lineList[i][<span class="number">0</span>].x; j++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (lineList[i][j].existance)</span><br><span class="line">                            &#123;</span><br><span class="line">                                sw.Write(<span class="string">&quot;&#123;0&#125;,&#123;1&#125;&quot;</span>, lineList[i][j].x, lineList[i][j].y);</span><br><span class="line">                                sw.WriteLine();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        sw.WriteLine(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sw.WriteLine(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">                    sw.Close();</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                catch</span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 计算点到线的距离</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;A&quot;&gt;</span>直线的一个端点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;B&quot;&gt;</span>直线的另一个端点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;P&quot;&gt;</span>需要计算距离的点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回距离<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">            <span class="function"><span class="built_in">double</span> <span class="title">pointToLineDistance</span>(<span class="params">Point A, Point B, Point P</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">double</span> normalLength = Math.Sqrt((B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y));</span><br><span class="line">                <span class="keyword">return</span> Math.Abs((P.x - A.x) * (B.y - A.y) - (P.y - A.y) * (B.x - A.x)) / normalLength;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 打开文件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnOpen_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (OpenFileDialog OpenFD = <span class="keyword">new</span> OpenFileDialog())     <span class="comment">//实例化一个 OpenFileDialog 的对象</span></span><br><span class="line">            &#123;</span><br><span class="line">                OpenFD.Filter = <span class="string">&quot;Generate Files (*.gen)|*.gen|&quot;</span> + <span class="string">&quot;All files (*.*)|*.*&quot;</span>;</span><br><span class="line">                <span class="comment">//定义打开的默认文件夹位置</span></span><br><span class="line">                OpenFD.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);</span><br><span class="line">                <span class="keyword">if</span> (OpenFD.ShowDialog() == DialogResult.OK)                            <span class="comment">//显示打开本地文件的窗体</span></span><br><span class="line">                &#123;</span><br><span class="line">                    txtFile.Text = OpenFD.FileName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 压缩文件并输出</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCompress_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (txtFile.Text != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (txtE.Text != <span class="string">&quot;&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">double</span> temp;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">double</span>.TryParse(txtE.Text, <span class="keyword">out</span> temp))</span><br><span class="line">                    &#123;</span><br><span class="line">                        SaveFileDialog sfd = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">                        sfd.Filter = <span class="string">&quot;Generate Files (*.gen)|*.gen|&quot;</span> + <span class="string">&quot;All files (*.*)|*.*&quot;</span>;</span><br><span class="line">                        sfd.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);</span><br><span class="line">                        <span class="keyword">if</span> (sfd.ShowDialog() == DialogResult.OK)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Compress c = <span class="keyword">new</span> Compress(txtFile.Text, sfd.FileName, temp);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        MessageBox.Show(<span class="string">&quot;请输入数字！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;请输入数字！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;请选择文件！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>代码如果存在问题，请一定帮我指正!大神，谢谢了!</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>GIS</tag>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>平面多边形面积计算</title>
    <url>/posts/Flat-Polygon-Area/</url>
    <content><![CDATA[<h2 id="算法描述">算法描述</h2>
<p>在这里实现了对任意平面多边形的面积计算，不适用于有重叠或边互相交叉的情况。</p>
<span id="more"></span>
<h2 id="实现">实现</h2>
<h3 id="窗体设计">窗体设计</h3>
<p><img data-src="https://img.iszy.xyz/20190318213117.png" alt=""></p>
<h3 id="代码">代码</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">area</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Main</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">List</span>&lt;<span class="title">Point</span>&gt; list</span> = <span class="keyword">new</span> List&lt;Point&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnAdd_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (txtX.Text != <span class="string">&quot;&quot;</span> &amp;&amp; txtY.Text != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//插入点</span></span><br><span class="line">                <span class="keyword">if</span> (Int32.TryParse(txtX.Text, <span class="keyword">out</span> <span class="built_in">int</span> x) &amp;&amp; Int32.TryParse(txtY.Text, <span class="keyword">out</span> <span class="built_in">int</span> y))</span><br><span class="line">                &#123;</span><br><span class="line">                    listPoint.BeginUpdate();</span><br><span class="line">                    Point point = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">                    list.Add(point);</span><br><span class="line">                    listPoint.Items.Add(point);</span><br><span class="line">                    listPoint.EndUpdate();</span><br><span class="line"></span><br><span class="line">                    txtX.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    txtY.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    txtX.Focus();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;请输入数字！&quot;</span>);</span><br><span class="line">                    txtX.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    txtY.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    txtX.Focus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCalcu_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (list.Count &gt;= <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将线首加入列表，保证多边形闭合</span></span><br><span class="line">                list.Add(list[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算面积</span></span><br><span class="line">                <span class="built_in">double</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//根据公式进行计算</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.Count - <span class="number">1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    area += (list[i].X +list[i+<span class="number">1</span>].X) * (list[i + <span class="number">1</span>].Y - list[i].Y);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//保证面积为正</span></span><br><span class="line">                area = Math.Abs(area / <span class="number">2</span>);</span><br><span class="line">                txtResult.Text = <span class="string">&quot;面积：&quot;</span> + area.ToString(<span class="string">&quot;0.0&quot;</span>);</span><br><span class="line">                btnAdd.Enabled = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;请添加至少3个点！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnClear_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//清空所有点</span></span><br><span class="line">            list.Clear();</span><br><span class="line">            listPoint.Items.Clear();</span><br><span class="line">            txtX.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            txtY.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            txtResult.Text = <span class="string">&quot;面积：&quot;</span>;</span><br><span class="line">            btnAdd.Enabled = <span class="literal">true</span>;</span><br><span class="line">            txtX.Focus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>GIS</tag>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 git hooks 自动编译 Jekyll</title>
    <url>/posts/Git-hooks-Jekyll/</url>
    <content><![CDATA[<p>其实这项工作我已经完成了几天了，现在在此记录一下。主要就是整理一下在自己的服务器上配置 Jekyll 环境，并利用 git hooks 自动化编译的过程，配置好后就能实现和 Github Pages 上类似的环境。</p>
<span id="more"></span>
<h2 id="起因">起因</h2>
<p>首先来讲一下，我为什么想要折腾这个东西。</p>
<p>最开始，我的博客是放在 Github Pages 上的，但是由于 Github 屏蔽了百度的爬虫，所以挂在 Github Pages 上的博客并不能被百度搜索到，对于一个中文博客来说还是蛮蛋疼的。当然国内的 Coding Pages 也能提供类似的服务，但是最近开始插广告了，于是就不在我的考虑范围内了。</p>
<p>前段时间，我把网站挂在虚拟主机上，但是许多东西都不能自定义，不能完全按照我的心意来，我还是不太满意。后来，我找到了一家价格较为便宜的美西 VPS 服务商，用起来感觉还比较稳定，我记得好像是国人开的，有中文的界面，等我有空写篇推广。</p>
<p>用自己的 VPS 后，我仍然采用和虚拟主机一样的流程，利用免费的宝塔 Linux 面板来管理网站。写完文章后的一般流程就是，先用我本地的 Ubuntu 虚拟机编译网站，然后将生成的站点打包上传到我的服务器上解压出来。但是，我都已经有了自己的 VPS 了，同样是 Linux 系统，我何不直接在服务器上自动编译呢？这样就跟 Github Pages 差不多了，我认为还是相当不错的。正好还有 git hooks 这么有意思的东西，可以帮助我完成这件事情。</p>
<h2 id="步骤">步骤</h2>
<h3 id="配置-Jekyll-环境">配置 Jekyll 环境</h3>
<h4 id="首先我使用-RVM-来安装-ruby">首先我使用 RVM 来安装 ruby</h4>
<p><strong>安装 RVM</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>
<p><strong>安装最新的 ruby 2.4.1</strong></p>
<p>启动 rvm 环境，rvm 安装完成后会有说明。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile.d/rvm.sh</span><br><span class="line">rvm install ruby</span><br></pre></td></tr></table></figure>
<p><strong>安装 Jekyll</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install jekyll</span><br></pre></td></tr></table></figure>
<p><strong>关于其他插件</strong></p>
<p>我不想使用 bundler 来安装，反正只是我个人使用，所以我选择直接安装我的 Jekyll 模板所需的插件。你可以参考你模板中的 Gemfile 文件或 _config.yml 文件中的 plugins。</p>
<p>下面是我这个博客所需的插件，可以参考。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install github-pages</span><br><span class="line">gem install jekyll-github-metadata</span><br><span class="line">gem install rouge</span><br><span class="line">gem install jekyll-paginate</span><br><span class="line">gem install jekyll-sitemap</span><br><span class="line">gem install jekyll-feed</span><br><span class="line">gem install jemoji</span><br></pre></td></tr></table></figure>
<h3 id="配置-git-hooks">配置 git hooks</h3>
<p>进入根目录并新建 Git 裸仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir blog.git &amp;&amp; <span class="built_in">cd</span> blog.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure>
<p>进入 hooks 文件夹，配置 git hooks 脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hooks</span><br><span class="line">vi post-receive</span><br></pre></td></tr></table></figure>
<p>插入如下脚本(注意自行替换相应参数)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash -l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仓库路径</span></span><br><span class="line">GIT_REPO=<span class="variable">$HOME</span>/blog.git</span><br><span class="line"><span class="comment"># 代码暂存路径</span></span><br><span class="line">TMP_GIT_CLONE=<span class="variable">$HOME</span>/tmp/git/blog</span><br><span class="line"><span class="comment"># 生成好的静态博客存放路径(以我的网站地址为例)</span></span><br><span class="line">PUBLIC_WWW=/www/wwwroot/www.iszy.cc</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">jekyll build --<span class="built_in">source</span> <span class="variable">$TMP_GIT_CLONE</span> --destination <span class="variable">$PUBLIC_WWW</span> --incremental</span><br><span class="line"></span><br><span class="line">rm -Rf <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>保存后为文件添加可执行权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>
<h3 id="本地配置">本地配置</h3>
<p>接下来就是为本地的仓库添加远程仓库地址(默认你已经有了本地仓库)。注意更改相应参数，如<code>username</code>、<code>ip</code>、<code>port</code>以及后面的 git 路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add blog ssh://username@ip:port/root/blog.git</span><br></pre></td></tr></table></figure>
<p>将<code>commit</code>推送到远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push blog master</span><br></pre></td></tr></table></figure>
<h2 id="后话">后话</h2>
<p>其实吧，我觉得现在这个情况还不够令人满意，我还需要在本地编辑完了，进行推送。我的理想情况是这样，最好能在我的 VPS 上做一个 panel，能够在线编辑我服务器上的 markdown 文件，然后通过自动化脚本对 Jekyll 进行编译。暂时还不知道怎样实现这个方案，我觉得是可行的，未来如果实现了，我再来补充。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Jekyll</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>跳马算法</title>
    <url>/posts/HorseJump/</url>
    <content><![CDATA[<p>有一 m * n 的棋盘(即棋盘由 m 行和 n 列)，一马放在棋盘中任意位置，马按中国象棋跳法，从初始位置起跳，跳至边界后返回，求所有能返回初始位置的周游路线。</p>
<span id="more"></span>
<h2 id="原理">原理</h2>
<ol>
<li>遍历棋盘</li>
<li>记录路径</li>
<li>到达目标后，打印路径</li>
<li>进行回溯，继续寻找路径</li>
</ol>
<h2 id="代码">代码</h2>
<p>Github 库地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL0hvcnNlSnVtcA==">https://github.com/ZvonimirSun/HorseJump<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 跳马</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Horse</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//记录路径数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> num &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> x0, y0, cx, cy;</span><br><span class="line">        <span class="built_in">int</span>[,] dir = &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">2</span>, <span class="number">1</span> &#125;, &#123; <span class="number">2</span>, <span class="number">-1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">-2</span> &#125;, &#123; <span class="number">-1</span>, <span class="number">-2</span> &#125;, &#123; <span class="number">-2</span>, <span class="number">-1</span> &#125;, &#123; <span class="number">-2</span>, <span class="number">1</span> &#125;, &#123; <span class="number">-1</span>, <span class="number">2</span> &#125; &#125;;           <span class="comment">//方位矩阵</span></span><br><span class="line">        <span class="built_in">int</span>[,] path = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">100</span>, <span class="number">2</span>];         <span class="comment">//记录路径</span></span><br><span class="line">        <span class="built_in">int</span>[,] result = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">20</span>, <span class="number">20</span>];          <span class="comment">//记录结果</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过构造函数获得初始位置，棋盘大小等信息，</span></span><br><span class="line">        <span class="comment">// 并运行计算</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Horse</span>(<span class="params"><span class="built_in">int</span> x0, <span class="built_in">int</span> y0, <span class="built_in">int</span> cx, <span class="built_in">int</span> cy</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            path[<span class="number">0</span>, <span class="number">0</span>] = <span class="keyword">this</span>.x0 = x0;</span><br><span class="line">            path[<span class="number">0</span>, <span class="number">1</span>] = <span class="keyword">this</span>.y0 = y0;</span><br><span class="line">            <span class="keyword">this</span>.cx = cx;</span><br><span class="line">            <span class="keyword">this</span>.cy = cy;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            Move(x0, y0, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算路径</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Move</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> m, <span class="built_in">int</span> step</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x1, y1;<span class="comment">//记录棋子当前位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = m; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> flag = <span class="number">0</span>;<span class="comment">//用作标记</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//朝某一方向前进一步</span></span><br><span class="line">                x1 = x + dir[i, <span class="number">0</span>];</span><br><span class="line">                y1 = y + dir[i, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果超出棋盘，回退</span></span><br><span class="line">                <span class="keyword">if</span> (x1 &lt; <span class="number">1</span> || x1 &gt; cx || y1 &lt; <span class="number">1</span> || y1 &gt; cy)</span><br><span class="line">                &#123;</span><br><span class="line">                    x1 -= dir[i, <span class="number">0</span>];</span><br><span class="line">                    y1 -= dir[i, <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断是否走过，走过回退</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= step; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x1 == path[j, <span class="number">0</span>] &amp;&amp; y1 == path[j, <span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    x1 -= dir[i, <span class="number">0</span>];</span><br><span class="line">                    y1 -= dir[i, <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//符合要求，计入路径</span></span><br><span class="line">                path[step, <span class="number">0</span>] = x1;</span><br><span class="line">                path[step, <span class="number">1</span>] = y1;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断是否回到原点</span></span><br><span class="line">                <span class="keyword">if</span> (x1 == x0 &amp;&amp; y1 == y0)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//如果回到原点，判断是否已经到达过棋盘边缘，初始不算</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= step; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (path[j, <span class="number">0</span>] == <span class="number">1</span> || path[j, <span class="number">0</span>] == cx || path[j, <span class="number">1</span>] == <span class="number">1</span> || path[j, <span class="number">1</span>] == cy)</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//如果到过棋盘边缘，说明路径符合要求，存入路径数组</span></span><br><span class="line">                    <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        num++;<span class="comment">//路径数加一</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//打印路径</span></span><br><span class="line">                        Console.Write(<span class="string">&quot;方案&#123;0&#125;：&quot;</span>, num);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt;= step; j++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Console.Write(<span class="string">&quot;(&#123;0&#125;,&#123;1&#125;)&quot;</span>, path[j, <span class="number">0</span>], path[j, <span class="number">1</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">                        path[step, <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                        path[step, <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//回退并继续寻找其他方案</span></span><br><span class="line">                        step--;</span><br><span class="line">                        i++;</span><br><span class="line"></span><br><span class="line">                        Move(path[step,<span class="number">0</span>], path[step,<span class="number">1</span>], i, step + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//未到过边缘，不符合要求，继续寻找路径</span></span><br><span class="line">                    Move(x1, y1, <span class="number">1</span>, step + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x0, y0, cx, cy;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取数据</span></span><br><span class="line">            Console.Write(<span class="string">&quot;请输入棋盘宽度(3≤cx≤20)：&quot;</span>);</span><br><span class="line">            cx = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            Console.Write(<span class="string">&quot;请输入棋盘长度(3≤cy≤20)：&quot;</span>);</span><br><span class="line">            cy = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            Console.Write(<span class="string">&quot;请输入起始位置(1≤x0≤cx)：&quot;</span>);</span><br><span class="line">            x0 = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            Console.Write(<span class="string">&quot;请输入起始位置(1≤y0≤cy)：&quot;</span>);</span><br><span class="line">            y0 = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//进行计算并打印</span></span><br><span class="line">            Horse horse = <span class="keyword">new</span> Horse(x0, y0, cx, cy);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;总方案数：&#123;0&#125;&quot;</span>, horse.num);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="操作示意">操作示意</h2>
<p><img data-src="https://img.iszy.xyz/20190318213447.png" alt=""></p>
<p><strong>代码如果存在问题，请一定帮我指正!大神，谢谢了!</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>GIS</tag>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳工作序列算法</title>
    <url>/posts/JobSequenceProblem/</url>
    <content><![CDATA[<p>有 N 件工作，输入每件工作的费时、最后完成的期限及工作的价值，试求可能的一个完成工作序列，使价值和最大。</p>
<span id="more"></span>
<h2 id="原理">原理</h2>
<ol>
<li>按照最后期限越短越先，其次价值越高越先，再次费时越短越先的标准对所有任务进行排序。</li>
<li>将综合排序最高的加入背包</li>
<li>计算是否超出期限</li>
<li>重复前面的步骤，知道所有任务完成</li>
</ol>
<h2 id="代码">代码</h2>
<p>Github 库地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL0pvYlNlcXVlbmNlUHJvYmxlbQ==">https://github.com/ZvonimirSun/JobSequenceProblem<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program to find the maximum profit job sequence from a given array</span></span><br><span class="line"><span class="comment">// of jobs with deadlines and profits</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 最佳工作序列</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//任务结构</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">struct</span> Job</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> time &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> ddl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> profit &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Work</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//选出价值较大的</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">compare</span>(<span class="params">Job a, Job b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (a.profit &gt; b.profit);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//选出较小值</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">min</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &lt;= b)</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> b;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//选出较大值</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">max</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &gt;= b)</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> b;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//冒泡排序算法</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Sort</span>(<span class="params">Job[] arr</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.Length - <span class="number">1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr.Length - i - <span class="number">1</span>; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (compare(arr[j + <span class="number">1</span>], arr[j]))</span><br><span class="line">                        &#123;</span><br><span class="line">                            Job tem = arr[j];</span><br><span class="line">                            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                            arr[j + <span class="number">1</span>] = tem;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算最佳工作序列</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobScheduling</span>(<span class="params">Job[] arr, <span class="built_in">int</span> n</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//对所有工作进行排序</span></span><br><span class="line">                Sort(arr);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//统计最大期限</span></span><br><span class="line">                <span class="built_in">int</span> T = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    T = max(T, arr[i].ddl);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[n]; <span class="comment">//存储队列</span></span><br><span class="line">                <span class="built_in">int</span>[] slot = <span class="keyword">new</span> <span class="built_in">int</span>[T];  <span class="comment">//监控时间间隙</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> t = <span class="number">0</span>;<span class="comment">//工作序列耗时</span></span><br><span class="line">                <span class="built_in">int</span> worth = <span class="number">0</span>;<span class="comment">//工作序列总价值</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//初始化时间数组为-1</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; T; i++)</span><br><span class="line">                    slot[i] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算最佳序列</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//查找期限中是否有时间空位</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = arr[i].ddl - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//如果有空位，判断是否有足够费时的时长空隙</span></span><br><span class="line">                        <span class="keyword">if</span> (slot[j] == <span class="number">-1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//标记</span></span><br><span class="line">                            <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//如果空位少于费时，标记为1，并退出</span></span><br><span class="line">                            <span class="keyword">for</span> (<span class="built_in">int</span> k = j; k &gt;= j - arr[i].time + <span class="number">1</span>; k--)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span> (j - arr[i].time + <span class="number">1</span> &lt; <span class="number">0</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    flag = <span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (slot[k] != <span class="number">-1</span>) flag = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//当有足够时间，将时间数组命名为任务引导号</span></span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="built_in">int</span> k = j; k &gt;= j - arr[i].time + <span class="number">1</span>; k--)</span><br><span class="line">                                    slot[k] = i;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//录入结果</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    result[i] = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n &amp;&amp; j &lt; T; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (slot[j] != <span class="number">-1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            result[i] = arr[slot[j]].id;</span><br><span class="line">                            t += arr[slot[j]].time;</span><br><span class="line">                            worth += arr[slot[j]].profit;</span><br><span class="line">                            i++;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (slot[j] == <span class="number">-1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (slot[j] != slot[j - <span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        result[i] = slot[j];</span><br><span class="line">                        t += arr[slot[j]].time;</span><br><span class="line">                        worth += arr[slot[j]].profit;</span><br><span class="line">                        i++;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//打印结果</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result[i] != <span class="number">-1</span>)</span><br><span class="line">                        Console.Write(<span class="string">&quot;&#123;0&#125;&quot;</span>, arr[result[i]].id);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//打印时间序列</span></span><br><span class="line">                Console.Write(<span class="string">&quot;时间序列:&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;T;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (slot[i] == <span class="number">-1</span>)</span><br><span class="line">                        Console.Write(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        Console.Write(<span class="string">&quot;&#123;0&#125;&quot;</span>, arr[slot[i]].id);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine();</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;总耗时为:&#123;0&#125;&quot;</span>, t);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;总价值为:&#123;0&#125;&quot;</span>, worth);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Work work = <span class="keyword">new</span> Work();</span><br><span class="line">            Console.Write(<span class="string">&quot;请输入任务个数:&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> n = <span class="built_in">int</span>.Parse(Console.ReadLine());<span class="comment">//记录信息个数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//输入任务信息</span></span><br><span class="line">            Job[] arr = <span class="keyword">new</span> Job[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i].id = i + <span class="number">1</span>;</span><br><span class="line">                Console.Write(<span class="string">&quot;请输入任务&#123;0&#125;的费时:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                arr[i].time = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.Write(<span class="string">&quot;请输入任务&#123;0&#125;的最后期限:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                arr[i].ddl = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.Write(<span class="string">&quot;请输入任务&#123;0&#125;的价值:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                arr[i].profit = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打印任务表</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ID\t费时\t期限\t价值&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0&#125;\t&#123;1&#125;\t&#123;2&#125;\t&#123;3&#125;&quot;</span>, arr[i].id, arr[i].time, arr[i].ddl, arr[i].profit);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;下面即为最佳工作序列&quot;</span>);</span><br><span class="line">            work.printJobScheduling(arr, n);</span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="操作示意">操作示意</h2>
<p><img data-src="https://img.iszy.xyz/20190318213542.png" alt=""></p>
<p><strong>代码如果存在问题，请一定帮我指正!大神，谢谢了!</strong></p>
<hr>
<p><strong>参考链接:</strong></p>
<ol>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9qb2Itc2VxdWVuY2luZy1wcm9ibGVtLXNldC0xLWdyZWVkeS1hbGdvcml0aG0v">Job Sequencing Problem - Set 1 (Greedy Algorithm)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9qb2Itc2VxdWVuY2luZy11c2luZy1kaXNqb2ludC1zZXQtdW5pb24v">Job Sequencing Problem - Set 2 (Using Disjoint Set)<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>GIS</tag>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server数据库角色成员身份</title>
    <url>/posts/MS-SQL-Role/</url>
    <content><![CDATA[<p>本文总结了 SQL Server 数据库的自带角色成员身份权限。</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th style="text-align:left">数据库级别的角色名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">db_accessadmin</td>
<td style="text-align:left">db_accessadmin 固定数据库角色的成员可以为 Windows 登录名、Windows 组和 SQL Server 登录名添加或删除数据库访问权限。</td>
</tr>
<tr>
<td style="text-align:left">db_backupoperator</td>
<td style="text-align:left">db_backupoperator 固定数据库角色的成员可以备份数据库。</td>
</tr>
<tr>
<td style="text-align:left">db_datareader</td>
<td style="text-align:left">db_datareader 固定数据库角色的成员可以从所有用户表中读取所有数据。</td>
</tr>
<tr>
<td style="text-align:left">db_datawriter</td>
<td style="text-align:left">db_datawriter 固定数据库角色的成员可以在所有用户表中添加、删除或更改数据。</td>
</tr>
<tr>
<td style="text-align:left">db_ddladmin</td>
<td style="text-align:left">db_ddladmin 固定数据库角色的成员可以在数据库中运行任何数据定义语言(DDL)命令。</td>
</tr>
<tr>
<td style="text-align:left">db_denydatareader</td>
<td style="text-align:left">db_denydatareader 固定数据库角色的成员不能读取数据库内用户表中的任何数据。</td>
</tr>
<tr>
<td style="text-align:left">db_denydatawriter</td>
<td style="text-align:left">db_denydatawriter 固定数据库角色的成员不能添加、修改或删除数据库内用户表中的任何数据。</td>
</tr>
<tr>
<td style="text-align:left">db_owner</td>
<td style="text-align:left">db_owner 固定数据库角色的成员可以执行数据库的所有配置和维护活动，还可以删除数据库。</td>
</tr>
<tr>
<td style="text-align:left">db_securityadmin</td>
<td style="text-align:left">db_securityadmin 固定数据库角色的成员可以修改角色成员身份和管理权限。向此角色中添加主体可能会导致意外的权限升级。</td>
</tr>
<tr>
<td style="text-align:left">public</td>
<td style="text-align:left">授予 public 角色的权限由所有其他用户和角色继承，因为默认情况下，它们属于 public 角色。 仅为 public 角色授予您希望所有用户都具有的权限。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>从头开始搭建NextCloud私有云盘</title>
    <url>/posts/NextCloud/</url>
    <content><![CDATA[<p>我想大家一定都知道国内网盘相继关闭，百度网盘的和谐、限速大法吧。我还有同步盘的需求，以前百度网盘是有的，现在要会员才能用吧，还要冒着可能被莫名和谐的风险，我还是手动再见。对我来说，网盘还是非常有用，国内的这些网盘用得我十分难受，网上又正好有现成的私有云盘可供我折腾，好吧，其实我就是想折腾。</p>
<span id="more"></span>
<p>我最先听到的其实是 owncloud 和 seafile 的。相对于 seafile，我更加喜欢 owncloud 的界面，我也装过 owncloud 试用来着，结果发现还有许多常用功能需要折腾额外的插件。在折腾的过程中，我发现了 nextcloud 这个和 owncloud 在很多方面都十分相像的私有云盘，原来是 owncloud 原班人马做的更新的版本啊。有新的不用怎么能行，你说是不是？于是我就开始试用 nextcloud 了。安装过程多有借鉴网上的教程，十分感谢网上的大佬。</p>
<h2 id="NextCloud-安装">NextCloud 安装</h2>
<h3 id="VPS-选择">VPS 选择</h3>
<p>在这方面我也没什么经验，就不便多说。就说几点，我认为比较重要的吧。</p>
<ol>
<li>你的 VPS 内存至少能有 512MB 吧，最好能有 1GB，太大我觉得也没必要。</li>
<li>你用来作私有云盘存储的，存储空间总不能太小，这个看你需要多大，因人而异。</li>
<li>你得保证你的 VPS 的 IP 在你所在的地区有一定的访问速度，能跑满速自然是最好的，一般 VPS 商应该都有测试数据让你测试速度的。</li>
<li>作为网盘，少不了上传下载，说不定还要离线下载、在线影院什么的，那么流量也不能少。不过这点一般不用担心，国外的 VPS 一般不怎么吝啬流量的。</li>
<li>其他的嘛，额，你可能最好能有个域名，这不是必须的（偏题了，不管了就在这提了）。</li>
<li>个人推荐 Time4VPS，我现在自用就是这个，这家的存储 VPS 算是最实惠了吧。</li>
</ol>
<h3 id="宝塔-Linux-面板安装">宝塔 Linux 面板安装</h3>
<p>对于安装这种东西，对于 linux 小白来说，自然是越简单越好。于是我选择使用可视化面板<strong>宝塔 Linux 面板</strong>，在这上面可以一键部署环境，配置网站等等。</p>
<p>安装宝塔面板，我以 CentOS 7 为例。用 Xshell 或者 PuTTY 等无论什么软件通过 ssh 远程连接你的 VPS。输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>
<p>其他的系统，可以查看官方提供的<span class="exturl" data-url="aHR0cHM6Ly93d3cuYnQuY24vYmJzL3RocmVhZC0xMTg2LTEtMS5odG1s">安装命令页面<i class="fa fa-external-link-alt"></i></span>。</p>
<p>会让你确认安装，输入 y 回车即可。</p>
<p>等待安装完成，会告诉你宝塔面板的访问路径和用户名密码等，以后可以修改。就算密码忘记了只要你能登录你的 VPS 就能够通过官方的命令修改。</p>
<h3 id="部署网站">部署网站</h3>
<h4 id="环境配置">环境配置</h4>
<p>首先登录宝塔面板，会让你一键安装套件，nextcloud 官方推荐使用 LAMP。LNMP 也是能装的，据说会有诡异的问题，我也没试过。</p>
<p><img data-src="https://img.iszy.xyz/20190318214938.png" alt=""></p>
<p>建议按照我的选择，点击一键安装，宝塔面板会帮你将所需环境安装完成。</p>
<p>在安装完成后，还有几个内容需要添加，后期将会用到。点击左侧导航栏的软件管理，再点击 PHP-7.1 右侧的设置。</p>
<p><img data-src="https://img.iszy.xyz/20190318214947.png?x-oss-process=style/big" alt=""></p>
<p>这样将会弹出 php 的管理界面，点击左侧栏的安装扩展，安装如图所示的三个扩展。</p>
<p><img data-src="https://img.iszy.xyz/20190318214956.png" alt=""></p>
<h4 id="添加站点">添加站点</h4>
<p>点击左侧栏的网站，然后点击添加站点。在域名框中添加你需要的域名，你需要在你域名的 DNS 处将这个子域名解析到你的 VPS 的 IP。</p>
<p><img data-src="https://img.iszy.xyz/20190318215015.png" alt=""></p>
<p>创建完成后，点击你的网站目录，删除如图所示的自动生成的文件，并将 nextcloud 的网站文件上传到这个目录。</p>
<p>打开 NextCloud 的<span class="exturl" data-url="aHR0cHM6Ly9uZXh0Y2xvdWQuY29tL2luc3RhbGwvI2luc3RydWN0aW9ucy1zZXJ2ZXI=">官网<i class="fa fa-external-link-alt"></i></span>下载最新的安装包。</p>
<p>在页面中选择 Get Nextcloud Server 栏目下的 Download 按钮点击它。出现如下图界面点击 Download Nextcloud 开始下载：</p>
<p><img data-src="https://img.iszy.xyz/20190318215030.png?x-oss-process=style/big" alt=""></p>
<p>下下来的文件是个压缩包，你只需要把文件夹中的文件都上传到刚刚的网站目录即可。<strong>注意：只要文件夹中的文件，不要文件夹。</strong></p>
<h4 id="添加数据库">添加数据库</h4>
<p>点击面板左侧栏的数据库，点击 phpMyAdmin，出现数据库的管理界面，通过 root 用户登录，root 密码可以通过刚刚页面的 root 密码按钮得到。</p>
<p>接下来新建一个供 nextcloud 使用的数据库。点击数据库，输入数据库名，再点击创建就完成了。</p>
<p><img data-src="https://img.iszy.xyz/20190318215042.png" alt=""></p>
<h4 id="创建管理员账户">创建管理员账户</h4>
<p>现在你已经可以访问你的域名来访问 nextcloud 了，你将会看到如下所示的界面，你需要在这里创建管理员账户。</p>
<p><img data-src="https://img.iszy.xyz/20190318215100.png?x-oss-process=style/big" alt=""></p>
<p>管理员账户的用户名密码，自定。点开存储&amp;数据库，在这里可以修改数据目录。配置数据库选择 MySQL/MariaDB，然后填入刚刚你创建的数据库，最后点击安装完成。<strong>注意：localhost 后一定要写上端口 3306，如图所示</strong></p>
<p><img data-src="https://img.iszy.xyz/20190318215112.png" alt=""></p>
<p>现在你已经可以登录你的 nextcloud 了，尽情享用吧。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>NextCloud</tag>
        <tag>宝塔面板</tag>
        <tag>文件管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle PL/SQL BREAK-ON排列实例</title>
    <url>/posts/Oracle-Break-On/</url>
    <content><![CDATA[<p>使用 BREAK ON 语句进行排列的实例</p>
<span id="more"></span>
<h2 id="BREAK-ON-语法">BREAK ON 语法</h2>
<ol>
<li>
<p><code>BRE[AK][ON report_element [action [action]]] ...</code></p>
<ul>
<li>
<p>report_element 的语法为<code>&#123;column|expr|ROW|REPORT&#125;</code></p>
</li>
<li>
<p>action 的语法为<code>[SKI[P] n|[SKI[P]] PAGE][NODUP[LICATES]|DUP[LICATES]]</code></p>
</li>
</ul>
</li>
<li>
<p>指定报告中发生更改的位置以及要执行的格式化操作，比如：</p>
<ul>
<li>抑制显示给定列的重复值。</li>
<li>每次给定列值更改时跳过一行。</li>
<li>每次给定列值发生变化或在报告结束时打印计算的数字。</li>
</ul>
</li>
<li>
<p>不带参数直接输入 BREAK 来查看当前的 BREAK 定义。</p>
</li>
<li>
<p>此语句经常和 Compute 命令配合使用。</p>
</li>
</ol>
<h3 id="英文原文">英文原文</h3>
<p><code>BRE[AK][ON report_element [action [action]]] ...</code></p>
<p>where report_element has the syntax <code>&#123;column|expr|ROW|REPORT&#125;</code></p>
<p>and action has the syntax <code>[SKI[P] n|[SKI[P]] PAGE][NODUP[LICATES]|DUP[LICATES]]</code></p>
<p>Specifies where changes occur in a report and the formatting action to perform, such as:</p>
<ul>
<li>
<p>suppressing display of duplicate values for a given column</p>
</li>
<li>
<p>skipping a line each time a given column value changes</p>
</li>
<li>
<p>printing computed figures each time a given column value changes or at the end of the report.</p>
</li>
</ul>
<p>See the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vY2QvRTExODgyXzAxL3NlcnZlci4xMTIvZTE2NjA0L2NoX3R3ZWx2ZTAxNC5odG0jaTI2OTcyNTc=">COMPUTE<i class="fa fa-external-link-alt"></i></span> command.</p>
<p>Enter BREAK with no clauses to list the current BREAK definition.</p>
<h3 id="命令参数">命令参数</h3>
<table>
<thead>
<tr>
<th style="text-align:left">语句</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">clear breaks</td>
<td style="text-align:left">清除所有的 break 定义</td>
</tr>
<tr>
<td style="text-align:left">break on column</td>
<td style="text-align:left">在该列上中断</td>
</tr>
<tr>
<td style="text-align:left">break on row</td>
<td style="text-align:left">在每一行上中断</td>
</tr>
<tr>
<td style="text-align:left">break on Page</td>
<td style="text-align:left">在每一页上中断</td>
</tr>
<tr>
<td style="text-align:left">break on report</td>
<td style="text-align:left">在每一报告上中断</td>
</tr>
<tr>
<td style="text-align:left">skip n</td>
<td style="text-align:left">跳过 n 行</td>
</tr>
<tr>
<td style="text-align:left">skip page</td>
<td style="text-align:left">跳过未用完的页</td>
</tr>
</tbody>
</table>
<h2 id="实例">实例</h2>
<h3 id="题目">题目</h3>
<p><strong>基于 Oracle 11g 下 hr 用户进行计算。</strong></p>
<p>显示所有部门的部门编号、名称、员工数和平均薪金，同时显示在每个部门中工作的员工的姓名、薪金和职务。</p>
<p><img data-src="https://img.iszy.xyz/20190318215229.png" alt=""></p>
<h3 id="答题">答题</h3>
<ul>
<li>指定 break 参数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">break <span class="keyword">on</span> department_id <span class="keyword">on</span> department_name <span class="keyword">on</span> num <span class="keyword">on</span> avg <span class="keyword">skip</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>进行查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.department_id,d.department_name,</span><br><span class="line"><span class="built_in">count</span>(e1.employee_id) num,</span><br><span class="line">nvl(to_char(<span class="built_in">avg</span>(e1.salary),<span class="string">&#x27;999999.99&#x27;</span>),<span class="string">&#x27;Null&#x27;</span>) avg,</span><br><span class="line">e2.last_name,e2.salary,e2.job_id</span><br><span class="line"><span class="keyword">from</span> departments d,employees e1,employees e2</span><br><span class="line"><span class="keyword">where</span> d.department_id<span class="operator">=</span>e1.department_id(<span class="operator">+</span>)</span><br><span class="line"><span class="keyword">and</span> d.department_id<span class="operator">=</span>e2.department_id(<span class="operator">+</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.department_id,d.department_name,e2.last_name,e2.salary,e2.job_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> d.department_id,num;</span><br></pre></td></tr></table></figure>
<ul>
<li>清除 break 定义</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">clear breaks</span><br></pre></td></tr></table></figure>
<h3 id="部分结果">部分结果</h3>
<p><img data-src="https://img.iszy.xyz/20190318215243.png" alt=""></p>
<p><img data-src="https://img.iszy.xyz/20190318215256.png" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle PL/SQL while loop循环实例</title>
    <url>/posts/Oracle-PL-SQL-while-loop/</url>
    <content><![CDATA[<p>用 while loop 语句进行循环计算的一个实例。最近做题遇到，在此记录。</p>
<span id="more"></span>
<h2 id="WHILE-LOOP-语法">WHILE-LOOP 语法</h2>
<p>当<strong>条件为真</strong>时，执行语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHILE <span class="keyword">condition</span> LOOP</span><br><span class="line">    some_statements;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure>
<h2 id="实例">实例</h2>
<h3 id="题目">题目</h3>
<p>给出一个 Power 表(表 1)的数据如下：</p>
<p><img data-src="https://img.iszy.xyz/20190318215310.png" alt=""></p>
<ol>
<li>3 日的电费=1 日+2 日</li>
<li>4 日的电费=2 日+3 日</li>
</ol>
<p><strong>要求:</strong></p>
<p>编写 SQL 语句，最终显示出六月所有电费。</p>
<h3 id="答题">答题</h3>
<h4 id="创建表，存入初始数据">创建表，存入初始数据</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="built_in">power</span>(mon <span class="type">int</span>,<span class="keyword">day</span> <span class="type">int</span>,fee <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> power <span class="keyword">values</span>(<span class="number">6</span>,<span class="number">1</span>,<span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> power <span class="keyword">values</span>(<span class="number">6</span>,<span class="number">2</span>,<span class="number">34</span>);</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.iszy.xyz/20190318215323.png" alt=""></p>
<h4 id="计算整月的电费">计算整月的电费</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">    a number;</span><br><span class="line">    b number;</span><br><span class="line">    x number;</span><br><span class="line">    y number;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    a:<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">    b:<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">    while (b<span class="operator">&lt;=</span><span class="number">29</span>) loop</span><br><span class="line">        <span class="keyword">select</span> fee</span><br><span class="line">        <span class="keyword">into</span> x</span><br><span class="line">        <span class="keyword">from</span> power</span><br><span class="line">        <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span>a;</span><br><span class="line">        <span class="keyword">select</span> fee</span><br><span class="line">        <span class="keyword">into</span> y</span><br><span class="line">        <span class="keyword">from</span> power</span><br><span class="line">        <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span>b;</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> power <span class="keyword">values</span>(<span class="number">6</span>,a<span class="operator">+</span><span class="number">2</span>,x<span class="operator">+</span>y);</span><br><span class="line">        a:<span class="operator">=</span>a<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">        b:<span class="operator">=</span>b<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.iszy.xyz/20190318215335.png" alt=""></p>
<h4 id="显示结果">显示结果</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> power;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.iszy.xyz/20190318215348.png" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用remarkbox评论插件</title>
    <url>/posts/Remarkbox/</url>
    <content><![CDATA[<p>刚刚做博客，感觉还是需要个评论区的，虽然我也知道不会有谁来评论啦，估计也就我自己评论一下了。刚刚看到 Remarkbox，十分简洁，感觉很适合我。现已更换成<a href="https://www.iszy.cc/2018/04/01/Valine/">Valine 评论系统</a>，推荐一下。</p>
<span id="more"></span>
<h2 id="Remarkbox">Remarkbox</h2>
<p>这是一个个人提供的评论系统，界面相当的简洁，很符合我的审美啊。大家可以在<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVtYXJrYm94LmNvbS8=">官方网站<i class="fa fa-external-link-alt"></i></span>上进行试用。最为惊艳的地方在于，这个评论插件居然支持 markdown 语法，你可以用 markdown 语句发表格式工整的评论。在官网的试用评论区，还有人发代码的，真是因缺思厅。</p>
<p>官方网站可能访问速度不是很快，评论区加载的速度但是还不错。不知道这样好用的一个评论系统能够坚持多久，只能心怀美好的祝福了。</p>
<p>评论的具体效果，可以看本博客的评论区，感兴趣的可以去官网看看。</p>
<h2 id="其他评论插件">其他评论插件</h2>
<p>我看到国内外有好几家知名的评论插件，我在此列举一下。</p>
<ol>
<li>多说</li>
<li>网易云跟帖</li>
<li>畅言</li>
<li>友言</li>
<li>Disqus</li>
<li>其他</li>
</ol>
<p>要说国内知名的就这些吧，国外的我就列一个 Disqus 了。</p>
<h3 id="多说">多说</h3>
<p>首先是 <em>多说</em>。</p>
<p><em>多说</em> 是我第一次了解到的一个评论插件，在知乎大神的口中算是一个不错的选择。</p>
<p><em>多说</em> 可以使用社交账号登录，进行评论， 同时可以选择转发到社交平台，进行回复、标记喜欢、转发操作。跨平台的评论聚合效应，有利于有效提高回访流量。</p>
<p>嘛，我本来是想用这个插件的，支持 https ，好像还可以游客评论。可惜，才刚了解到这个插件就发现，已经在 2017 年 6 月 1 日正式关停服务了，什么鬼嘛。</p>
<h3 id="网易云跟帖">网易云跟帖</h3>
<p>然后就是 <em>网易云跟帖</em> 了。</p>
<p>我一直在使用 <em>网易云音乐</em>，也玩网易代理的 <em>暴雪游戏</em>，对这个公司还是很有好感的。但是你评论就评论吧，非把人家网友的位置标示出来干什么嘛。当然，如果没有其他可用，这个网易云跟帖服务也不是不能一用。</p>
<p>可惜啊，<em>网易云跟帖</em> 也继 <em>多说</em> 关停之后，于 2017 年 8 月 1 日停止。</p>
<h3 id="畅言">畅言</h3>
<p>其次，是 <em>畅言</em>。</p>
<p>2013 年 12 月 10 日，搜狐旗下社会化评论系统与聚合平台–<em>畅言</em> 宣布，通过 SDK 将社会化评论服务延伸至 APP 内，率先推出评论 SDK 和互动 SDK ，正式开启社会化评论系统进军移动端的进程。</p>
<p>在 <em>多说</em> 和 <em>网易云跟帖</em> 相继关停后，<em>畅言</em> 在国内快速铺开场面，在许多知名的大型网站接入后，<em>畅言</em> 在国内已经占据了霸主地位。</p>
<p>然而，我并不是多么喜欢这个插件。</p>
<p>在那些新闻网站上，我们经常能够看到 <em>畅言</em> 评论。<em>畅言</em> 的盖章功能总让我觉得评论区十分混乱，不够整洁。大概那些新闻网站就是需要这种热闹的感觉，可以营造出一种激烈讨论的氛围。但是这些激烈讨论的情况在我自己这个几乎不会有多少流量的小型个人博客来说，是不存在的。这样，畅言的评论插件就显得过于臃肿，会拖慢网站的速度。</p>
<p>除此之外，我也去注册过 <em>畅言</em>，想要试用一下来着，顺便看看博客插入评论插件是个什么样子。哇！在注册阶段我就被卡住了。什么？你居然要求备案号？！没有备案还只能用 15 天。嘛！我是没有动力为了个评论去备案我的网站。就为这个，我也不会使用 <em>畅言</em> 了。</p>
<h3 id="友言">友言</h3>
<p>下面介绍一下 <em>友言</em>。</p>
<p>这个系统应该也有些名气了吧。<em>友言</em> 是国内最专业的第三方实时社会化评论系统，“完全社交化”可将评论一键同步到各大微博与社区（目前支持 10 个社交媒体），同时将评论的回复与跟帖同步至使用的网站上，让网站变得更具有活力和社交性，从而为网站带来更多的回访和流量，是一个简单而强大的社会化评论及聚合平台。</p>
<p>官方宣称是最好用的社会化评论系统，部署插件或添加两行代码即可使用。确实，代码的确十分的简洁，像我这样的懒人看着这样简洁的代码是相当的舒服呀，这么短的代码还是 pc-移动端 自适应的。我当时就心动了，立刻把这个系统插入到我的博客里。</p>
<p>emmm，这个使用效果啊，耐人寻味。不知道是我网络的问题还是什么情况，我在 pc 端访问我的博客，死活加载不出来，手机端倒是加载出来了。我在网上查这个问题，居然没搜索到，难道只有我遇到了这个问题？(对的只有你！只有你！)</p>
<p>诶，不管怎么样，还是不能用啊？哭出声，好不容易遇到个喜欢的还用不了。哦对了，<em>友言</em> 只支持 http，在 https 网页中加入 <em>友言</em> 会报错。当然，我的网站是挂在 github pages 上的，一般情况不用 https，就没什么影响了。</p>
<h3 id="Disqus">Disqus</h3>
<p>再来看看这位大佬 <em>Disqus</em>。</p>
<p><em>Disqus</em> 那是很厉害啊。当前有 80 万家第三方网站在使用 <em>Disqus</em> 提供的第三方评论系统，其评论系统每月的独立用户访问量已接近 5 亿，这一数字较 2010 年增长了 500 %。包括 CNN、 NBC、 Fox News、 Engadget、 Time 等知名网站均使用了 <em>Disqus</em> 提供的社会化评论系统。WordPress、Blogger、Tumblr 等第三方博客平台均提供了 <em>Disqus</em> 第三方评论插件。</p>
<p>对我来说，这个插件默认样式不够简洁，虽说通过设置可以显示的更为简洁，但是总体不太符合我的审美。</p>
<p>~~最关键的是，这个插件被伟大的中国局域网挡在了墙外。~~我是日常翻墙，几乎不受影响，但是不能要求读者也这样啊。也就是说，使用 <em>Disqus</em> 的话，我的评论区大概会一直处于加载不出来的状态，很无奈啊，只能弃用了。</p>
<h3 id="其他插件">其他插件</h3>
<p>emmm，我知道国外还有一些其他的评论系统可用，我就不一一评述了。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>评论系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle SQLPLUS命令</title>
    <url>/posts/SQLPLUS/</url>
    <content><![CDATA[<p>今天学习了 Oracle SQL*PLUS 的语句，就在这里总结一下。</p>
<span id="more"></span>
<h2 id="官方的-HELP-INDEX-截图">官方的 HELP INDEX 截图</h2>
<p><img data-src="https://img.iszy.xyz/20190318220212.png" alt=""></p>
<h2 id="语句总结">语句总结</h2>
<table>
<thead>
<tr>
<th style="text-align:center">SQL 语句</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">@</td>
<td style="text-align:center">运行指定脚本</td>
</tr>
<tr>
<td style="text-align:center">@@</td>
<td style="text-align:center">同@，运行 nest script 时使用</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">执行最近脚本</td>
</tr>
<tr>
<td style="text-align:center">Accept</td>
<td style="text-align:center">接受用户输入行存储到替代变量中</td>
</tr>
<tr>
<td style="text-align:center">Append</td>
<td style="text-align:center">向当前 SQL 行追加文本</td>
</tr>
<tr>
<td style="text-align:center">Archive log</td>
<td style="text-align:center">查看和管理归档信息</td>
</tr>
<tr>
<td style="text-align:center">attribute</td>
<td style="text-align:center">设置 object 类型 column 属性</td>
</tr>
<tr>
<td style="text-align:center">break</td>
<td style="text-align:center">分开重复列</td>
</tr>
<tr>
<td style="text-align:center">Btitle</td>
<td style="text-align:center">设置 report 尾</td>
</tr>
<tr>
<td style="text-align:center">change</td>
<td style="text-align:center">修改错误代码</td>
</tr>
<tr>
<td style="text-align:center">clear</td>
<td style="text-align:center">清楚</td>
</tr>
<tr>
<td style="text-align:center">column</td>
<td style="text-align:center">命令集</td>
</tr>
<tr>
<td style="text-align:center">Compute</td>
<td style="text-align:center">运算查询结果集</td>
</tr>
<tr>
<td style="text-align:center">Connect</td>
<td style="text-align:center">会话中切换连接命令</td>
</tr>
<tr>
<td style="text-align:center">Copy</td>
<td style="text-align:center">复制</td>
</tr>
<tr>
<td style="text-align:center">Define</td>
<td style="text-align:center">定义变量</td>
</tr>
<tr>
<td style="text-align:center">Del</td>
<td style="text-align:center">删除 SQL BUFFER 指定行</td>
</tr>
<tr>
<td style="text-align:center">Describe</td>
<td style="text-align:center">描述表、视图的列以及函数、程序的说明</td>
</tr>
<tr>
<td style="text-align:center">Disconnect</td>
<td style="text-align:center">断开连接</td>
</tr>
<tr>
<td style="text-align:center">Edit</td>
<td style="text-align:center">创建或编辑 sql 脚本</td>
</tr>
<tr>
<td style="text-align:center">Get</td>
<td style="text-align:center">将 sql 脚本从文件 load into sql buffer</td>
</tr>
<tr>
<td style="text-align:center">Help</td>
<td style="text-align:center">帮助</td>
</tr>
<tr>
<td style="text-align:center">Host</td>
<td style="text-align:center">sql 会话模式利用 host 命令调用 cmd 命令</td>
</tr>
<tr>
<td style="text-align:center">Input</td>
<td style="text-align:center">追加新行 enter a new line</td>
</tr>
<tr>
<td style="text-align:center">List</td>
<td style="text-align:center">列出 SQL BUFFER 中 sql 语句</td>
</tr>
<tr>
<td style="text-align:center">Password</td>
<td style="text-align:center">修改 current user 密码</td>
</tr>
<tr>
<td style="text-align:center">Pause</td>
<td style="text-align:center">暂停</td>
</tr>
<tr>
<td style="text-align:center">Print</td>
<td style="text-align:center">打印变量</td>
</tr>
<tr>
<td style="text-align:center">Prompt</td>
<td style="text-align:center">向 screen 发送消息</td>
</tr>
<tr>
<td style="text-align:center">Quit</td>
<td style="text-align:center">用法同 exit</td>
</tr>
<tr>
<td style="text-align:center">Recovery</td>
<td style="text-align:center">恢复数据库等操作</td>
</tr>
<tr>
<td style="text-align:center">Remark</td>
<td style="text-align:center">单行注释</td>
</tr>
<tr>
<td style="text-align:center">Repfooter</td>
<td style="text-align:center">放置 report 头（见 ttitle）</td>
</tr>
<tr>
<td style="text-align:center">Repheader</td>
<td style="text-align:center">放置 report 角</td>
</tr>
<tr>
<td style="text-align:center">Reserved words (SQL)</td>
<td style="text-align:center">SQL 保留字</td>
</tr>
<tr>
<td style="text-align:center">Reserved words (PL/SQL)</td>
<td style="text-align:center">PL/SQL 保留字</td>
</tr>
<tr>
<td style="text-align:center">Run</td>
<td style="text-align:center">列出 sql buffer 内容同时执行该内容</td>
</tr>
<tr>
<td style="text-align:center">Save</td>
<td style="text-align:center">保存缓冲区内容</td>
</tr>
<tr>
<td style="text-align:center">Set</td>
<td style="text-align:center">设置</td>
</tr>
<tr>
<td style="text-align:center">Show</td>
<td style="text-align:center">显示变量或参数值</td>
</tr>
<tr>
<td style="text-align:center">Shutdown</td>
<td style="text-align:center">关闭数据库（DBA 用户执行）</td>
</tr>
<tr>
<td style="text-align:center">Spool</td>
<td style="text-align:center">将屏幕显示保存到文件</td>
</tr>
<tr>
<td style="text-align:center">Sqlplus</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Start</td>
<td style="text-align:center">恢复 set 变量值</td>
</tr>
<tr>
<td style="text-align:center">Startup</td>
<td style="text-align:center">启动数据库（DBA 用户执行）</td>
</tr>
<tr>
<td style="text-align:center">Store</td>
<td style="text-align:center">存储 set 变量值</td>
</tr>
<tr>
<td style="text-align:center">Timing</td>
<td style="text-align:center">计时器</td>
</tr>
<tr>
<td style="text-align:center">Ttitle</td>
<td style="text-align:center">设置 report 抬头</td>
</tr>
<tr>
<td style="text-align:center">Undefined</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Variable</td>
<td style="text-align:center">声明绑定变量供 PLSQL 块引用</td>
</tr>
<tr>
<td style="text-align:center">Whenever oserror</td>
<td style="text-align:center">执行命令中遇到系统异常</td>
</tr>
<tr>
<td style="text-align:center">Whenerror sqlerror</td>
<td style="text-align:center">执行命令中遇到 SQL 异常</td>
</tr>
<tr>
<td style="text-align:center">Xquery</td>
<td style="text-align:center">运行 xquery 语句</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio快捷键</title>
    <url>/posts/VS-Shortcuts/</url>
    <content><![CDATA[<p>在 VS 的日常使用中，一些快捷键的辅助会有效地提高你的效率，在这里，我总结一点我使用中使用的快捷键。（VS2017 中确认可以使用）</p>
<span id="more"></span>
<h2 id="常用快捷键">常用快捷键</h2>
<p>这里列举的只是我使用到的一部分。当我用到时，我将会在这里继续补充。</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">F5</td>
<td style="text-align:left">启动调试</td>
</tr>
<tr>
<td style="text-align:left">Ctrl-K + Ctrl-C</td>
<td style="text-align:left">注释一段选择代码</td>
</tr>
<tr>
<td style="text-align:left">Ctrl-K + Ctrl-U</td>
<td style="text-align:left">取消注释一段选择代码</td>
</tr>
<tr>
<td style="text-align:left">Ctrl-M + Ctrl-O</td>
<td style="text-align:left">折叠所有代码</td>
</tr>
<tr>
<td style="text-align:left">Ctrl-M + Ctrl-P</td>
<td style="text-align:left">展开所有代码</td>
</tr>
<tr>
<td style="text-align:left">Ctrl-M + Ctrl-M</td>
<td style="text-align:left">展开或折叠代码段</td>
</tr>
<tr>
<td style="text-align:left">Ctrl-K + Ctrl-F</td>
<td style="text-align:left">格式化整个块</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>配合 Valine 使用的 Valine-Admin</title>
    <url>/posts/Valine-Admin/</url>
    <content><![CDATA[<p>在<a href="https://www.iszy.cc/2018/04/01/Valine/">上一篇文章</a>中，我讲了怎样安装 Valine 评论系统。Valine 评论系统现在自带的邮件通知功能有很大缺陷，这就要轮到我今天要讲的 Valine-Admin 了。由 <span class="exturl" data-url="aHR0cHM6Ly9pb2xpdS5jbi8=">@云淡风轻<i class="fa fa-external-link-alt"></i></span> 大神开发的 Valine-Admin 实现了基于 leancloud 云引擎的邮件通知、垃圾评论识别和评论管理面板，<span class="exturl" data-url="aHR0cDovL3d3dy56aGFvanVuLmltL2hleG8tdmFsaW5lLWFkbWluLw==">@赵俊<i class="fa fa-external-link-alt"></i></span>大佬修改优化了一波，能够提供良好的评论通知体验。</p>
<span id="more"></span>
<h2 id="说明">说明</h2>
<p>本文内容已弃用，本人的库针对我的个人需求做了一些修改，不再适用于一般用户。因为后续原始的 Valine-Admin 开始适配修改版的 Valine，所以建议使用<span class="exturl" data-url="aHR0cDovL3d3dy56aGFvanVuLmltL2hleG8tdmFsaW5lLWFkbWluLw==">@赵俊<i class="fa fa-external-link-alt"></i></span>大佬的版本。</p>
<p>赵俊大神的原始链接：<span class="exturl" data-url="aHR0cDovL3d3dy56aGFvanVuLmltL2hleG8tdmFsaW5lLWFkbWluLw==">Hexo 优化 — Valine 扩展之邮件通知<i class="fa fa-external-link-alt"></i></span></p>
<details>
  <summary>原始文章</summary>
<h2 id="问题与改动">问题与改动</h2>
<p>由于 Valine 的更新，以前的一些功能已经无法继续使用。</p>
<ul>
<li>由于去除了 rid 字段，原本基于 rid 字段的“被@邮件通知”功能不再有效。我从评论内容中重新提取了 rid 字段，能够正常进行邮件通知了。</li>
<li>由于不再有 IP 字段，垃圾评论识别功能完全不起作用。emmm，我也不会搞，所以就删掉了。</li>
</ul>
<h2 id="云引擎部署">云引擎部署</h2>
<blockquote>
<p>Deserts 大神的原始链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW5qdW53ZW4uY29tL2RpeS1hLWNvbW1lbnQtc3lzdGVtLw==">Valine: 独立博客评论系统<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>由于我对项目做了一些改动，建议使用本文的库，即止到今日一直使用正常。</p>
<h3 id="源码部署">源码部署</h3>
<p>进入博客应用的云引擎的设置，在代码库中填入以下内容并点击保存。已改用 zhaojun1998 的 Valine-Admin，与教程暂不符合，<strong>请勿继续使用以下教程</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ZvonimirSun/Valine-Admin.git</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.iszy.xyz/20190318221112.png" alt=""></p>
<p>接下来在云引擎的部署页，选择部署目标为<code>生产环境</code>，分支或版本号填入<code>master</code>，勾选平滑部署，点击部署。</p>
<p><img data-src="https://img.iszy.xyz/20190318221123.png" alt=""></p>
<h3 id="设置自定义环境变量">设置自定义环境变量</h3>
<p>此外，还需要设置云引擎的环境变量以支持运行，如图所示。</p>
<p><img data-src="https://img.iszy.xyz/20190318221132.png" alt=""></p>
<p>SMTP 信息需要准确填写，用于发送通知邮件，部分邮箱如 QQ 邮箱需要使用授权码（密码）。注意我们使用 SSL 发件，所以端口别填错了。</p>
<h3 id="评论管理后台">评论管理后台</h3>
<p><img data-src="https://img.iszy.xyz/20190318221144.png" alt=""></p>
<p>在云引擎的设置界面设置 Web 主机域名，便可以通过这个地址访问评论的管理界面。用 _User 表中的用户登录即可，注意要手动设置密码，才能登录，不能空密码。</p>
<p><img data-src="https://img.iszy.xyz/20190318221157.png" alt=""></p>
<p>至此已经可以顺利使用了。由于云引擎的免费实例有每天的强制休眠，可以用定时脚本唤醒，但是大多数人应该不需要用到 24 小时，所以影响不大。</p>
</details>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>评论系统</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>超好用极简评论系统 Valine 安装</title>
    <url>/posts/Valine/</url>
    <content><![CDATA[<p>今天我来介绍一下，我现在正在使用的评论系统——<span class="exturl" data-url="aHR0cHM6Ly92YWxpbmUuanMub3JnLw==">Valine<i class="fa fa-external-link-alt"></i></span>，一个可以完全自主掌控数据的超好用无后端极简评论系统。我之前使用的评论系统是 Remarkbox，感兴趣的可以看一下我之前的文章，我会在文章末尾放上链接。</p>
<span id="more"></span>
<h2 id="Valine-评论系统简介">Valine 评论系统简介</h2>
<p><img data-src="https://img.iszy.xyz/20190318221214.png" alt=""></p>
<p>如题目所说，Valine 是一个无后端的极简评论系统。由 <span class="exturl" data-url="aHR0cHM6Ly9pb2xpdS5jbi8=">@云淡风轻<i class="fa fa-external-link-alt"></i></span> 大神开发，利用免费的 leancloud 作云数据库，实现了真正的无后端。Valine 有以下几点吸引我的地方：</p>
<ul>
<li>能够完全掌控评论数据</li>
<li>外观简约美观</li>
<li>评论支持 markdown 语法</li>
<li>能够邮件通知（不推荐使用）</li>
</ul>
<p>**备注：**不推荐使用 Valine 自带的邮件推送，功能并不完善，我会再后文另外说明实现的方法。</p>
<h2 id="安装步骤">安装步骤</h2>
<p>Valine 官方文档：<span class="exturl" data-url="aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQv">文档<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="创建应用">创建应用</h3>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2xvZ2luLmh0bWwjL3NpZ251cA==">点击这里登录或注册<i class="fa fa-external-link-alt"></i></span><code>Leancloud</code></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvbmV3YXBw">点击这里创建应用<i class="fa fa-external-link-alt"></i></span>，应用名称随意。</li>
</ol>
<p><img data-src="https://img.iszy.xyz/20190318221231.png" alt=""></p>
<h3 id="获取-APP-ID-和-APP-KEY">获取 <code>APP ID</code> 和 <code>APP KEY</code></h3>
<p>进入应用后，在此处获取该应用的 <code>APP ID</code> 和 <code>APP KEY</code>。</p>
<p><img data-src="https://img.iszy.xyz/20190318221242.png" alt=""></p>
<h3 id="设置安全域名">设置安全域名</h3>
<p>为了数据安全，请务必在此处添加安全域名为你的博客地址。如在本地测试，可以先不添加安全域名。</p>
<p><img data-src="https://img.iszy.xyz/20190318221253.png" alt=""></p>
<h3 id="插入页面">插入页面</h3>
<p>以本人博客为例，请将以下语句添加到博客的评论位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--评论显示区，请插入合适的位置--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!--Leancloud 操作库:--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn1.lncld.net/static/js/3.6.1/av-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!--Valine 的核心代码库--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/valine@1.1.9-beta9/dist/Valine.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">new</span> Valine(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>:<span class="string">&#x27;#comment&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">appId</span>: <span class="string">&#x27;Your App ID&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">appKey</span>: <span class="string">&#x27;Your App Key&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">placeholder</span>: <span class="string">&#x27;ヾﾉ≧∀≦)o快来评论一下吧!&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">avatar</span>:<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>**注意：**在 Valine 核心代码库的部分可以自行选择版本，现在最新的稳定版为 1.1.8，将链接中的 <code>1.1.9-beta9</code> 换成 <code>1.1.8</code> 即可。beta 版可能存在 bug，但能更快使用新功能，风险自负。</p>
<h2 id="其他参数">其他参数</h2>
<p>可自定义配置项较多，不在此一一列举，请参考官方文档。</p>
<h2 id="Valine-Admin">Valine-Admin</h2>
<p>我之前说过，不推荐使用 Valine 提供的邮件通知功能。由于 leancloud 自身邮件系统的限制，无法传递足够的参数，所以通知邮件中的链接无法直接跳转到文章页，不能够满足使用。</p>
<p>大神 <span class="exturl" data-url="aHR0cHM6Ly9wYW5qdW53ZW4uY29t">@Deserts<i class="fa fa-external-link-alt"></i></span> 基于 leancloud 云引擎做了一个邮件通知功能，顺便还实现了评论管理面板，Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bhbmp1bndlbi9WYWxpbmUtQWRtaW4=">Valine-Admin<i class="fa fa-external-link-alt"></i></span>。</p>
<p>由于 Valine 的版本更新，原本的功能除了管理面板已经基本不能使用了，包括邮件通知、垃圾评论识别。我对此进行了一点简单的改动，恢复了邮件通知的内容，垃圾评论识别不会搞，我就给删掉了，Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL1ZhbGluZS1BZG1pbg==">Valine-Admin<i class="fa fa-external-link-alt"></i></span>。</p>
<p><a href="https://www.iszy.cc/2018/04/01/Valine-Admin/">下一篇文章</a>，我将写一下这个 Valine-Admin 的配置。同样是十分简单的。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>评论系统</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>体验 Windows 10 内置 Linux 子系统</title>
    <url>/posts/WSL/</url>
    <content><![CDATA[<p>有的工作在 Linux 环境中会比在 Windows 环境中更加方便，但我的主要使用环境还是 Windows，所以不能直接装 Linux 系统。我过去的解决方案是装了一个 Ubuntu 的虚拟机，但是这样还是不太方便，尤其是在文件访问上。现在 Win10 中有了 Linux 子系统，简称 WSL，很好地解决了我的问题。</p>
<span id="more"></span>
<h2 id="WSL-简介">WSL 简介</h2>
<p><strong>适用于 Linux 的 Windows 子系统</strong>（英语：Windows Subsystem for Linux，简称<strong>WSL</strong>）是一个为在 Windows 10 上能够原生运行 Linux 二进制可执行文件（ELF 格式）的兼容层。它是由微软与 Canonical 公司合作开发，目标是使纯正的 Ubuntu 14.04 “Trusty Tahr” 映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。</p>
<h2 id="安装步骤">安装步骤</h2>
<p>本文以 Ubuntu 子系统为例。</p>
<h3 id="开启开发人员模式">开启开发人员模式</h3>
<p><img data-src="https://img.iszy.xyz/20190318221442.png" alt=""></p>
<h3 id="启用-WSL-功能">启用 WSL 功能</h3>
<p><img data-src="https://img.iszy.xyz/20190318221451.png" alt=""></p>
<h3 id="在应用商店进行搜索">在应用商店进行搜索</h3>
<p><img data-src="https://img.iszy.xyz/20190318221502.png" alt=""></p>
<p>可以搜到如下 5 个 Linux 子系统。</p>
<p><img data-src="https://img.iszy.xyz/20190318221511.png" alt=""></p>
<h3 id="安装-Ubuntu">安装 Ubuntu</h3>
<p>在此，我选择安装我比较熟悉的 Ubuntu，如果对其他感兴趣的也可以安装。</p>
<p><img data-src="https://img.iszy.xyz/20190318221521.png" alt=""></p>
<p>系统显示安装完成后，打开 Ubuntu，将会进行进一步的安装，将需要等待一段时间。</p>
<p><img data-src="https://img.iszy.xyz/20190318221535.png" alt=""></p>
<p>接下来设定你在 Ubuntu 子系统中的用户名，可以任意指定。</p>
<p><img data-src="https://img.iszy.xyz/20190318221547.png" alt=""></p>
<p>接下来设定密码，这将会是你的 root 密码。用过 Linux 的应该知道，密码输入是不会显示的，这是正常现象，输入完密码回车即可。</p>
<p><img data-src="https://img.iszy.xyz/20190318221557.png" alt=""></p>
<p>当看到如下内容时，子系统已经安装完毕，可以使用了。</p>
<p><img data-src="https://img.iszy.xyz/20190318221608.png" alt=""></p>
<p>除了通过点击 Ubuntu 图标进入子系统，你同样可以通过在 cmd 或 PowerShell 中输入 ubuntu 进入，无需管理员权限。</p>
<p><img data-src="https://img.iszy.xyz/20190318221620.png" alt=""></p>
<h2 id="内核版本和发行版本号">内核版本和发行版本号</h2>
<p><img data-src="https://img.iszy.xyz/20190318221636.png" alt=""></p>
<p>在这里我们可以看到内核版本为 4.4.0，发行版本为 Ubuntu 16.04.3 LTS。</p>
<h2 id="后话">后话</h2>
<p>WSL 最初在 Win 10 Insider Preview build 14316 开始可用，现在正式版已经升级到 1803 版，内部版本号为 17134，功能已经完善了太多。除了受限于 Windows 文件系统，文件操作较慢，其他已经和原版 Ubuntu，不相上下，完全可以替代虚拟机，完成我的工作了，我感觉非常满意。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>Ubuntu</tag>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)低微漏洞处理办法记录</title>
    <url>/posts/a/</url>
    <content><![CDATA[<blockquote>
<p>原文链接: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbHNkYi9wLzgyMDQ1NzguaHRtbA==">低微漏洞处理办法记录<i class="fa fa-external-link-alt"></i></span> —— 诸子流</p>
</blockquote>
<span id="more"></span>
<ol>
<li>
<p>允许 Traceroute 探测</p>
<p>描述：本插件使用 Traceroute 探测来获取扫描器与远程主机之间的路由信息。攻击者也可以利用这些信息来了解目标网络的网络拓扑。</p>
<p>处理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -p icmp --icmp-type 11 -m comment --comment <span class="string">&quot;deny traceroute&quot;</span> -j DROP</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>ICMP timestamp 请求响应漏洞</p>
<p>描述：远程主机会回复 ICMP_TIMESTAMP 查询并返回它们系统的当前时间。 这可能允许攻击者攻击一些基于时间认证的协议。</p>
<p>处理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -p ICMP --icmp-type timestamp-request -m comment --comment <span class="string">&quot;deny ICMP timestamp&quot;</span> -j DROP</span><br><span class="line">iptables -I INPUT -p ICMP --icmp-type timestamp-reply -m comment --comment <span class="string">&quot;deny ICMP timestamp&quot;</span> -j DROP</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>探测到 SSH 服务器支持的算法<br>
描述：本插件用来获取 SSH 服务器支持的算法列表</p>
<p>处理：无法处理。ssh 协议协商过程就是服务端要返回其支持的算法列表。</p>
</li>
<li>
<p>SSH 版本信息可被获取</p>
<p>描述：SSH 服务允许远程攻击者获得 ssh 的具体信息，如版本号等等。这可能为攻击者发动进一步攻击提供帮助。</p>
<p>处理：无法处理。sshd_config 中的 Banner 项只是 ssh 主机前输出的信息，源码处理机制就是 telnet 其端口就会返回版本信息。</p>
</li>
<li>
<p>OpenSSH CBC 模式信息泄露漏洞(CVE-2008-5161)【原理扫描】</p>
<p>描述：OpenSSH 是一种开放源码的 SSH 协议的实现，初始版本用于 OpenBSD 平台，现在已经被移植到多种 Unix/Linux 类操作系统下。<br>
如果配置为 CBC 模式的话，OpenSSH 没有正确地处理分组密码算法加密的 SSH 会话中所出现的错误，导致可能泄露密文中任意块最多 32 位纯文本。在以标准配置使用 OpenSSH 时，攻击者恢复 32 位纯文本的成功概率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn><mn>8</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-18}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">−</span><span class="mord mathrm">1</span><span class="mord mathrm">8</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>，此外另一种攻击变种恢复 14 位纯文本的成功概率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn><mn>4</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-14}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">−</span><span class="mord mathrm">1</span><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>。</p>
<p>处理：使用 man sshd_config 查看 Ciphers 项可以看到 sshd 支持的算法（如下图所示）</p>
<p><img data-src="https://img.iszy.xyz/1641952164668.png" alt=""></p>
<p>处理办法是在 sshd_config 中配置 Ciphers 项，并去除所有包含 cbc 字眼的算法然后重启 sshd 即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,arcfour</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>知识笔记</tag>
        <tag>Linux</tag>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题v8配置自定义字体</title>
    <url>/posts/a8mr7k/</url>
    <content><![CDATA[<p>今天改了一下 NexT 主题的字体配置，发现还是有一些需要注意的地方的，在此记录一下。</p>
<span id="more"></span>
<h2 id="简要说明">简要说明</h2>
<p>在此篇文章发布时，我用的是 v8.2.1 版本的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">next-theme/hexo-theme-next<i class="fa fa-external-link-alt"></i></span>，通过<code>npm install hexo-theme-next</code>安装，所以尽量不想改动主题源文件。</p>
<p>现在这里展示下最终的配置，只改动了主题的配置(字体部分)，符合我一开始的期望。</p>
<p>这边的配置是这样的，可以改成自己喜欢的</p>
<ul>
<li>中文字体: Noto Serif SC</li>
<li>英文字体: EB Garamond</li>
<li>站点标题字体: Cinzel Decorative</li>
<li>代码字体: JetBrains Mono</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">&quot;EB Garamond, &#x27;Noto Serif SC&#x27;&quot;</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Cinzel</span> <span class="string">Decorative</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">JetBrains</span> <span class="string">Mono</span></span><br></pre></td></tr></table></figure>
<p>如果只需要看最后是怎么配置的，到这里就可以结束了，下面是我折腾的过程。</p>
<h2 id="折腾过程">折腾过程</h2>
<p>涉及到的文件有以下几个。</p>
<ul>
<li>config.next.yml(主题配置文件)</li>
<li>node_modules/hexo-theme-next/source/css/_variables/base.styl(主题源文件中关于字体配置的 css 变量)</li>
<li>source/_data/styles.styl(自定义样式文件)</li>
</ul>
<h3 id="查询资料">查询资料</h3>
<p>虽说之前就看过主题配置文件中有这个字体配置的地方，姑且还是在网上查了一下其他人是怎么配置的。</p>
<p>然后我发现完整展示实际配置内容的较少，且基本上每一个类型都只配置了一个 font family，在其中一篇博文中还表示多在 NexT 主题的这个配置下多 font family 的配置是不支持的，这个我还是感觉比较诧异的，应该会有不少人有这样的需求吧。</p>
<p><img data-src="https://img.iszy.xyz/20210225171504.png" alt=""></p>
<p>所以根据网上的说法，就有以下两个方法进行字体配置。</p>
<ol>
<li>
<p>简单配置</p>
<p>在 NexT 配置中直接进行配置，内容为单个 font-family 值。</p>
</li>
<li>
<p>复杂配置</p>
<ol>
<li>
<p>在主题配置文件中指定自定义样式文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>，在对应路径下创建自定义样式文件，然后在文件中直接对对应的 html 标签编写 css。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-class">.post-body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: EB Garamond, <span class="string">&quot;Noto Serif SC&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Cinzel Decorative, EB Garamond, <span class="string">&quot;Noto Serif SC&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pre,</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: JetBrains Mono, consolas, Menlo, monospace, <span class="string">&quot;Noto Serif SC&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h3 id="探寻方案">探寻方案</h3>
<p>不过直接加 css 有点不太优雅，万一以后多了什么标签，我还得手动改 css，那就要看看为什么不支持了。</p>
<p>在主题的代码中，我们能找到这么一段关于字体的配置。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">get_font_family(config) &#123;</span><br><span class="line">  <span class="variable">$custom-family</span> = hexo-config(&#x27;font.&#x27; + config + &#x27;.family&#x27;);</span><br><span class="line">  return <span class="variable">$custom-family</span> is <span class="selector-tag">a</span> &#x27;string&#x27; ? unquote($custom-family) : null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Font families.</span></span><br><span class="line"><span class="variable">$font-family-chinese</span>      = &#x27;PingFang SC&#x27;, &#x27;Microsoft YaHei&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-base</span>         = <span class="variable">$font-family-chinese</span>, sans-serif;</span><br><span class="line"><span class="variable">$font-family-base</span>         = get_font_family(&#x27;global&#x27;), <span class="variable">$font-family-chinese</span>, sans-serif if get_font_family(&#x27;global&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-logo</span>         = <span class="variable">$font-family-base</span>;</span><br><span class="line"><span class="variable">$font-family-logo</span>         = get_font_family(&#x27;title&#x27;), <span class="variable">$font-family-base</span> if get_font_family(&#x27;title&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-headings</span>     = <span class="variable">$font-family-base</span>;</span><br><span class="line"><span class="variable">$font-family-headings</span>     = get_font_family(&#x27;headings&#x27;), <span class="variable">$font-family-base</span> if get_font_family(&#x27;headings&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-posts</span>        = <span class="variable">$font-family-base</span>;</span><br><span class="line"><span class="variable">$font-family-posts</span>        = get_font_family(&#x27;posts&#x27;), <span class="variable">$font-family-base</span> if get_font_family(&#x27;posts&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-monospace</span>    = consolas, Menlo, monospace, <span class="variable">$font-family-chinese</span>;</span><br><span class="line"><span class="variable">$font-family-monospace</span>    = get_font_family(&#x27;codes&#x27;), consolas, Menlo, monospace, <span class="variable">$font-family-chinese</span> if get_font_family(&#x27;codes&#x27;);</span><br></pre></td></tr></table></figure>
<p>我们可以看到这边最主要的就是这个<code>get_font_family</code>方法，做的事情就是获取配置文件中对应项的值，如果不为空就去掉一下引号返回，否则返回<code>null</code>。</p>
<p>从代码上来看，并没有不支持多 font family 配置，所以我就试了以下几个配置看看效果。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">EB</span> <span class="string">Garamond,</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>
<p>首先这个配置，<code>EB Garamond</code>这个字体是生效了的，但<code>Noto Serif SC</code>没有生效。经过查询，在 css 规范中(<span class="exturl" data-url="aHR0cDovL2ppZ3Nhdy53My5vcmcvY3NzLXZhbGlkYXRvci8=">css 校验器<i class="fa fa-external-link-alt"></i></span>)带空格的 font family 是要加引号的，于是改为了以下配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">&#x27;EB Garamond&#x27;</span><span class="string">,</span> <span class="string">&#x27;Noto Serif SC&#x27;</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>
<p>好家伙，这个配置直接在 yaml 结构上就不支持，会报错。应当是被当作 map 解析了，不过结构也不正确，果断跳过。</p>
<p>经过查询，<code>unquote</code>这个方法，只是去除最外层引号的，而我将整个配置都套进双引号，应当就会被解析为字符串了，所以有了下面的配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">&quot;&#x27;EB Garamond&#x27;, &#x27;Noto Serif SC&#x27;&quot;</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>
<p>这个配置其实已经成功了，所有字体都展示得很正常。不过，我们平常确实能看到很多带空格的 font family 是没有加引号的，这又是为什么呢？</p>
<h3 id="无所谓的优化">无所谓的优化</h3>
<p>经过进一步的查询，font family 在什么情况下要加引号和转义情况还是比较复杂的，需要先搞清楚 css 字符串和标识符之间的区别。</p>
<h4 id="字符串和标识符">字符串和标识符</h4>
<p>关于<span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1RSL0NTUzIvc3luZGF0YS5odG1sI3N0cmluZ3M=">字符串<i class="fa fa-external-link-alt"></i></span>，w3c 表示</p>
<blockquote>
<p>字符串可以放在单引号也可以放在双引号里，引号里面的相同引号需要转义。</p>
<p>Strings can either be written with double quotes or with single quotes. Double quotes cannot occur inside double quotes, unless escaped (e.g., as ‘&quot;’ or as ‘\22’). Analogously for single quotes (e.g., “'” or “\27”).</p>
</blockquote>
<p>而<span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1RSL0NTUzIvc3luZGF0YS5odG1sI2NoYXJhY3RlcnM=">标识符<i class="fa fa-external-link-alt"></i></span>的定义如下</p>
<blockquote>
<p>在 CSS 里，标识符(包括元素名称，类名，选择器里的 ID)只能包含字符[a-zA-Z0-9]，ISO 10646 里比 U+00A0 大的字符，还有连字符（-）和下划线（_）。标识符不能以数字，两个下划线后者一个下划线后面跟一个数字开头。标识符也能包含转义字符还有 ISO 10646 定义的数字编码。举个例子：<code>B&amp;W?</code>应该写成<code>B\&amp;W\?</code>或者 <code>B\26 W\3F</code>。</p>
<p>In CSS, identifiers (including element names, classes, and IDs in selectors) can contain only the characters [a-zA-Z0-9] and ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_); they cannot start with a digit, two hyphens, or a hyphen followed by a digit. Identifiers can also contain escaped characters and any ISO 10646 character as a numeric code (see next item). For instance, the identifier “B&amp;W?” may be written as “B&amp;W?” or “B\26 W\3F”.</p>
</blockquote>
<h4 id="空白字符">空白字符</h4>
<p><span class="exturl" data-url="aHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1mb250cy0zLyNmb250LWZhbWlseS1wcm9w">css 规范<i class="fa fa-external-link-alt"></i></span>指出</p>
<blockquote>
<p>字体族的名字要么作为字符串用引号包含起来，要么作为标识符，不需要引号。这就意味着在没有引号的名称里，开头的大多数标点符号和数字都需要被转义</p>
<p>Font family names other than generic families must either be given quoted as strings, or unquoted as a sequence of one or more identifiers. This means most punctuation characters and digits at the start of each token must be escaped in unquoted font family names.</p>
</blockquote>
<p>规范里用一个新的段落来说明：</p>
<blockquote>
<p>如果 font family 的名字是一系列标识符。那么计算机识别的最终值是单个空格分隔的标识符转换成字符串后的值。</p>
<p>If <strong>a sequence of identifiers</strong> is given as a font family name, the computed value is the name converted to a string by joining all the identifiers in the sequence by single spaces.</p>
</blockquote>
<p>所以<code>Microsoft YaHei</code>表示由多个空格分隔的标识符组成了单一字体族名称，而带引号的<code>'Microsoft YaHei'</code>仅是简单的字符串，都是合法的 CSS。</p>
<h4 id="字体族关键字">字体族关键字</h4>
<p>规范定义了一些通用关键字，</p>
<blockquote>
<p>通用关键字: serif, sans-serif, cursive, fantasy, 和 monospace.这些关键字可以作为普通的回退机制，以防期望的字体不可以用的时候。</p>
<p>The following generic family keywords are defined: ‘serif’, ‘sans-serif’, ‘cursive’, ‘fantasy’, and ‘monospace’.</p>
</blockquote>
<p>关于和关键字相同名称的字体族，</p>
<blockquote>
<p>当字体族名称恰好和关键字名称一样，那就必须套上引号来防止冲突。</p>
<p>Font family names that happen to be the same as keyword value (‘inherit’, ‘serif’, etc.) must be quoted to prevent confusion with the keywords with the same names.</p>
</blockquote>
<p>另，关键字都是不区分大小写的。</p>
<h4 id="总结">总结</h4>
<p>所以问题也就明晰了，之前不加引号，<code>Noto Serif SC</code>字体应用有问题，就是因为这个字体族名称中有<code>Serif</code>关键字，被解析成了<code>serif</code>并使用了浏览器默认配置的<code>serif</code>字体。</p>
<p>所以就能把配置进一步优化成我的最终配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">&quot;EB Garamond, &#x27;Noto Serif SC&#x27;&quot;</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>
<p>当然去除引号不是必要操作，加上引号还是比较保险的，单字体族的配置中遇到保留关键字也需要套上引号。要像下面这样套多层引号，否则编译的时候会被去掉一层。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">&quot;&#x27;Noto Serif SC&#x27;&quot;</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>解决WIN 10中Acrobat图标异常问题</title>
    <url>/posts/acrobat-icon/</url>
    <content><![CDATA[<p>在 WIN 10 上，Acrobat 的快捷方式图标总是出现异常，令人十分困扰。今天终于找到了解决的方法，在此记录一下。</p>
<span id="more"></span>
<h2 id="问题概述">问题概述</h2>
<p>Acrobat 的图标异常问题，究其原因是 WIN 10 系统自带的照片 APP 并不能很好地支持 ico 文件。而照片 APP 一般会被设置为系统默认图片查看器，有时就会出现图标显示异常的问题。如果有其他的图标出现显示异常，也有可能是这个原因。</p>
<h2 id="解决办法">解决办法</h2>
<p>知道了问题，那解决起来就非常简单了。那就是把<code>.ico</code>类型文件的关联程序设置为<code>画图</code>。</p>
<p>设置关联程序的办法有如下几个。</p>
<ol>
<li>找到任意 ico 文件，或将任意文件改为<code>.ico</code>后缀。右键点击该文件，在打开方式中把默认程序设置为画图。</li>
<li>在<code>设置</code>-<code>应用</code>-<code>默认应用</code>-<code>按文件类型指定默认应用</code>中找到<code>.ico</code>，将默认程序设置为画图。</li>
<li>在控制面板中也能找到。在<code>控制面板</code>-<code>程序</code>-<code>默认程序</code>-<code>将文件类型或协议与程序关联</code>中，选择<code>.ico</code>类型进行设置即可。不过最新的 WIN 10，在这里会跳回设置，按照上一种进行设置即可。</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Adobe</tag>
        <tag>Arcobat</tag>
      </tags>
  </entry>
  <entry>
    <title>超强 Adobe 系列软件一键破解工具——amtemu</title>
    <url>/posts/adobe-amtemu/</url>
    <content><![CDATA[<p>我今天想在这里介绍一个超强大的适用于全部 adobe 系列软件的一键破解工具——amtemu。虽然这个软件已经出了很久了，但是不妨碍它强大啊，能够有效破解最新版 adobe 系列软件。</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<p>AMT Emulator 是由俄罗斯技术论坛 Ru-Board 上的大神 Painter 制作的一款最新 Adobe 授权解除工具。简单易用，一键破解全部 Adobe 产品授权。该补丁实现通过了 Abobe 应用程序激活和解锁功能所有必要的类函数，基于本地 API 和最佳性能而优化，从而整个保护机制将被一个小巧的 dll 所替换，十分方便快捷！你甚至不需要断网，只需要正常安装软件，无论是否登录，用这个工具都能轻松解决授权问题。</p>
<h3 id="下载链接">下载链接</h3>
<p>请点击下载链接下载。</p>
<p>链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXlQVzBsbklMOTM5N196aDVtNVV4S0E=">百度网盘<i class="fa fa-external-link-alt"></i></span> 密码：6nz7</p>
<h2 id="配置">配置</h2>
<p>一般情况下，只要是软件中列出的软件版本，就只需要选择该软件版本，然后点击安装，将补丁保存到软件的 amtlib.dll 的所在位置，即可完成。Adobe 升级到 2018 新版本后，amtemu 同样能够正常破解，但由于软件中不包含现有配置，所以还需要进行一点配置。</p>
<p>配置清单如下，选用对应软件版本即可。Version 号可能会有变化，对应修改一下即可，大致是这样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Application Name: Adobe Acrobat DC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;AcrobatCont-18-Win-GM</span><br><span class="line">Version: 18.9.200</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Photoshop CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Photoshop-19-Win-GM</span><br><span class="line">Version: 19.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Illustrator CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Illustrator-22-Win-GM</span><br><span class="line">Version: 22.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe XD CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;XD-1-Win-GM</span><br><span class="line">Version: 1.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe After Effects CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;AfterEffects-15-Win-GM</span><br><span class="line">Version: 15.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Animate CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Animate-18-Win-GM</span><br><span class="line">Version: 18.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Audition CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Audition-11-Win-GM</span><br><span class="line">Version: 11.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Character Animator CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;CharacterAnimator-1-Win-GM</span><br><span class="line">Version: 1.1.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Dreamweaver CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Dreamweaver-18-Win-GM</span><br><span class="line">Version: 18.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe InDesign CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;InDesign-13-Win-GM</span><br><span class="line">Version: 13.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Muse CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Muse-18-Win-GM</span><br><span class="line">Version: 18.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Premier Pro CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;PremierPro-12-Win-GM</span><br><span class="line">Version: 12.0.0</span><br></pre></td></tr></table></figure>
<h2 id="Mac">Mac</h2>
<p>AMT Emulator 不仅有 Win 版，还有用于破解 Mac 上 Adobe 软件的 Mac 版。除了将 Application LEID 中的 Win 改成 Mac 以外，其余保持不变。</p>
<p><strong>参考来源：</strong><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL1BpcmFjeS9jb21tZW50cy83YnBpcTYvdHJpY2tfdG9fYWN0aXZhdGVfYWRvYmVfY2NfMjAxOF9pbmNsdWRpbmdfYWRvYmVfeGQv">Trick to Activate Adobe CC 2018 (including Adobe XD)<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Adobe</tag>
      </tags>
  </entry>
  <entry>
    <title>申请AdSense记录</title>
    <url>/posts/adsense/</url>
    <content><![CDATA[<p>在我博客改版后第一次尝试申请 Google AdSense，这次希望可以成功。</p>
<span id="more"></span>
<h2 id="开通过程">开通过程</h2>
<h3 id="检查网站内容">检查网站内容</h3>
<p>欸，出师不利，需要修改内容。</p>
<p><img data-src="https://img.iszy.xyz/20190318211328.png" alt=""></p>
<p>在我博客改版以前，我曾经申请过一次 Google AdSense，当时就失败了。和现在的状况其实差不多，就是告诉我发现了一些违规问题，解决以后才能放广告。但是吧，问题就是他并不告诉你到底哪里有问题，只叫你去参阅内容政策或访问帮助中心。当内容很多的时候，就很僵硬了，天知道哪篇内容违规了。</p>
<p>给你们看一下他们内容合作规范，就是禁止的一些内容。</p>
<blockquote>
<p>成人内容<br>
老少皆宜内容中的成人主题<br>
危险或诋毁内容<br>
与消遣性药物和毒品相关的内容<br>
与酒精饮料相关的内容<br>
与烟草相关的内容<br>
与赌博和游戏相关的内容<br>
与医疗保健相关的内容<br>
与黑客和破解相关的内容<br>
为用户操作提供报酬的网页<br>
与虚假陈述相关的内容<br>
惊悚内容<br>
与武器相关的内容<br>
助长欺诈行为的内容<br>
非法内容</p>
</blockquote>
<p>我前一次申请倒是没什么奇怪的内容，我归结于我文章太少了。这次吧，估计是站里分享了破解软件的问题了。欸，我还是撤掉吧，尊重知识产权也是应该，Google 还是挺有原则的。希望真的只是因为这个原因吧。</p>
<p>话说回来了，我真的希望 Google 能把发现问题的网址列一下，真的很有帮助啊，整改也知道方向啊。</p>
<p><img data-src="https://img.iszy.xyz/20190318211339.png" alt=""></p>
<p>这次似乎有些起色了，我隐约记得刚开始付款和设置两项都是灰的来着(一定是这样，不要打击我)。这次也过了好长时间没有通知我内容违规了，大概是已经在帮我开通 AdSense 了？话说完全激活 AdSense 到底需要多少时间呀，我等的很难受啊。</p>
<p>我真是太天真了，这个激活时间是真的长，6 天过去了，也没啥变化。看论坛里，等个把月的也不是没有。我就放在那里，随缘吧。</p>
<h3 id="成功开通">成功开通</h3>
<p>我也没有注意究竟花了多长时间，反正是开通成功了。今天偶然在邮箱中看到了 Google AdSense 发来的邮件，通知我已经成功开通，邮件内容大概如下图所示。</p>
<p><img data-src="https://img.iszy.xyz/20190318211409.png" alt=""></p>
<p>有不少新东西需要我来操作呢，我作为一个新手还需要来仔细研究研究，我也不希望我的站上到处出现奇怪的广告打乱我的布局。</p>
<p><img data-src="https://img.iszy.xyz/20190318211428.png" alt=""></p>
<p>在我收入达到 100 刀以前，不需要设置付款方式。</p>
<p><img data-src="https://img.iszy.xyz/20190318211444.png" alt=""></p>
<p>接下来我就去研究怎么放广告去咯。</p>
<h3 id="放置广告">放置广告</h3>
<p>像我这么懒的人当然会去选择自动广告啦，什么都不用处理，只要把代码复制到 head 中，其他就交给 Google 的 AI 自动解决啦，当然你也可以自行指定广告显示的位置。而且代码就是之前用来验证网站用的代码，也就是说我根本就不用进行修改，只要在 AdSense 当中启用自动广告就好了。</p>
<p>可以看到，可以设置各种各样的广告种类。我没有截全啦，还有其他的。我刚刚启用，暂时还没有看到广告的实际效果，还有待观望。不过嘛，我在其他人的博客上看着觉得效果还是很不错的。</p>
<p><img data-src="https://img.iszy.xyz/20190318211459.png" alt=""></p>
<h2 id="关于付款">关于付款</h2>
<p>提前稍微研究了下 AdSense 的付款，大陆支持的付款方式大致有三种，支票、西联汇款和电汇三种。</p>
<h3 id="支票">支票</h3>
<p>中国境内的发布商将由香港邮政负责通过普通邮寄方式为其递送付款。</p>
<p>所有支票付款均由花旗银行签发。如果收到的是美元支票，需要向银行确认他们是否与花旗银行存在代理关系。银行必须要有这种代理关系才能处理 AdSense 的美元支票。Google AdSense 支票只用于存款，不能兑现。</p>
<p>嘛，反正看着就很繁琐啦，这种支票不是拿着身份证去银行就能领钱的，还需要什么支票托收。虽然去银行直接交给工作人员办就行了，但我是不高兴弄了，有兴趣的可以自行了解一下。</p>
<h3 id="西联汇款">西联汇款</h3>
<p>西联汇款是一种付款方式，可让您使用西联全球汇款服务以现金形式接收您的 AdSense 付款。选择通过西联汇款接收付款意味着，相比存入支票，您不需要等待支票寄达，同时还可以减少银行费用以及结算时间。</p>
<p>但是，这就需要到西联的代理点去取钱。不是每个银行都支持西联收汇，我得研究一下我的卡能不能行。说是相比电汇没有手续费，要是能行就很棒了。</p>
<h3 id="电汇">电汇</h3>
<p>电汇是一种电子转帐方式，您可以通过这种方式直接在您的银行账户中接收资金。Google 会以美元或欧元的形式（具体取决于您的账户币种）将您的收入通过国际电汇汇入您指定的银行，然后您就可以从相应银行账户中取到这笔款项。这是一种快速、简单而又安全的收款方式。</p>
<p>显而易见，这是最方便的收款方式了。我有一张中信的借机卡，特意向中信的客服咨询了一波。以下是我像客服咨询的内容。</p>
<blockquote>
<p>开户行：中信银行北京 xx 支行<br>
SWIFT 代码：CIBKCNBJ100<br>
是否可以接收国际电汇：是的<br>
是否需要美元账户：默认美元可以正常接收，只要资金来源合法<br>
是否收手续费：中信接收不扣费，具体收费以转出方为准</p>
</blockquote>
<p>关于手续费，我只是看网上说会有 10 美元手续费，我不知道是哪边收的，反正问了中信是这么答的，或许 Google 会扣费，不管了。如果西联汇款不够方便，那就选择电汇了，方便是第一要义嘛。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>广告</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>ArcGIS批量生成UUID作为唯一ID</title>
    <url>/posts/arcgis-uuid/</url>
    <content><![CDATA[<p>最近需要将一批数据添加唯一 ID，UUID 作为一个具有唯一性的通用编号方案，正适合承担这个任务。</p>
<span id="more"></span>
<h2 id="UUID">UUID</h2>
<p>通用唯一识别码（英语：Universally Unique Identifier，缩写：UUID）是用于计算机体系中以识别信息数目的一个 128 位标识符，还有相关的术语：全局唯一标识符（GUID）。根据标准方法生成，不依赖中央机构的注册和分配，UUID 具有唯一性，这与其他大多数编号方案不同。重复 UUID 码概率接近零，可以忽略不计。</p>
<p>UUID 主要有五个算法，也就是五种方法来实现：</p>
<table>
<thead>
<tr>
<th>算法</th>
<th>方式</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>uuid1</td>
<td>基于时间戳</td>
<td>由 MAC 地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，但 MAC 的使用同时带来安全性问题，局域网中可以使用 IP 来代替 MAC。</td>
</tr>
<tr>
<td>uuid2</td>
<td>基于分布式计算环境 DCE</td>
<td>算法与 uuid1 相同，不同的是把时间戳的前 4 位置换为 POSIX 的 UID。实际中很少用到该方法。</td>
</tr>
<tr>
<td>uuid3</td>
<td>基于名字的 MD5 散列值</td>
<td>通过计算名字和命名空间的 MD5 散列值得到，保证了同一命名空间中不同名字的唯一性，和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的 uuid。</td>
</tr>
<tr>
<td>uuid4</td>
<td>基于随机数</td>
<td>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</td>
</tr>
<tr>
<td>uuid5</td>
<td>基于名字的 SHA-1 散列值</td>
<td>算法与 uuid3 相同，不同的是使用 Secure Hash Algorithm 1 算法</td>
</tr>
</tbody>
</table>
<h2 id="解决方案">解决方案</h2>
<p>通过上面的介绍，我们可以看出来，为了保证全局的唯一性，我们将使用 uuid1 方法来完成这项工作。</p>
<p>我们用 ArcGIS 打开我们需要创建唯一字段的矢量数据属性表，创建一个类型为 text 的新字段，打开字段编辑器(Field Calculator)。Parser 选择<code>Python</code>，勾选<code>Show Codeblock</code>，分别输入以下内容。</p>
<ul>
<li>
<p>Pre-Logic Script Code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUUID</span>():</span></span><br><span class="line">  val=(<span class="built_in">str</span>(uuid.uuid1())).lower()</span><br><span class="line">  <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>UUID = (你刚刚创建的字段名)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">getUUID()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img data-src="https://img.iszy.xyz/20190909102342.png" alt=""></p>
<p>点击 OK，等待运算完成，你将能看到所有的 feature 已经被赋予了 UUID。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>ArcGIS</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 16.04环境下使用ASF(v3)实现云挂卡</title>
    <url>/posts/asf-steam/</url>
    <content><![CDATA[<p>挂卡是什么，我再次就不赘述了。Steam 玩家估计都有所了解，还不清楚的可以谷歌一下。今天在此分享一下如何在在 Ubuntu 16.04 环境下使用 ArchiSteamFarm(v3)实现云挂卡，24 小时无人值守。</p>
<span id="more"></span>
<h2 id="环境">环境</h2>
<ul>
<li>主机：腾讯云香港云主机 1 核 1G</li>
<li>系统：Ubuntu 16.04</li>
<li>软件版本：ArchiSteamFarm V3.2.0.5</li>
</ul>
<h2 id="教程">教程</h2>
<h3 id="使用-root-权限">使用 root 权限</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>
<h3 id="安装-NET-Core"><span class="exturl" data-url="aHR0cDovL3huLS00OXNxNjZoLk5FVA==">安装.NET<i class="fa fa-external-link-alt"></i></span> Core</h3>
<h4 id="注册微软-key-和订阅源">注册微软 key 和订阅源</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb --no-check-certificate</span><br><span class="line">sudo dpkg -i packages-microsoft-prod.deb</span><br></pre></td></tr></table></figure>
<h4 id="安装-NET-SDK"><span class="exturl" data-url="aHR0cDovL3huLS00OXNxNjZoLk5FVA==">安装.NET<i class="fa fa-external-link-alt"></i></span> SDK</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install apt-transport-https</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install dotnet-sdk-2.1</span><br></pre></td></tr></table></figure>
<h3 id="安装-ASF">安装 ASF</h3>
<h4 id="下载最新稳定版-ASF">下载最新稳定版 ASF</h4>
<p>建议选用<code>Pre-release</code>版本，<code>Pre-release</code>版本可能存在稳定性问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/JustArchi/ArchiSteamFarm/releases/download/3.3.0.0/ASF-linux-x64.zip --no-check-certificate</span><br></pre></td></tr></table></figure>
<p>在<code>/home</code>中创建<code>asf</code>文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/asf &amp;&amp; <span class="built_in">cd</span> /home/asf</span><br></pre></td></tr></table></figure>
<p>解压软件到该目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip /root/ASF-linux-x64.zip</span><br></pre></td></tr></table></figure>
<h3 id="创建-bot-配置文件">创建 bot 配置文件</h3>
<p>这里只写最简单的配置，更多高级设置可以到<span class="exturl" data-url="aHR0cHM6Ly9qdXN0YXJjaGkuZ2l0aHViLmlvL0FyY2hpU3RlYW1GYXJtLyMv">ASF web config<i class="fa fa-external-link-alt"></i></span>上生成配置文件。</p>
<p>文件名字自取，这里我取名 test.json，所以这个 bot 的名称就叫 test。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /home/asf/config/test.json</span><br></pre></td></tr></table></figure>
<p>输入以下内容并保存，注意替换为自己的 steam 用户名和密码。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;SteamLogin&quot;</span>: <span class="string">&quot;yourusername&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SteamPassword&quot;</span>: <span class="string">&quot;yourpassword&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Enabled&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于 asf 就是模拟一个 steam 平台进行游戏，你的好友将会看到你正在游戏的状态。想要让 steam 显示离线状态，可以将配置文件换成以下内容。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;SteamLogin&quot;</span>: <span class="string">&quot;yourusername&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SteamPassword&quot;</span>: <span class="string">&quot;yourpassword&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;OnlineStatus&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行">运行</h3>
<h4 id="赋予执行权限">赋予执行权限</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x ArchiSteamFarm</span><br></pre></td></tr></table></figure>
<h4 id="开始运行">开始运行</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ArchiSteamFarm</span><br></pre></td></tr></table></figure>
<p>如果正常运行，现在已经开始自动挂卡了。</p>
<h3 id="保持后台运行">保持后台运行</h3>
<h4 id="方法一：Screen">方法一：Screen</h4>
<p>安装 screen</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install screen</span><br></pre></td></tr></table></figure>
<p>创建一个名为 asf 的窗口，并在其中执行程序。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S asf</span><br><span class="line">cd /home/asf</span><br><span class="line">./ArchiSteamFarm</span><br></pre></td></tr></table></figure>
<p>按<code>Ctrl+A+D</code>搁置窗口，程序已经在后台运行了，可以放心退出终端了。</p>
<p>其他命令：</p>
<ul>
<li>恢复 screen 窗口命令：<code>screen -r asf</code></li>
<li>退出 screen 窗口：在窗口中，先按<code>Ctrl+A</code>，再按<code>K</code>，最后输入<code>y</code>确认。</li>
</ul>
<h4 id="方法二：Systemd（推荐）">方法二：Systemd（推荐）</h4>
<p>安装 systemd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install systemd</span><br></pre></td></tr></table></figure>
<p>创建 service 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/asf.service</span><br></pre></td></tr></table></figure>
<p>输入以下内容并保存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Archi Steam Farm</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">EnvironmentFile=/etc/environment</span><br><span class="line">Environment=&quot;&quot;</span><br><span class="line">ExecStart=/home/asf/ArchiSteamFarm</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=15s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>现在可以运行了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service asf start  # 开始运行挂卡</span><br><span class="line">service asf stop   # 停止运行</span><br><span class="line">service asf status # 查看服务状态</span><br></pre></td></tr></table></figure>
<h2 id="更多功能">更多功能</h2>
<h3 id="steam-两部验证">steam 两部验证</h3>
<p>要知道，如果绑定了 steam 手机令牌的话，登录需要输入密钥，显然不可能在挂卡平台每次都手动输入密钥，这也太蠢了。那么我们就需要将令牌导入到 ASF 中，以实现自动登录。</p>
<p>各个平台操作不同，详情请见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1c3RBcmNoaS9BcmNoaVN0ZWFtRmFybS93aWtpL1R3by1mYWN0b3ItYXV0aGVudGljYXRpb24=">官方 WIKI<i class="fa fa-external-link-alt"></i></span>。我没有其他设备，这里就只说明以下安卓设备的方法。</p>
<h4 id="手机-root">手机 root</h4>
<p>首先，你需要有系统的 root 权限，这个不多说，每个设备都有所不同。</p>
<h4 id="提取令牌文件">提取令牌文件</h4>
<p>安装一个能够访问系统根目录的文件管理器，如<span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5lc3Ryb25ncy5hbmRyb2lkLnBvcA==">ES 文件浏览器<i class="fa fa-external-link-alt"></i></span>。</p>
<p>将文件<code>/data/data/com.valvesoftware.android.steam.community/files/Steamguard-XXX</code>复制出来，<code>XXX</code>是你的 SteamID。重命名为<code>BotName.maFile</code>并放置到<code>/home/asf/config</code>目录下，程序会自动检测并读取。如我的 bot 名字为 test，则重命名为<code>test.maFile</code>。</p>
<h4 id="提取设备-ID">提取设备 ID</h4>
<p>将文件<code>/data/data/com.valvesoftware.android.steam.community/shared_prefs/steam.uuid.xml</code>打开，找到如<code>android:XXXXXXXXXXXXXXXX</code>字样，这就是你的设备 ID，注意保存。</p>
<h4 id="输入设备-ID">输入设备 ID</h4>
<p>导入好令牌文件以后，首次启动，将会看到如下字样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] INFO: ImportAuthenticator() &lt;1&gt; Converting .maFile into ASF format...</span><br><span class="line">&lt;1&gt; Please enter your Device ID (including &quot;android:&quot;):</span><br></pre></td></tr></table></figure>
<p>这时输入你的设备 ID，连<code>android:</code>字样一起输入，回车。看到如下字样，表示你已经完成，以后启动就不再需要输入了，会自动登录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] INFO: ImportAuthenticator() &lt;1&gt; Successfully finished importing mobile authenticator!</span><br></pre></td></tr></table></figure>
<h4 id="注意事项">注意事项</h4>
<p><strong>注意：为了你的 steam 账号安全，切勿暴露你的令牌文件和设备 ID。拥有这些内容，将能任意变更你的账户。</strong></p>
<h3 id="启用-IPC">启用 IPC</h3>
<p>启用 IPC 将会提供 API 和图形化 GUI，可以远程进行控制。</p>
<p>编辑 ASF 配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /home/asf/config/ASF.json</span><br></pre></td></tr></table></figure>
<p>查找并修改相关内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;IPC&quot;: true,</span><br><span class="line">&quot;IPCPassword&quot;: null,</span><br><span class="line">&quot;IPCPrefixes&quot;: [</span><br><span class="line">    &quot;http://127.0.0.1:1242/&quot;</span><br><span class="line">],</span><br><span class="line">&quot;SteamOwnerID&quot;: &quot;你的64位id&quot;,</span><br></pre></td></tr></table></figure>
<p><code>IPCPassword</code>后改为你想要设置的密码，注意加双引号。<code>IPCPrefixes</code>设置为<code>127.0.0.1</code>，则只能本地访问；设置为<code>*</code>则可以从任意地址访问；可以设置多个监听地址，用逗号隔开。</p>
<h3 id="用-Telegram-远程控制-ASF-挂卡">用 Telegram 远程控制 ASF 挂卡</h3>
<p>提供给有需求的人，要求主机上 python 版本至少为 3.6。</p>
<h4 id="向-Telegram-申请-bot-token">向 Telegram 申请 bot token</h4>
<p>在 Telegram 里，搜索<code>@BotFather</code>机器人并启用。</p>
<p>发送以下命令：</p>
<ol>
<li>创建机器人：<code>/newbot</code></li>
<li>设定 bot 名称：<code>ASF</code>(任取，可重复，这里只是个例子)</li>
<li>设定 bot 用户名：<code>test_asf_bot</code>(任取，不可重复，这里只是个例子)</li>
</ol>
<p><code>@BotFather</code>会发给你一串 token，形如<code>123456789:XXXXXX-XXXXXXXXXX</code>，注意保留。</p>
<h4 id="申请-Chat-ID">申请 Chat ID</h4>
<p>在 Telegram 里，搜索<code>@FalconGate_Bot</code>机器人并启用。</p>
<p>发送命令：<code>/get_my_id</code></p>
<p><code>@FalconGate_Bot</code>会发给你一串数字，即是你的 Chat ID。</p>
<h4 id="安装telegram-bot-asf">安装<code>telegram_bot_asf</code></h4>
<p>请确保 python 版本正确</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/deluxghost/telegram-asf.git</span><br><span class="line">cd telegram-asf</span><br><span class="line">sudo pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>编辑<code>bot.py</code>，修改如下内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">token = <span class="string">&#x27;123456789:XXXXXX-XXXXXXXXXX&#x27;</span> <span class="comment"># 之前获取的bot token</span></span><br><span class="line">admin = <span class="string">&#x27;123456789&#x27;</span> <span class="comment"># 之前获取的Chat ID</span></span><br><span class="line">ipc_address = <span class="string">&#x27;http://127.0.0.1:1242/&#x27;</span> <span class="comment">#填写ASF的IPC监听地址</span></span><br><span class="line">ipc_password = <span class="string">&#x27;&#x27;</span> <span class="comment"># 填写ASF的IPCPassword，留空表示没有密码</span></span><br></pre></td></tr></table></figure>
<h4 id="后台启动-bot">后台启动 bot</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S bot</span><br><span class="line">python3 bot.py</span><br></pre></td></tr></table></figure>
<h4 id="在-Telegram-中使用这个-bot">在 Telegram 中使用这个 bot</h4>
<p>搜索刚刚你设定的 bot 用户名，并启用，你已经可以发送命令远程控制 ASF 了。这个机器人只有你能使用。</p>
<p><strong>常见命令</strong>：</p>
<p>帮助命令：<code>help</code></p>
<p><img data-src="https://img.iszy.xyz/20190318211533.png" alt=""></p>
<p>开始命令：<code>start</code></p>
<p><img data-src="https://img.iszy.xyz/20190318211546.png" alt=""></p>
<p>暂停命令：<code>pause</code></p>
<p><img data-src="https://img.iszy.xyz/20190318211557.png" alt=""></p>
<p>继续命令：<code>resume</code></p>
<p><img data-src="https://img.iszy.xyz/20190318211609.png" alt=""></p>
<p>查看状态命令：<code>status</code></p>
<p><img data-src="https://img.iszy.xyz/20190318211620.png" alt=""></p>
<p><img data-src="https://img.iszy.xyz/20190318211633.png" alt=""></p>
<p>查看版本命令：<code>version</code></p>
<p><img data-src="https://img.iszy.xyz/20190318211805.png" alt=""></p>
<p>激活 steam 密钥命令：<code>redeem &lt;key&gt;</code></p>
<p><img data-src="https://img.iszy.xyz/20190318211831.png" alt=""></p>
<p>更多命令，请参<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1c3RBcmNoaS9BcmNoaVN0ZWFtRmFybS93aWtpL0NvbW1hbmRz">官方 WIKI<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="后话">后话</h2>
<p>现在你已经成功搭建了云挂卡平台，尽情挂卡吧。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>Steam</tag>
        <tag>ASF</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)Javascript模块化编程（二）：AMD规范</title>
    <url>/posts/asynchronous_module_definition/</url>
    <content><![CDATA[<blockquote>
<p>原文链接: <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTIvMTAvYXN5bmNocm9ub3VzX21vZHVsZV9kZWZpbml0aW9uLmh0bWw=">Javascript 模块化编程（二）：AMD 规范<i class="fa fa-external-link-alt"></i></span> —— 阮一峰</p>
</blockquote>
<span id="more"></span>
<p>这个系列的<a href="https://www.iszy.cc/2019/08/14/javascript_module/">第一部分</a>介绍了 Javascript 模块的基本写法，今天介绍如何规范地使用模块。</p>
<p><img data-src="https://img.iszy.xyz/20190814100700.png" alt=""></p>
<p>（接<a href="https://www.iszy.cc/2019/08/14/javascript_module/">上文</a>）</p>
<h2 id="模块的规范">模块的规范</h2>
<p>先想一想，为什么模块很重要？</p>
<p>因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。</p>
<p>但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到 Javascript 模块现在还没有官方规范，这一点就更重要了。</p>
<p>目前，通行的 Javascript 模块规范共有两种：<span class="exturl" data-url="aHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvTW9kdWxlcy8xLjE=">CommonJS<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZGpzL2FtZGpzLWFwaS93aWtpL0FNRA==">AMD<i class="fa fa-external-link-alt"></i></span>。我主要介绍 AMD，但是要先从 CommonJS 讲起。</p>
<h2 id="CommonJS">CommonJS</h2>
<p>2009 年，美国程序员 Ryan Dahl 创造了<span class="exturl" data-url="aHR0cDovL25vZGVqcy5vcmcv">node.js<i class="fa fa-external-link-alt"></i></span>项目，将 javascript 语言用于服务器端编程。</p>
<p><img data-src="https://img.iszy.xyz/20190814100903.png" alt=""></p>
<p>这标志&quot;Javascript 模块化编程&quot;正式诞生。因为老实说，在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。</p>
<p>node.js 的<span class="exturl" data-url="aHR0cDovL25vZGVqcy5vcmcvZG9jcy9sYXRlc3QvYXBpL21vZHVsZXMuaHRtbA==">模块系统<i class="fa fa-external-link-alt"></i></span>，就是参照 <span class="exturl" data-url="aHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvTW9kdWxlcy8xLjE=">CommonJS<i class="fa fa-external-link-alt"></i></span> 规范实现的。在 CommonJS 中，有一个全局性方法 require()，用于加载模块。假定有一个数学模块 math.js，就可以像下面这样加载。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>然后，就可以调用模块提供的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>);</span><br><span class="line"></span><br><span class="line">math.add(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>因为这个系列主要针对浏览器编程，不涉及 node.js，所以对 CommonJS 就不多做介绍了。我们在这里只要知道，require()用于加载模块就行了。</p>
<h2 id="浏览器环境">浏览器环境</h2>
<p>有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。</p>
<p>但是，由于一个重大的局限，使得 CommonJS 规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题，你能看出来吗？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>);</span><br><span class="line"></span><br><span class="line">math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>
<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于&quot;假死&quot;状态。</p>
<p>因此，浏览器端的模块，不能采用&quot;同步加载&quot;（synchronous），只能采用&quot;异步加载&quot;（asynchronous）。这就是 AMD 规范诞生的背景。</p>
<h2 id="AMD">AMD</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZGpzL2FtZGpzLWFwaS93aWtpL0FNRA==">AMD<i class="fa fa-external-link-alt"></i></span>是&quot;Asynchronous Module Definition&quot;的缩写，意思就是&quot;异步模块定义&quot;。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>
<p>AMD 也采用 require()语句加载模块，但是不同于 CommonJS，它要求两个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="built_in">module</span>], callback);</span><br></pre></td></tr></table></figure>
<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数。如果将前面的代码改写成 AMD 形式，就是下面这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;math&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line">  math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>math.add()与 math 模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD 比较适合浏览器环境。</p>
<p>目前，主要有两个 Javascript 库实现了 AMD 规范：<span class="exturl" data-url="aHR0cDovL3JlcXVpcmVqcy5vcmcv">require.js<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N1am9qcy9jdXJs">curl.js<i class="fa fa-external-link-alt"></i></span>。本系列的第三部分，将通过介绍 require.js，进一步讲解 AMD 的用法，以及如何将模块化编程投入实战。</p>
<p>（完）</p>
]]></content>
      <categories>
        <category>应用</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AMD</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA信任自签名证书</title>
    <url>/posts/at8r9g/</url>
    <content><![CDATA[<p>这篇文章是为了解决 Java 使用 SSL 过程中出现<code>PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</code>的问题。</p>
<span id="more"></span>
<h2 id="问题">问题</h2>
<p>今天在给微服务添加自签名证书后，微服务间使用 SSL 验证权限时出现了如下错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br><span class="line">    at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)</span><br><span class="line">    at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302)</span><br><span class="line">    at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296)</span><br><span class="line">...</span><br><span class="line">Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br><span class="line">    at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)</span><br><span class="line">    at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)</span><br><span class="line">    at sun.security.validator.Validator.validate(Validator.java:260)</span><br><span class="line">    at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)</span><br><span class="line">    at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)</span><br></pre></td></tr></table></figure>
<p>这是因为自签名证书不被 Java 信任导致 SSL 握手失败。我看网上有不少是通过代码忽略证书验证来解决的，但是我觉得不能一刀切忽略验证，而是应该将特定证书添加到服务器的 Java 证书信任库中。</p>
<h2 id="Java-信任自签名证书">Java 信任自签名证书</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -import -trustcacerts -<span class="built_in">alias</span> nginx -file /opt/ssl/server.crt -keystore <span class="variable">$JAVA_HOME</span>/jre/lib/security/cacerts -storepass changeit -keyalg RSAs -noprompt</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li><code>-alias</code>，证书别名，可以任意填写，但不能重复</li>
<li><code>-file</code>，需要导入的证书路径</li>
<li><code>-keystore</code>，Java 证书库地址，默认地址为<code>$JAVA_HOME/jre/lib/security/cacerts</code></li>
<li><code>-storepass</code>，Java 证书库密码，默认密码为<code>changeit</code></li>
</ol>
</blockquote>
<p><img data-src="https://img.iszy.xyz/20210309181047.png?x-oss-process=style/big" alt=""></p>
<p>这样就将证书导入到了该服务器的 Java 证书信任库中了，<strong>涉及到这个证书的 Java 应用需要重启才能生效</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
        <tag>Java</tag>
        <tag>自签名证书</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>解决使用@vue/cli-plugin-babel导致动态import代码拆分失败问题</title>
    <url>/posts/b/</url>
    <content><![CDATA[<p>本文记录下使用 vue-cli 的 babel 插件导致动态 import 代码拆分失败的问题。</p>
<span id="more"></span>
<h2 id="前情提要">前情提要</h2>
<p>先前在项目中使用了<code>@vue/cli-plugin-babel</code>插件，打包时发现项目被打包成了一个非常大的 js 文件，动态 import 代码拆分失败了。</p>
<p>经过测试，基本确定就是由于加上了这个 babel 插件导致的，估计是 babel 的配置导致的问题。</p>
<p>经过查找插件和 babel 的官方文档，可以看到，<code>@vue/cli-plugin-babel</code>默认使用<code>Babel 7</code> + <code>babel-loader</code> + <code>@vue/babel-preset-app</code>，而<code>@vue/babel-preset-app</code>使用了<code>@babel/preset-env</code>，并支持了以下几个 stage 3 特性。</p>
<ul>
<li>Dynamic Import Syntax</li>
<li>Proposal Class Properties</li>
<li>Proposal Decorators (legacy)</li>
</ul>
<p>问题就出在这个<code>@babel/preset-env</code>，其中包含了一个插件叫<code>@babel/plugin-proposal-dynamic-import</code>，这个插件的作用就是将动态 import 转为 Promise 语法，这就导致 webpack 没法再对转换后的代码进行动态拆分。这个<code>@babel/preset-env</code>也是很多人使用的一个预设，所以估计有这个问题的人不在少数，下面的方法也是可以适用的。</p>
<p>原代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&quot;./moduleA&quot;</span>).then(<span class="comment">/* do stuff */</span>);</span><br></pre></td></tr></table></figure>
<p>转换后的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> <span class="built_in">require</span>(<span class="string">&quot;./moduleA&quot;</span>))</span><br><span class="line">  .then(<span class="comment">/* do stuff */</span>);</span><br></pre></td></tr></table></figure>
<h2 id="解决">解决</h2>
<p>既然问题已经清晰了，解决方法就比较明了了，就是要禁用<code>@babel/plugin-proposal-dynamic-import</code>插件。</p>
<h3 id="选项一（推荐）">选项一（推荐）</h3>
<p>比较直截了当的方法就是将这个插件直接排除掉。可以通过修改 babel 配置，通过 exclude 选项，将插件直接排除。</p>
<p>使用 <code>@vue/cli-plugin-babel</code> 的情况</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>, &#123; <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;proposal-dynamic-import&quot;</span>] &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接使用 <code>@babel/preset-env</code> 的情况</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [[<span class="string">&quot;@babel/preset-env&quot;</span>, &#123; <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;proposal-dynamic-import&quot;</span>] &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="选项二">选项二</h3>
<p>这个其实是<code>@babel/preset-env</code>的配置项，我没有测试过使用<code>@vue/cli-plugin-babel</code>时能否正确将参数传递到后面。</p>
<p>将 modules 参数设置为 false，则 Babel 将会保留 ES 模组，自然也就不会转换动态 import 语句了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [[<span class="string">&quot;@babel/preset-env&quot;</span>, &#123; <span class="attr">&quot;modules&quot;</span>: <span class="literal">false</span> &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Babel</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次支付宝反欺诈体验</title>
    <url>/posts/ba1jlj/</url>
    <content><![CDATA[<p>今天买电脑的时候，体验到了一波支付宝的反欺诈措施，感觉还挺新奇，稍微记录一下 hh。</p>
<span id="more"></span>
<p>或许支付宝的反欺诈措施已经实行很久了，我也不是很清楚，不过我还是第一次体验到，感觉还是很不错的。面对欺诈，很多人或许就是脑子一热，就被把钱骗走了，甚至欺骗的手段很多时候也并不高明，错漏百出，不知怎的在被骗的时候真就发现不了，事后才懊恼不已。旁人的一点提醒可能就会让你稍微回过神，理智一些，可能就能发现一些明显的漏洞。</p>
<p>支付宝在平常扫码支付给陌生联系人的时候，一般都会跳出一个简单的提醒，算是最基本的反欺诈吧。今天，我这个措施就更多一些，我在戴尔官网买电脑的时候，结算的时候通过支付宝扫描戴尔官方提供的建设银行的聚合付款码来进行付款。由于金额较大，在即将付款成功时，支付宝对交易做出了拦截，并弹出反欺诈提醒，并让我确认没有问题的话，再次进行支付。在第二次进行支付前，弹出了反欺诈小问卷，包含了几道关于可能受到诈骗的情形和返利刷单违法说明的题目，答案应该是显而易见的，但如果确实受害者是在被骗，可能会在这里意识到自己有可能是其中的某种情况而去重新确认交易。与此同时，会接到支付宝打来的关于反欺诈调查的电话，电话语音应该是 AI 的，确认了一下购买的内容、是否可能是诈骗、有没有进行返利刷单等内容，在听到你语音确认后，会再次对你做出反欺诈的提醒，并挂断电话。在反欺诈小问卷做完提交后，没什么问题，支付才能正常通过。</p>
<p>经过反复确认，我觉得欺诈风险应该是降低了很多，我并没有觉得太繁琐，支付宝对大额交易多做一些确认是对用户负责的表现，也能让用户更多地对在支付宝上进行付款的安全性有信心。不过吧，我也没有真的被骗，不清楚如果真的还是被骗了，支付宝会有些什么样的补救措施，如果有那就更好了。</p>
<p>当然，支付宝做的这些措施并不一定就一定有效了，关键还是要我们自己能够擦亮双眼，识别出骗局，保护好自己的财产。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>Powershell 美化——oh-my-posh</title>
    <url>/posts/beautify-powershell/</url>
    <content><![CDATA[<p>为什么想到干这个事呢？这两天装了 WSL，但是 PowerShell 的配色实在让我无法忍受，有时候甚至到了看不清字的程度。经过一番谷歌，我发现 PowerShell 也是可以变得很好看的。下面我就记录一下我这次美化的过程。</p>
<span id="more"></span>
<h2 id="安装包管理器scoop">安装包管理器<code>scoop</code></h2>
<p><code>scoop</code>是 Windows 中超级好用的一个包管理器，许多软件可以通过这个包管理器直接傻瓜式安装，连环境变量也会自动配置好。可以类比 Linux 中的<code>yum</code>或者<code>apt</code>，用习惯了会爱不释手的，非常推荐。</p>
<h3 id="更改脚本执行策略">更改脚本执行策略</h3>
<p>如果你没有打开运行远程签名的脚本文件则会提示你输入下面的指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br></pre></td></tr></table></figure>
<h3 id="安装scoop">安装<code>scoop</code></h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">iex</span> (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="安装需要的软件">安装需要的软件</h2>
<h3 id="安装concfg">安装<code>concfg</code></h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x1a2VzYW1wc29uL2NvbmNmZw==">lukesampson/concfg<i class="fa fa-external-link-alt"></i></span>  可以用来导入和导出 Windows 控制台的设置。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install concfg</span><br></pre></td></tr></table></figure>
<p>如果需要卸载可以输入<code>scoop uninstall concfg</code>。</p>
<h3 id="安装git">安装<code>git</code></h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install git</span><br></pre></td></tr></table></figure>
<p>此时，<code>git</code>的环境变量是设置在当前用户下的。如果需要设置在系统下，可以通过以下语句安装。需要使用<code>sudo</code>来提升权限，是的，就是<code>Linux</code>中的那个<code>sudo</code>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install sudo</span><br><span class="line">sudo scoop install <span class="literal">-g</span> git</span><br></pre></td></tr></table></figure>
<h3 id="安装posh-git">安装<code>posh-git</code></h3>
<p><code>posh-git</code> 是 <code>oh-my-posh</code> 的依赖，在<code>scoop</code>的<code>extras</code>包中。</p>
<p>先添加名为<code>extras</code>的<code>bucket</code>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br></pre></td></tr></table></figure>
<p>安装<code>posh-git</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install posh<span class="literal">-git</span></span><br></pre></td></tr></table></figure>
<h3 id="安装oh-my-posh">安装<code>oh-my-posh</code></h3>
<p><code>oh-my-posh</code>在<code>scoop</code>的主包中，直接安装即可。这个软件能够让你的<code>PowerShell</code>有着接近<code>Linux</code>中<code>Oh-my-zsh</code>的效果。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br></pre></td></tr></table></figure>
<h2 id="添加字体">添加字体</h2>
<h3 id="下载并安装字体">下载并安装字体</h3>
<p>系统中默认的字体缺失了一些<code>oh-my-posh</code>需要用到的字符，所以需要安装一个可以支持的字体。</p>
<p>我选择 <strong>sarasa gothic</strong> 系列字体，可以在 <a href="https://github.com/be5invis/Sarasa-Gothic/releases"><strong>sarasa gothic</strong></a> 下载，然后右键安装字体即可。</p>
<h3 id="修改注册表">修改注册表</h3>
<p>为了能够在配置里使用，还需要修改注册表。</p>
<p>按 <code>WIN+R</code> 打开运行，输入 <code>regedit</code> 打开注册表编辑器。</p>
<p>在 <code>HKEY_LOCAL_MACHINE &gt;&gt; SOFTWARE &gt;&gt; Microsoft &gt;&gt; Windows NT &gt;&gt; CurrentVersion &gt;&gt; Console &gt;&gt; TrueTypeFont</code> 路径下新增一个字符串项目，名称任意，内容为 <code>Sarasa Term SC</code>。</p>
<h2 id="应用配置">应用配置</h2>
<p>新建一个 <code>1.json</code> 文件，键入如下内容，也可以根据自身需求自行修改。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;cursor_size&quot;</span>: <span class="string">&quot;small&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;command_history_length&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">&quot;num_history_buffers&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">&quot;command_history_no_duplication&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;quick_edit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;insert_mode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;load_console_IME&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;font_face&quot;</span>: <span class="string">&quot;Sarasa Term SC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;font_true_type&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;font_size&quot;</span>: <span class="string">&quot;0x18&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;font_weight&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;screen_buffer_size&quot;</span>: <span class="string">&quot;120x30000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;window_size&quot;</span>: <span class="string">&quot;120x30&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;fullscreen&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;popup_colors&quot;</span>: <span class="string">&quot;cyan,white&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;screen_colors&quot;</span>: <span class="string">&quot;white,black&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#1E1E1E&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dark_blue&quot;</span>: <span class="string">&quot;#2472C8&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dark_green&quot;</span>: <span class="string">&quot;#0DBC79&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dark_cyan&quot;</span>: <span class="string">&quot;#11A8CD&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dark_red&quot;</span>: <span class="string">&quot;#CD3131&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dark_magenta&quot;</span>: <span class="string">&quot;#BC3FBC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dark_yellow&quot;</span>: <span class="string">&quot;#E5E510&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gray&quot;</span>: <span class="string">&quot;#E5E5E5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dark_gray&quot;</span>: <span class="string">&quot;#666666&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#3B8EEA&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#23D18B&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#29B8DB&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#F14C4C&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;magenta&quot;</span>: <span class="string">&quot;#D670D6&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#F5F543&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#E5E5E5&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在所在文件夹处打开 <code>PowerShell</code>，输入 <code>concfg import 1.json -n</code> 后开启新 <code>PowerShell</code> 窗口可以看到显示效果已经改变。</p>
<p>**注：**使用过程中发现，更新<code>git</code>后，字体会出现问题，不知道是什么原因。出现这个问题也不用担心，只需要重新执行一遍上面这个应用配置的过程即可。</p>
<h2 id="启用oh-my-posh">启用<code>oh-my-posh</code></h2>
<p>启用<code>oh-my-posh</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br></pre></td></tr></table></figure>
<p>但这还只是手动启用，所以我们需要设置<code>profile</code>文件让它自动启用。</p>
<p>敲<code>$profile</code>可以让 PowerShell 告诉我们这个文件的路径是什么。</p>
<p>编辑该文件，如果不存在则手动创建，再其中输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br></pre></td></tr></table></figure>
<p>以后，都将会自动启用 <code>oh-my-posh</code>。</p>
<h3 id="设置主题">设置主题</h3>
<p>我选择了 <code>Agnoster</code> 主题。</p>
<p>输入如下命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-Theme</span> Agnoster</span><br></pre></td></tr></table></figure>
<p>显示效果如下，我认为是十分美观的。</p>
<p><img data-src="https://img.iszy.xyz/20190318211904.png" alt=""></p>
<p>其他可选主题有 <code>Agnoster</code>、<code>Avit</code>、<code>Darkblood</code>、<code>Fish</code>、<code>Honukai</code>、<code>Paradox</code>、<code>Sorin</code>、<code>tehrob</code>，可自行选择。</p>
<p>不知为何，这个主题设置并没有自动保存。</p>
<p>可以通过把<code>Set-Theme Agnoster</code>这样的命令添加到之前的<code>profile</code>最后来永久保留。</p>
<h2 id="后话">后话</h2>
<p>至此，美化完成，相比之前的蓝底 PowerShell，我自认为已经好看了很多。我在 WSL 里也安装了 oh-my-zsh 可以说是完美衔接了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Scoop</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>用一个闲置域名尝试一下网站备案</title>
    <url>/posts/beian/</url>
    <content><![CDATA[<p>国内的各种服务都需要有一个被过案的域名才能使用，没有备案在国内环境下实在是有些不方便。我曾经也想过备案来着，但是看着备案的流程就头大，想着备过案后还要时刻提防着监管，防止触线，内心烦躁，还是没有去搞备案。现在我正好有几个闲置的域名，我拿出一个 <code>iszy.xyz</code> 的域名来尝试备个案，以后也能用这个域名来做点事。这篇文章就来记录一下我的备案流程。</p>
<span id="more"></span>
<h2 id="经过">经过</h2>
<h3 id="购买国内空间">购买国内空间</h3>
<p>我是不准备用这个域名建站的，所以说买国内主机就很不合算了，我的目标是国内便宜的静态虚拟主机。</p>
<p>于是我在<span class="exturl" data-url="aHR0cHM6Ly93d3cud2VzdC5jbi8=">西部数码<i class="fa fa-external-link-alt"></i></span>，买下了一个 48 元/年的静态型虚拟主机，国内电信机房。这个价格我已经非常满意了，应该来说没有多少更便宜的了吧。</p>
<p>虚拟主机的参数如下，静态虚拟主机顾名思义，只能放静态网站。反正我也不准备建站，所以无所谓了。</p>
<p><img data-src="https://img.iszy.xyz/20190318211946.png?x-oss-process=style/big" alt=""></p>
<h3 id="填写备案信息">填写备案信息</h3>
<p>在西部数码的备案平台上点首次备案，然后开始填写备案信息。</p>
<p>由于主体为个人，主办单位或主办人资料、主办单位负责人资料、网站负责人资料就全是我的个人资料了。还要上传身份证正反照片，在这个网站上能够分别上传正反照片，它会自动帮你拼接成一个照片进行上传。</p>
<p>域名证书这东西属于中国特色，我在国外注册的域名所以不存在这种东西，在网上搜域名证书生成器会很方便地帮你生成，应该不成问题。</p>
<p>在提交管局之前还有最后一步，要上传核验照片和手写的核验单。照片背景必须是符合工信部规定的专用备案幕布，普通照片将会被管局直接拒绝，真的是很棒棒呢。我是不准备买这个幕布了，而且家里也没有打印机和扫描仪，无法完成这一步，我准备过两天去核验点完成这项工作。建个站还要像犯人一样站在专用的幕布前拍照片，可以说是非常人性化了呢。</p>
<h3 id="核验">核验</h3>
<p>家附近就有一家核验点，感觉还挺方便，骑个小电瓶就去了。还是很方便的，按要求填了下核验单，然后用手机拍了下背后有专用幕布的核验照，又拍了下核验单就算是结了。对的，你没听错，就是用手机拍的。那个核验幕布就挂在人家办公室墙上，你往那一站，人家手机拍一下就完了。就是这么拍张照收 30 元也是蛮有意思，既然是规定的，我也就无所谓了。下次可以选择幕布寄到家，自己拍，反正也是 30 元。回家上传了照片，现在就进入到了接入商审核阶段。我看时间也就 1~2 天，那就等吧，助我好运。</p>
<h3 id="接入商审核被退回">接入商审核被退回</h3>
<p>今天看到备案资料被接入商审核退回了，理由是“域名证书上无域名注册商公章，请重新提供加盖域名注册商公章的域名证书”。黑人问号脸，我 namecheap 上注册的域名哪里来的如此中国特色的东西，本来就是我在线生成的。以前看网上说能行，现在看来是不行了。国内的审核啊，就是那么千方百计地想让国内与世界脱节，中国果然不属于世界范畴。</p>
<p><img data-src="https://img.iszy.xyz/20190318212004.png?x-oss-process=style/big" alt=""></p>
<p>大致是因为现在要求域名实名制了吧，国外注册的域名没办法也不可能搞什么实名认证。也就是说现在想要备案，不仅是空间要在国内，域名也得在国内，这也就意味着能够一键中止你的解析，你一点办法都没有。</p>
<p>话说这个备案也很有意思啊。域名备案不以域名为主体，反而以空间为主体就很反人类了，不同域名注册商还不通用，换个服务器就得更改备案，我还不能随便用服务了。现在嘛，域名实名制了，由于这一点就让需要备份的域名只能在国内注册，又有了实名，也就是出了问题，停止解析就完了，这个网站空间的备案要求留着还有啥用啊。</p>
<p>我先考虑一下吧，要不要继续备案。反正也是个闲置域名不准备建站，只是想在国内的对象存储套上自定义域名，迁回国内问题也不是很大吧，就是不太爽。</p>
<h3 id="将域名转入国内">将域名转入国内</h3>
<p>由于需要注册满 60 天才能转移，我还是将我以前的一个闲置域名移到了西部数码。又要续费一年真是心痛。</p>
<p>namecheap 似乎不会来主动发确认邮件，还是西部数码真的到了第七天才发了请求？我在第七天才姗姗来迟地收到了 namecheap 地确认转移地邮件。过了一段时间转移成功了，中国特色的实名认证也已经完成了，看来域名的准备算是完成了。</p>
<h3 id="更改域名重新提交备案">更改域名重新提交备案</h3>
<p>西部数码属于有备案资质的国内接入商，域名证书已经能够下载了。重新补充了域名证书，更改了需要备案的网站域名，我还 P 了下我的备案核验单照片，因为不想看到我的核验单上有修改的痕迹，不知道会不会有影响。</p>
<p>在这次提交过程中，我也因为个人疏忽的一些小错误，被接入商审核退回了几次。在这里提醒大家注意。</p>
<ul>
<li>核验单域名要和申请备案的域名一致（废话）</li>
<li>核验单需要原件扫描或拍照，不能打印</li>
<li>域名证书需要域名注册商公章（这是之前遇到的问题）</li>
<li>个人博客备案的网站名，必须是“XXX 的个人主页”，XXX 是你的姓名，不能随便乱写</li>
</ul>
<p>差不多就是这些问题。现在已经通过了接入商审核，正在等待管局审核。管局审核时间在 20 天左右，部分管局审核较快，在 3~5 天，慢慢等咯。</p>
<p><img data-src="https://img.iszy.xyz/20190318212050.png?x-oss-process=style/big" alt=""></p>
<h3 id="审核通过">审核通过</h3>
<p>审核通过啦，可喜可贺。我审核期间连解析都暂停了，也没拖多久就通过了，平均水平吧。至此备案完成，国内的各种对象存储的自定义域名都能用啦。emmm，我就是为了这个备案的。</p>
<p><img data-src="https://img.iszy.xyz/20190318212107.png?x-oss-process=style/big" alt=""></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>备案</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现UTF-8下的Base64编解码</title>
    <url>/posts/c/</url>
    <content><![CDATA[<p>记录下 JavaScript 实现 UTF-8 下的 Base64 编解码。</p>
<span id="more"></span>
<h2 id="小工具">小工具</h2>
<p>这边做了个 Base64 编解码的小工具，供大家使用。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pc3p5Lnh5ei9jcnlwdG8vYmFzZTY0">Base64 编解码<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Base64-编解码">Base64 编解码</h2>
<blockquote>
<p>来源：<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0">Base64-维基百科<i class="fa fa-external-link-alt"></i></span> &gt; <strong>Base64</strong>（基底 64）是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mrow><mn>2</mn></mrow></msub><mn>6</mn><mn>4</mn><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">log_{2}64 = 6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">6</span><span class="mord mathrm">4</span><span class="mrel">=</span><span class="mord mathrm">6</span></span></span></span>，所以每 6 个比特为一个单元，对应某个可打印字符。3 个字节相当于 24 个比特，对应于 4 个 Base64 单元，即 3 个字节可由 4 个可打印字符来表示。在 Base64 中的可打印字符包括字母 A-Z、a-z、数字 0-9，这样共有 62 个字符，此外两个可打印符号在不同的系统中而不同。一些如 uuencode 的其他编码方法，和之后 BinHex 的版本使用不同的 64 字符集来代表 6 个二进制数字，但是不被称为 Base64。<br>
Base64 常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括 MIME 的电子邮件及 XML 的一些复杂数据。</p>
</blockquote>
<p>其实在 JavaScript 中，原生就有两个函数被分别用来处理解码和编码 base64 字符串：</p>
<ul>
<li><code>btoa()</code>: 从二进制数据的“字符串”创建一个 Base64 编码的 ASCII 字符串（“btoa”其实是“二进制转 ASCII”的意思）。</li>
<li><code>atob()</code>: 解码 Base64 编码的字符串（“atob”其实是“ASCII 到二进制”的意思）。</li>
</ul>
<p>其中的使用的算法在<span class="exturl" data-url="aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmM0NjQ4I3NlY3Rpb24tNA==">RFC 4648, 第四段<i class="fa fa-external-link-alt"></i></span>中进行了描述。</p>
<p><img data-src="https://img.iszy.xyz/1643809821264.png" alt="The Base 64 Alphabet"></p>
<p>可以通过<code>window.atob(string)</code>、<code>window.btoa(base64string)</code>的方式调用，非常方便。</p>
<h2 id="UTF-8-字符串编解码">UTF-8 字符串编解码</h2>
<p>如上面的描述所言，<code>btoa</code>和<code>atob</code>都只支持 ASCII 字符，并不支持 Unicode 字符。在大多数浏览器中对 Unicode 字符串调用将会报<code>Character Out Of Range</code>错误，因为字符超出了 ASCII 的范围。</p>
<h3 id="解决方法">解决方法</h3>
<p>我们可以将字符串转义过后再进行编码，解码时将解码结果重新转义为 Unicode 字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(atob(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例:</span></span><br><span class="line">utf8_to_b64(<span class="string">&quot;测试&quot;</span>); <span class="comment">// &quot;5rWL6K+V&quot;</span></span><br><span class="line">b64_to_utf8(<span class="string">&quot;5rWL6K+V&quot;</span>); <span class="comment">// &quot;测试&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="解析">解析</h3>
<p>这中间看起来比较神奇，发生了个什么事呢？</p>
<p>主要呢就是利用了<code>encodeURIComponent</code>、<code>decodeURIComponent</code>会把接受到的字符串参数当作 UTF-8 字符串来进行处理。</p>
<h4 id="utf8-to-b64">utf8_to_b64</h4>
<p>先看<code>utf8_to_b64</code>方法。</p>
<p>这里由于<code>encodeURIComponent</code>方法接受的是 UTF-8 字符串，可以先用<code>encodeURIComponent</code>方法将 UTF-8 字符串转成了形如<code>%XX%XX</code>的十六进制符号。然后使用<code>unescape</code>方法将十六进制翻译为了 ASCII 中对应的内容，这样就变成了<code>btoa</code>方法能够接受的 ASCII 字符串。最后直接使用<code>btoa</code>方法编码为 Base64 字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&quot;测试&quot;</span>); <span class="comment">// &quot;%E6%B5%8B%E8%AF%95&quot;</span></span><br><span class="line"><span class="built_in">unescape</span>(<span class="string">&quot;%E6%B5%8B%E8%AF%95&quot;</span>); <span class="comment">// &quot;æµ\x8Bè¯\x95&quot;</span></span><br><span class="line">btoa(<span class="string">&quot;æµ\x8Bè¯\x95&quot;</span>); <span class="comment">// &quot;5rWL6K+V&quot;</span></span><br></pre></td></tr></table></figure>
<p>总的来说就是一个将 UTF-8 字符串转为 ASCII 字符串再编码的一个过程。</p>
<h4 id="b64-to-utf8">b64_to_utf8</h4>
<p>再看<code>b64_to_utf8</code>方法。</p>
<p>其实就是反过来，先将 Base64 字符串通过<code>atob</code>方法解码为 ASCII 字符串，然后通过<code>escape</code>方法将 ASCII 字符串转为十六进制符号，最后将十六进制符号通过<code>decodeURIComponent</code>方法解析为 UTF-8。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">atob(<span class="string">&quot;5rWL6K+V&quot;</span>); <span class="comment">// &quot;æµ\x8Bè¯\x95&quot;</span></span><br><span class="line"><span class="built_in">escape</span>(<span class="string">&quot;æµ\x8Bè¯\x95&quot;</span>); <span class="comment">// &quot;%E6%B5%8B%E8%AF%95&quot;</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%E6%B5%8B%E8%AF%95&quot;</span>); <span class="comment">// &quot;测试&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="弃用unescape和escape方法">弃用<code>unescape</code>和<code>escape</code>方法</h3>
<h4 id="原由">原由</h4>
<blockquote>
<p>该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。</p>
</blockquote>
<p>可以看到<code>unescape</code>和<code>escape</code>方法已经被标记为废弃，并推荐使用<code>decodeURI</code>或<code>decodeURIComponent</code>替代<code>unescape</code>，推荐使用 <code>encodeURI</code> 或 <code>encodeURIComponent</code> 替代<code>escape</code>。</p>
<p>根据<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTk5JUJFJUU1JTg4JTg2JUU1JThGJUI3JUU3JUJDJTk2JUU3JUEwJTgx">百分号编码-维基百科<i class="fa fa-external-link-alt"></i></span>中的内容可以知道，<code>escape</code> 在处理 <code>0xff</code> 之外字符的时候，是直接使用字符的 <code>unicode</code> 在前面加上一个 「%u」，而 <code>encodeURI</code> 则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个 「%」</p>
<blockquote>
<p>2005 年 1 月发布的 RFC 3986，建议所有新的 URI 必须对未保留字符不加以百分号编码；其它字符建议先转换为 UTF-8 字节序列, 然后对其字节值使用百分号编码。此前的 URI 不受此标准的影响。<br>
有一些不符合标准的把 Unicode 字符在 URI 中表示为: <code>%uxxxx</code>, 其中 xxxx 是用 4 个十六进制数字表示的 Unicode 的码位值。任何 RFC 都没有这样的字符表示方法，并且已经被 W3C 拒绝 （页面存档备份，存于互联网档案馆）。第三版的 ECMA-262 仍然包含函数<code>escape(string)</code>使用这种语法, 但也有函数<code>encodeURI(uri)</code>转换字符到 UTF-8 字节序列并用百分号编码每个字节。</p>
</blockquote>
<p>所以<code>escape</code>是对百分号编码的非标准实现，所以被废弃实属正常。</p>
<h4 id="解决方法-2">解决方法</h4>
<p>虽说<code>escape</code>是对百分号编码的非标准实现，但是在上面的方法中我们实际上利用了<code>escape</code>的这种特性，这边提供了不使用<code>unescape</code>和<code>escape</code>方法后的实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> btoa(</span><br><span class="line">    <span class="built_in">encodeURIComponent</span>(str).replace(<span class="regexp">/%([0-9A-F]&#123;2&#125;)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, p1</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(<span class="string">&quot;0x&quot;</span> + p1);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(</span><br><span class="line">    atob(str)</span><br><span class="line">      .split(<span class="string">&quot;&quot;</span>)</span><br><span class="line">      .map(<span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%&quot;</span> + (<span class="string">&quot;00&quot;</span> + c.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>)).slice(-<span class="number">2</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例:</span></span><br><span class="line">utf8_to_b64(<span class="string">&quot;测试&quot;</span>); <span class="comment">// &quot;5rWL6K+V&quot;</span></span><br><span class="line">b64_to_utf8(<span class="string">&quot;5rWL6K+V&quot;</span>); <span class="comment">// &quot;测试&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Node-js-下的-Base64-编解码">Node.js 下的 Base64 编解码</h2>
<p>在 Node.js 中使用上面的方法，你可能会发现，<code>btoa</code>和<code>atob</code>方法，由于只支持 ASCII 方法也已经被标记为废弃了，那么在 Node.js 中用什么方法呢？</p>
<p>Node.js 中提供了一个更加简便的方法，那就是利用<code>Buffer</code>，除了支持字符串，也支持其他数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Buffer.from(str).toString(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Buffer.from(str, <span class="string">&quot;base64&quot;</span>).toString(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS 使用 Caddy 快速搭建 Nextcloud 全过程</title>
    <url>/posts/caddy-nextcloud/</url>
    <content><![CDATA[<p>今天准备做一个完整的采用 Caddy Web Server 部署 NextCloud 的教程。本教程除 Web 服务器配置，部分参考橙叶博客文章——<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JnbGVhZi5jb20vMjIwMy5odG1s">VPS 快速完美部署 ownCloud/Nextcloud 全过程<i class="fa fa-external-link-alt"></i></span>。有什么问题，欢迎在评论区留言或者联系我，我一定会及时回复的。</p>
<span id="more"></span>
<h2 id="VPS-及系统环境">VPS 及系统环境</h2>
<ul>
<li>VPS：国内腾讯云的香港云主机</li>
<li>系统：Ubuntu 16.04</li>
</ul>
<p>我采用的 VPS 是国内腾讯云的香港云主机，全世界范围内 ping 值都很低，按流量计费最大能开到 200M 带宽。毕竟是腾讯的，国内访问速度出奇的快。</p>
<p>系统采用的是 Ubuntu 16.04，Debian 系的应该都能够一样实现吧。</p>
<h2 id="DNS-解析">DNS 解析</h2>
<p>Caddy Web Server 会自动申请 ssl 证书，全站 https，但是需要提前将域名解析到所在 VPS，否则 Caddy 会启动失败。不需要 ssl 的或想要 IP 访问的请自行调整 Caddy 配置。</p>
<p><img data-src="https://img.iszy.xyz/20190318212135.png?x-oss-process=style/big" alt=""></p>
<h2 id="环境配置">环境配置</h2>
<p>ssh 登录 VPS 后，在 root 用户下继续执行下面的操作。</p>
<h3 id="更新软件源">更新软件源</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>
<h3 id="安装-Caddy">安装 Caddy</h3>
<p>为节省时间，此处采用了 Toyo 大佬的一键脚本。详细页面参见：<span class="exturl" data-url="aHR0cHM6Ly9kb3ViLmlvL3NoZWxsLWpjMS8=">『原创』Go 语言 跨平台支持的极简 HTTP Server —— Caddy 一键安装脚本<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://softs.loan/Bash/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.cgi,http.expires,http.filemanager,http.git,http.filter</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果上面这个脚本无法下载，尝试使用备用下载：</span></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.cgi,http.expires,http.filemanager,http.git,http.filter</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="使用说明">使用说明</h3>
<p><strong>启动：</strong>/etc/init.d/caddy start</p>
<p><strong>停止：</strong>/etc/init.d/caddy stop</p>
<p><strong>重启：</strong>/etc/init.d/caddy restart</p>
<p><strong>查看状态：</strong>/etc/init.d/caddy status</p>
<p><strong>查看 Caddy 启动日志：</strong> tail -f /tmp/caddy.log</p>
<p><strong>安装目录：</strong>/usr/local/caddy</p>
<p><strong>Caddy 配置文件位置：</strong>/usr/local/caddy/Caddyfile</p>
<p><strong>Caddy 自动申请 SSL 证书位置：</strong>/.caddy/acme/acme-v02.api.letsencrypt.org/sites/xxx.xxx(域名)/</p>
</blockquote>
<h2 id="安装并配置-MySQL">安装并配置 MySQL</h2>
<h3 id="安装">安装</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></table></figure>
<p>将会有图形界面用以设定 root 密码，根据提示进行操作即可。</p>
<h3 id="配置">配置</h3>
<p>这里采用 SQL 命令配置数据库</p>
<ol>
<li>
<p>登录数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建名为 nextcloud 的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE nextcloud;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>切换数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE nextcloud;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建名为 nextcloud 的用户，密码为 password (注意替换为自己的)，并赋予权限。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">All</span>  <span class="keyword">ON</span> nextcloud.<span class="operator">*</span> <span class="keyword">TO</span> nextcloud<span class="variable">@localhost</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>登出数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="安装-php7-0">安装 php7.0</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install php7.0 php7.0-mbstring php7.0-zip php7.0-dom php7.0-xml php7.0-gd php7.0-curl php7.0-mysql -y</span><br></pre></td></tr></table></figure>
<p>打开 <code>/etc/php/7.0/fpm/pool.d/www.conf</code> 查看 <code>php7.0-fpm</code> 监听的地址，<strong>留作后用</strong>。不同系统可能位置不同，也可能配置在 <code>/etc/php7.0/fpm/php-fpm.conf</code> 中。</p>
<p>监听地址可能为以下两种：</p>
<ul>
<li>语句为 <code>listen = /run/php/php7.0-fpm.sock</code>，此时监听地址为 <code>/run/php/php7.0-fpm.sock</code></li>
<li>语句为 <code>listen = 127.0.0.1:9000</code>，此时 <code>php7.0-fpm</code> 绑定了 9000 端口，监听地址为 <code>127.0.0.1:9000</code></li>
</ul>
<p>监听地址可以自行修改。修改后运行以下内容应用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service php7.0-fpm reload</span><br></pre></td></tr></table></figure>
<h2 id="创建文件及网站目录">创建文件及网站目录</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /</span><br><span class="line">mkdir /home &amp;&amp; cd /home</span><br><span class="line">mkdir wwwroot wwwdata &amp;&amp; cd wwwroot</span><br><span class="line">mkdir example.com &amp;&amp; cd example.com #文件夹名字及位置自定</span><br><span class="line">chown www-data:www-data /home/wwwdata -Rf</span><br><span class="line">chmod 770 /home/wwwdata -Rf</span><br><span class="line">chown www-data:www-data /home/wwwroot/example.com -Rf</span><br></pre></td></tr></table></figure>
<h2 id="安装-NextCloud">安装 NextCloud</h2>
<h3 id="下载">下载</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/wwwroot/example.com</span><br><span class="line">wget https://download.nextcloud.com/server/releases/nextcloud-13.0.4.zip</span><br><span class="line">unzip nextcloud-13.0.4.zip</span><br><span class="line">rm nextcloud-13.0.4.zip</span><br><span class="line">mv nextcloud/* .</span><br><span class="line">mv nextcloud/.* .</span><br><span class="line">rm nextcloud -r</span><br></pre></td></tr></table></figure>
<h3 id="设置文件夹权限">设置文件夹权限</h3>
<p>新建 <code>set.sh</code> 文件，添加如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将ocpath替换为自己的网站文件夹位置</span></span><br><span class="line">ocpath=&#x27;/home/wwwroot/example.com&#x27; #1</span><br><span class="line">htuser=&#x27;www-data&#x27;</span><br><span class="line">htgroup=&#x27;www-data&#x27;</span><br><span class="line">rootuser=&#x27;root&#x27;</span><br><span class="line"></span><br><span class="line">printf &quot;Creating possible missing Directories\n&quot;</span><br><span class="line">mkdir -p $ocpath/data</span><br><span class="line">mkdir -p $ocpath/assets</span><br><span class="line">mkdir -p $ocpath/updater</span><br><span class="line"></span><br><span class="line">printf &quot;chmod Files and Directories\n&quot;</span><br><span class="line">find $&#123;ocpath&#125;/ -type f -print0 | xargs -0 chmod 0640</span><br><span class="line">find $&#123;ocpath&#125;/ -type d -print0 | xargs -0 chmod 0750</span><br><span class="line"></span><br><span class="line">printf &quot;chown Directories\n&quot;</span><br><span class="line">chown -R $&#123;rootuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/apps/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/assets/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/config/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/data/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/themes/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/updater/</span><br><span class="line"></span><br><span class="line">chmod +x $&#123;ocpath&#125;/occ</span><br><span class="line"></span><br><span class="line">printf &quot;chmod/chown .htaccess\n&quot;</span><br><span class="line">if [ -f $&#123;ocpath&#125;/.htaccess ]</span><br><span class="line">  then</span><br><span class="line">    chmod 0644 $&#123;ocpath&#125;/.htaccess</span><br><span class="line">    chown $&#123;rootuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/.htaccess</span><br><span class="line">fi</span><br><span class="line">if [ -f $&#123;ocpath&#125;/data/.htaccess ]</span><br><span class="line">  then</span><br><span class="line">    chmod 0644 $&#123;ocpath&#125;/data/.htaccess</span><br><span class="line">    chown $&#123;rootuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/data/.htaccess</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>打开文件，将 “#1” 所在行的地址更改为你自己的网站文件地址，然后保存。</p>
<p>赋予权限并运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x set.sh</span><br><span class="line">./set.sh</span><br></pre></td></tr></table></figure>
<h2 id="挂载腾讯-COS-作为存储盘-选">挂载腾讯 COS 作为存储盘(选)</h2>
<p>这一步为选做，小硬盘 VPS 福音。</p>
<p>由于我用的是腾讯云主机，同地域 COS 内网流量免费，将文件存储到 COS 能极大地节省 VPS 的硬盘空间。在此处我默认你已经创建了腾讯云对象存储的 Bucket，不会的请谷歌解决。</p>
<h3 id="安装-COSFS-工具">安装 COSFS 工具</h3>
<h4 id="环境安装">环境安装</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install automake autotools-dev g++ git libcurl4-gnutls-dev libfuse-dev libssl-dev libxml2-dev make pkg-config fuse -y</span><br></pre></td></tr></table></figure>
<h4 id="下载源码">下载源码</h4>
<p>使用 Github 原始地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tencentyun/cosfs /usr/cosfs</span><br></pre></td></tr></table></figure>
<p>如果国内主机速度过慢，可以使用我在 gitee 备份的库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/sunziyang97/cosfs.git /usr/cosfs</span><br></pre></td></tr></table></figure>
<h4 id="编译安装">编译安装</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/cosfs</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h4 id="配置文件">配置文件</h4>
<p>在  <code>/etc/passwd-cosfs</code> 文件中，配置您的存储桶的名称，以及该存储桶对应的 SecretId 和 SecretKey，相关概念参见  <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzQzNi82MjI1">对象存储基本概念<i class="fa fa-external-link-alt"></i></span>。使用冒号隔开，注意冒号为半角符号。 并为  <code>/etc/passwd-cosfs</code>  设置可读权限。命令格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &lt;bucketname&gt;:&lt;SecretId&gt;:&lt;SecretKey&gt; &gt; /etc/passwd-cosfs</span><br><span class="line">chmod 640 /etc/passwd-cosfs</span><br></pre></td></tr></table></figure>
<p>其中：<br>
<code>bucketname</code>/ <code>SecretId</code>/<code>SecretKey</code> 需要替换为用户的真实信息。</p>
<p><code>bucketname</code> 形如 <code>bucketprefix-123456789</code>, 更多关于 <code>bucketname</code> 的命名规范，参见<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzQzNi8xMzMxMiMuRTUuQUQuOTguRTUuODIuQTguRTYuQTEuQjYuRTUuOTEuQkQuRTUuOTAuOEQuRTguQTcuODQuRTguOEMuODM=">存储桶命名规范<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="挂载">挂载</h3>
<h4 id="运行工具">运行工具</h4>
<p>将配置好的存储桶挂载到指定目录，命令行如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cosfs nextcloud-123456789 /home/wwwdata -ourl=http://cos.ap-hongkong.myqcloud.com -ouid=33 -ogid=33 -o allow_other -o umask=007</span><br></pre></td></tr></table></figure>
<p>注意替换为自己的信息</p>
<h4 id="配置开机自动挂载">配置开机自动挂载</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo cosfs#nextcloud-1253146816 /home/wwwdata fuse _netdev,url=http://cos.ap-hongkong.myqcloud.com,uid=33,gid=33,allow_other,umask=007 0 0 &gt;&gt; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>
<p>注意替换为自己的信息</p>
<h2 id="编辑-Caddy-配置文件">编辑 Caddy 配置文件</h2>
<p>打开配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>
<p>添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pan.iszy.me &#123;</span><br><span class="line"></span><br><span class="line">    root   /home/wwwroot/pan.iszy.me</span><br><span class="line">    log    /home/wwwlog/pan.iszy.me.log</span><br><span class="line">    errors /home/wwwlog/pan.iszy.me.errors.log</span><br><span class="line">    tls hi@iszy.me</span><br><span class="line"></span><br><span class="line">    # 1</span><br><span class="line">    fastcgi / /run/php/php7.0-fpm.sock php</span><br><span class="line"></span><br><span class="line">    # checks for images</span><br><span class="line">    rewrite &#123;</span><br><span class="line">        ext .svg .gif .png .html .ttf .woff .ico .jpg .jpeg</span><br><span class="line">        r ^/index.php/(.+)$</span><br><span class="line">        to /&#123;1&#125; /index.php?&#123;1&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/index.php/.*$</span><br><span class="line">        to /index.php?&#123;query&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # client support (e.g. os x calendar / contacts)</span><br><span class="line">    redir /.well-known/carddav /remote.php/carddav 301</span><br><span class="line">    redir /.well-known/caldav /remote.php/caldav 301</span><br><span class="line"></span><br><span class="line">    # remove trailing / as it causes errors with php-fpm</span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/remote.php/(webdav|caldav|carddav|dav)(\/?)(\/?)$</span><br><span class="line">        to /remote.php/&#123;1&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/remote.php/(webdav|caldav|carddav|dav)/(.+?)(\/?)(\/?)$</span><br><span class="line">        to /remote.php/&#123;1&#125;/&#123;2&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/public.php/(dav|webdav|caldav|carddav)(\/?)(\/?)$</span><br><span class="line">        to /public.php/&#123;1&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/public.php/(dav|webdav|caldav|carddav)/(.+)(\/?)(\/?)$</span><br><span class="line">        to /public.php/&#123;1&#125;/&#123;2&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # .htaccess / data / config / ... shouldn&#x27;t be accessible from outside</span><br><span class="line">    status 403 &#123;</span><br><span class="line">        /.htaccess</span><br><span class="line">        /data</span><br><span class="line">        /config</span><br><span class="line">        /db_structure</span><br><span class="line">        /.xml</span><br><span class="line">        /README</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    header / Strict-Transport-Security &quot;max-age=31536000;&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>#1</code> 处将地址替换为之前查看的 <code>php7.0-fpm</code> 监听的地址。</p>
<p>重启 Caddy。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service caddy restart</span><br></pre></td></tr></table></figure>
<h2 id="安装-2">安装</h2>
<p>访问 <span class="exturl" data-url="aHR0cDovL2V4YW1wbGUuY29t">example.com<i class="fa fa-external-link-alt"></i></span> (你自己的网站)，输入信息并安装。</p>
<p><strong>注意点：</strong></p>
<ul>
<li>数据目录填写绝对地址，本例中应使用 <code>/home/wwwdata</code>。</li>
<li>数据库用户名为之前创建的 <code>nextcloud</code>，密码为你设定的密码</li>
<li>数据库地址要加端口，如 <code>localhost:3306</code></li>
</ul>
<p>配图为我前一次<a href="https://www.iszy.cc/2017/12/18/NextCloud/">使用宝塔面板进行安装</a>时的截图。</p>
<p><img data-src="https://img.iszy.xyz/20190318212151.png" alt=""></p>
<h2 id="更多问题">更多问题</h2>
<p>安装完成后登录，进入<code>设置</code>—<code>管理</code>—<code>基本设置</code>，还有一些问题需要解决。我们下篇文章继续说明。</p>
<p><strong>有什么问题，欢迎在评论区留言或者联系我，我一定会及时回复的。</strong></p>
]]></content>
      <categories>
        <category>应用</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>NextCloud</tag>
        <tag>文件管理</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>Caddy</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 手动部署 MySQL 5.7</title>
    <url>/posts/centos7-mysql57/</url>
    <content><![CDATA[<p>今天来简单记录一下在 CentOS 7 上手动部署 MySQL 5.7 的过程。</p>
<span id="more"></span>
<h2 id="流程">流程</h2>
<h3 id="下载安装包">下载安装包</h3>
<p>第一步自然是下载安装包，我们在这里下载 5.7 版本，下载下来的文件名为<code>mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz</code>。</p>
<ul>
<li>官网地址: <span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=">https://dev.mysql.com/downloads/mysql/<i class="fa fa-external-link-alt"></i></span></li>
<li>下载地址: <span class="exturl" data-url="aHR0cHM6Ly9jZG4ubXlzcWwuY29tLy9Eb3dubG9hZHMvTXlTUUwtNS43L215c3FsLTUuNy4yNy1saW51eC1nbGliYzIuMTIteDg2XzY0LnRhci5neg==">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><img data-src="https://img.iszy.xyz/20190804175143.png?x-oss-process=style/big" alt="20190804175143"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install wget -y</span><br><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="解压安装包">解压安装包</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">mv mysql-5.7.27-linux-glibc2.12-x86_64 /usr/<span class="built_in">local</span>/mysql</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">mkdir data</span><br></pre></td></tr></table></figure>
<h3 id="添加-mysql-用户和组并授权">添加 mysql 用户和组并授权</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql</span><br><span class="line">chown -R mysql:mysql /usr/<span class="built_in">local</span>/mysql</span><br></pre></td></tr></table></figure>
<h3 id="初始化数据库">初始化数据库</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libaio-devel.x86_64 -y</span><br><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/usr/<span class="built_in">local</span>/mysql/data</span><br></pre></td></tr></table></figure>
<p>注意保留此时打印出的临时 root 密码。</p>
<p><img data-src="https://img.iszy.xyz/20190805095840.png?x-oss-process=style/big" alt="20190805095840"></p>
<p>为了安全起见，我们仅将 data 目录权限保留给 mysql 用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R root /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">chown -R mysql /usr/<span class="built_in">local</span>/mysql/data</span><br></pre></td></tr></table></figure>
<p>因为 CentOS 系统自带了 mariadb，我们需要把它卸载并删除相关文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove mari*</span><br><span class="line">rm -rf /var/lib/mysql/*</span><br></pre></td></tr></table></figure>
<h3 id="配置启动及配置文件并启动-MySQL">配置启动及配置文件并启动 MySQL</h3>
<p>将启动文件复制到系统启动目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp ./support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>
<p>创建并编辑配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /etc/my.cnf</span><br><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>添加如下内容并保存。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">max_allowed_packet = 100M</span><br><span class="line">lower_case_table_names = 1</span><br><span class="line">default-time-zone = &#x27;+8:00&#x27;</span><br><span class="line">net_buffer_length = 100K</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br></pre></td></tr></table></figure>
<p>启动 MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure>
<h3 id="添加环境变量">添加环境变量</h3>
<p>编辑<code>/etc/profile</code>文件，添加环境变量以在任何地方使用 mysql 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>
<p>在末尾加入如下语句并保存。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mysql/bin</span><br></pre></td></tr></table></figure>
<p>应用环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<p>重启 MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>
<h3 id="通过命令行登录-MySQL-修改-root-密码">通过命令行登录 MySQL 修改 root 密码</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>
<p>输入之前保留的 root 密码即可登录，接着输入以下命令修改 root 密码并授予远程登录权限，注意替换命令中的示例密码为自己的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> authentication_string=password(<span class="string">&quot;ExamplePassword&quot;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;ExamplePassword&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>
<p>接着你就可以通过工具如 Navicat 连接到 MySQL 操作数据库了。</p>
<h2 id="修改配置文件">修改配置文件</h2>
<p>如果要修改配置，修改<code>/etc/my.cnf</code>文件后，输入如下命令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql reload</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>更改网站域名</title>
    <url>/posts/change-domain/</url>
    <content><![CDATA[<p>今天我更换了网站的域名，从原来的的 <span class="exturl" data-url="aHR0cDovL3N1bnppeWFuZy5jb20=">sunziyang.com<i class="fa fa-external-link-alt"></i></span> 改为了 <span class="exturl" data-url="aHR0cDovL2lzenkubWU=">iszy.me<i class="fa fa-external-link-alt"></i></span>，我觉得新的域名比原本的好看一些，可惜我买不起 <span class="exturl" data-url="aHR0cDovL3N6eS5jb20=">szy.com<i class="fa fa-external-link-alt"></i></span> 或者 <span class="exturl" data-url="aHR0cDovL3N6eS5tZQ==">szy.me<i class="fa fa-external-link-alt"></i></span>。网站更改域名算是一件比较大的事情，还是有一些必要的工作要做的，于是在此做一个记录。</p>
<span id="more"></span>
<h2 id="网站改版">网站改版</h2>
<p>首先呢，我的网站是通过 jekyll 编译的，一些编译的内容和域名是关联在一起的。我也讲不清楚，就是如果域名不完全匹配，即使是 http 和 https 的区别，网站的一些图标就不能正常显示。所以我需要更改配置后，重新编译网站。其他的网站可能不会遇到我这个问题。</p>
<p>另外，由于我是全站 https 的，更换域名也就需要重新申请一个新域名的 ssl 证书。正好 Let’s Encrypt 的泛域名证书已经正式推出了，我也就顺势申请了泛域名证书，现在已经用上了。关于泛域名证书获取的过程可以看我的<a href="https://www.iszy.cc/2018/03/18/wild-card/">上一篇文章</a>。</p>
<h2 id="对旧网站做-301-跳转">对旧网站做 301 跳转</h2>
<p>为了保证搜索引擎的正常抓取和索引，并尽量减少网站的正常改版过程中的流量损失，要对旧网站做 301 跳转。</p>
<p>网上的教程应该很多吧，无论是针对 Apache 的，还是 Nginx 的，连针对微软的 IIS 的教程都有。我还特别去看过，讲道理还挺简单的，在此我就不赘述了。如果真有人需要，在评论里说一声，我在这里做整理。</p>
<p>对于我来说就比较简单了，我的 VPS 上用的免费的宝塔面板，提供了简单的设置 301 跳转的功能。一般来说，这样子的控制面板应该都会提供这样的功能。</p>
<p><img data-src="https://img.iszy.xyz/20190318212214.png" alt=""></p>
<h2 id="搜索引擎内更改网站域名">搜索引擎内更改网站域名</h2>
<h3 id="Google">Google</h3>
<p>我就在这里简单讲一下一般流程。</p>
<ol>
<li>首先在 Search Console 中<strong>添加你的新网站</strong>。</li>
<li>在你的旧网站的控制台中使用<strong>地址更改工具</strong>。</li>
<li>选择你需要迁移至的新地址，确认 301 重定向有效，检查验证方法仍然有效。</li>
<li>然后提交地址更改请求。</li>
</ol>
<p>接下来就交给 Google 来完成了，他会自动将你旧网站的索引迁移到新网站去，旧网站的索引将会作废，直到最终完成。</p>
<h3 id="Baidu">Baidu</h3>
<ol>
<li>首先在百度站长工具中<strong>添加你的新站点</strong>。</li>
<li>进入你的旧网站的控制台，使用<strong>网站改版工具</strong>。</li>
<li>添加改版规则，针对全站域名更换的改版方式，应该选择第一个，<strong>站点改版</strong>。</li>
<li>然后选择刚刚添加的新站点名。</li>
<li>提交，百度会完成接下来的工作。</li>
</ol>
<h3 id="新网站管理">新网站管理</h3>
<p>不多说，和你旧网站的管理一致，可能需要等到迁移完成。</p>
<h2 id="后话">后话</h2>
<p>反正我网站的流量也不多，也不用来赚钱，域名换了也就换了。如果你的网站比较大的话，还是要慎重选择是否要进行网站的改版，会对网站造成很大的影响。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>更换手机套餐的一点感慨</title>
    <url>/posts/change-package/</url>
    <content><![CDATA[<p>昨天换了个手机套餐，有些许感慨。</p>
<span id="more"></span>
<p>本来按道理讲，像 <strong>B 站卡</strong>这样的互联网套餐都是不支持直接更换为其他互联网套餐的，也没有为其他套餐用户提供转入的接口。但是，我看到网上说只要给客服打电话要求，就能轻松解决更换套餐的问题。</p>
<p>所以，我昨天就打了个电话给联通客服，帮我更换下手机套餐，把我原先使用的 <strong>B 站 33 卡</strong>套餐更换为<strong>新米粉卡</strong>套餐。一开始，客服跟我说是不能直接更换套餐，需要带身份证去营业厅办理吧啦吧啦。当我说我没空去营业厅后，便表示过段时间会再联系我。没过多久，就有一个联通客服联系我，确认我的要求后，就轻松地给我更换了套餐。前后总共没花几分钟时间，我就接到了退订 B 站卡套餐和开通新米粉卡套餐的短信通知。可以说是非常顺利的一次和运营商打交道的体验了。</p>
<p>关于运营商的服务，可以说是变化很大了。时代在变迁，三大垄断运营商也在改变。无所谓是顺应时代自己改变，还是应工信部要求进行改变，三大运营商都在很大程度上提升着自己的服务水平，虽然还有很大提升空间，但是已经和以前大不相同了。技术在提升，服务在变好，在处于垄断地位，没有国外运营商竞争的前提下让利于民，不得不说是做了件好事。以前一直感觉运营商是个特别坑爹的玩意，一对霸王条款，你也没得选择，感觉高高在上的，现在可以说是非常平易近人了。</p>
<p>当然尽善尽美确实不可能，离这个目标差距还很大呢。或许运营商还没有想好彻底改变吧，你看这个更换套餐的事情，明明技术上已经可以轻松解决的事情，还是需要你打一个电话找客服人工解决，其实大可不必的。但是运营商已经在逐步做的更好了，应该还是可以抱有希望的。</p>
<p>其实吧，说到底还是缺少竞争，看看香港，各路运营商相互竞争，用户可以自由选择。中国移动在香港提供的套餐，那可正是价格低到尘埃里了，放到国内简直不可想象，即使如此这还不是最实惠的运营商呢。嘛！我大清自有国情在啊，通讯领域关系到国家安全，不太可能自由放开的，至少现在的发展趋势还是很好的，这就可以了。</p>
<p>说到这个技术啊，我也不懂。据我所知，现在国内 4G 已是主流，据说 5G 也要争取在 2020 年这个神奇的年份商用呢。5G 的基础设施建设又将是一笔天价的花费呢，或许正是因为以前的基站建设花费太多，不愿意轻易抛弃，到现在安全性极低的 2G 网络还没有被弃用。电信那个坑爹的通话断网问题怕是还要好长时间才能解决，或许 5G 甚至 6G 普及的时候才能彻底采用 VoLTE 吧。国际上好像已经弃用电信的 CDMA2000 了吧，我的 MI6 想刷成国际版，发现竟然不能支持电信通话，也是非常的僵硬呢，国内想要赶上国际步伐还要加把力呢。</p>
<p>虽说技术在提升，网速越来越快，但是限制大家使用的一直以来都是流量的费用。流量成本高的情况下，你网速再快，一般人也不敢放开了用啊。你看 3G 时代说是鼓吹视频通话，其实也没有多少人用，资费承受不起啊。我还记得我那时候用的最多的就是用手机玩纯文字的 QQ 农场，刷得可起劲了。现在 4G 时代说可以在线观看超清视频，估计也就土豪才敢不连 Wi-Fi 的时候这么做。现在流量成本已经下降很多了，推出了大量不限流量套餐，虽说还不能算完全的不限流量，但也算是个进步了。像我现在这个米粉卡套餐，至少可以让我不连 Wi-Fi 放开了用流量了。</p>
<p>终究会越来越好吧，就这样吧，结束这篇胡言乱语。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 16.04 更改软件源</title>
    <url>/posts/change-sources/</url>
    <content><![CDATA[<p>由于国内的特殊环境，Linux 系统如果不更换软件源，软件的下载安装将会速度奇慢。总不能下载软件也全走代理吧，更换软件源才是正道。本文是在 Win10 子系统 Ubuntu 中完成的，在原版 Ubuntu 中同样适用。</p>
<span id="more"></span>
<h2 id="更换软件源">更换软件源</h2>
<p>本文选择将软件源更换为阿里云的镜像以实现高速访问。</p>
<h3 id="备份官方软件源列表">备份官方软件源列表</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>
<h3 id="修改软件源列表">修改软件源列表</h3>
<h4 id="用熟悉的编辑器打开">用熟悉的编辑器打开</h4>
<p>我在这里使用 vim 打开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<h4 id="进行替换">进行替换</h4>
<p>替换默认的<code>http://archive.ubuntu.com/</code>和<code>http://security.ubuntu.com/</code>为<code>https://mirrors.aliyun.com/</code></p>
<p>**注：**vim 中的全局替换命令为 <code>:%s/源字符串/目的字符串/g</code></p>
<h4 id="保存并退出">保存并退出</h4>
<p>输入<code>:wq</code>。</p>
<h3 id="更新源和软件">更新源和软件</h3>
<ul>
<li>使用 <code>sudo apt-get update -y</code> 获取软件列表更新</li>
<li>使用 <code>sudo apt-get upgrade -y</code> 获取软件更新</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CMY Network--高端专线SSR/Trojan机场推荐</title>
    <url>//page/cmynetwork/</url>
    <content><![CDATA[<blockquote>
<p><strong>郑重声明</strong>：本文所介绍产品主要是为了方便学习、科研以及外贸工作。请遵守中华人民共和国法律法规，切勿在任何地方发布分裂国家，激化民族矛盾的言论。</p>
</blockquote>
<p>本文来介绍一家高端专线 SSR/Trojan 机场，名叫 CMY Network，可满足多种需求。经过长期使用，稳定性和速度上都很不错，推荐一下。</p>
<span id="more"></span>
<p><img data-src="https://img.iszy.xyz/20210411191903.png?x-oss-process=style/big" alt=""></p>
<h2 id="一、前言">一、前言</h2>
<h3 id="相关链接">相关链接</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovY215bmV0d29yaw==">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#CMYNetwork-%E7%BA%A2%E8%8E%93%E7%BD%91%E7%BB%9C">⭐⭐CMY Network 测速 ⭐⭐</a> 2022-02-10</p>
<h3 id="优惠">优惠</h3>
<blockquote>
<p>本站专属优惠</p>
</blockquote>
<p>使用我的邀请码注册可以获得 <strong>5 元</strong>网站余额红包，可用于购买套餐。此优惠仅可使用一次，同 IP 下多次注册，视为相同账户。</p>
<p>邀请码: <code>iszy</code></p>
<h2 id="二、CMY-Network-简介">二、CMY Network 简介</h2>
<p><strong>CMYNetwork 红莓网络</strong> 隶属于<code>CMYNetwork Technology Co., Ltd</code>，注册于摩纳哥公国，是一家我最近发现一家宝藏机场。除入门套餐外采用全内网中转节点；入门套餐采用 Trojan 新协议，保证稳定性。经测速和日常使用，可以说是稳定高速，高峰期速度也能拉满。提供网页在线客服和工单，服务还不错。持续使用体验仍在继续跟踪。</p>
<h3 id="特点">特点</h3>
<p><strong>套餐分级定制</strong></p>
<ul>
<li>Air 套餐直连线路采用<strong>Trojan</strong></li>
<li>Pro 套餐以上套餐及以上包含全内网中转节点、IPLC 专线</li>
<li>Extreme 套餐提供<strong>IEPL 及游戏专线</strong></li>
</ul>
<p><strong>流媒体解锁</strong></p>
<ul>
<li>提供各种<strong>流媒体解锁</strong>，福利中心对最高级套餐(Extreme 套餐)提供各种视频会员<strong>共享账号</strong></li>
</ul>
<p><strong>多平台多订阅</strong></p>
<ul>
<li>多平台<strong>定制客户端</strong>(windows/macos/android)，简单易用</li>
<li>提供 Quantumultx、小火箭、ClashR 订阅，支持按等级获取订阅</li>
<li>特别的，提供了按区域订阅链接，更加灵活，暂只筛选了日本、美国、港澳台、新加坡</li>
</ul>
<p><strong>续命灵活</strong></p>
<ul>
<li>有灵活的<strong>叠加流量包</strong>供高速流量将尽时使用</li>
<li>流量用完后，提供<strong>无限量限速流量</strong>，限速 2Mbps</li>
</ul>
<p><strong>合理的同时在线数量限制</strong></p>
<ul>
<li>限制公网 ip 同时在线数量，以公网 IP 为准，<strong>同一台路由器下无论多少设备只算做一个 IP 在线</strong>，适合团队使用</li>
</ul>
<p><strong>注册可试用</strong></p>
<ul>
<li>注册并绑定手机号，赠送 3 天免费试用(非强制)</li>
</ul>
<h2 id="三、套餐">三、套餐</h2>
<blockquote>
<p>注意，需要专线中转线路，请至少选择 Pro 及以上套餐，专线倍率为 2，需要注意。</p>
</blockquote>
<table>
<tr><th>套餐</th><th>流量</th><th>价格</th><th>公网IP数</th><th>线路</th><th>客服</th></tr>
<tr>
  <td rowspan="4">Air/入门版</td>
  <td rowspan="2">100G/月</td>
  <td>18元/30天</td>
  <td rowspan="4">2</td>
  <td rowspan="4">国际轻量优化链路<br/>解锁Trojan直连线路</td>
  <td rowspan="4">工单客服支持</td>
</tr>
<tr>
  <td>54元/90天</td>
</tr>
<tr>
  <td>125G/月</td>
  <td>108元/180天</td>
</tr>
<tr>
  <td>150G/月</td>
  <td>193元/365天</td>
</tr>
<tr>
  <td rowspan="4">Pro/专业版订阅</td>
  <td rowspan="2">200G/月</td>
  <td>35元/30天</td>
  <td rowspan="4">3</td>
  <td rowspan="4">解锁 CN2 优化直连专线（Trojan）<br>解锁 IPLC 流媒体专线（SSR）<br>解锁港/台/日/美 原生IP线路（Trojan）</td>
  <td rowspan="11">12 x 365在线客服支持</td>
</tr>
<tr>
  <td>105元/90天</td>
</tr>
<tr>
  <td>250G/月</td>
  <td>210元/180天</td>
</tr>
<tr>
  <td>300G/月</td>
  <td>370元/365天</td>
</tr>
<tr>
  <td rowspan="4">Extreme/至尊版</td>
  <td rowspan="2">643G/月</td>
  <td>68元/30天</td>
  <td rowspan="4">4</td>
  <td rowspan="4">免费远程技术支持<br>解锁 IEPL 流媒体专线<br>解锁 IEPL 游戏专线(内网)<br>Netflix/HULU/HBO/Pxxnhub等价值千元福利账号</td>
</tr>
<tr>
  <td>147元/90天</td>
</tr>
<tr>
  <td>768G/月</td>
  <td>399元/180天</td>
</tr>
<tr>
  <td>1024G/月</td>
  <td>696元/365天</td>
</tr>
<tr>
  <td rowspan="2">Business/企业版基础套餐</td>
  <td rowspan="2">1200G/月</td>
  <td>298元/30天</td>
  <td rowspan="2">10</td>
  <td rowspan="2">无定制专线，可自助购买<br>如需要线路定制请查看定制套餐<br>可提供国际电子收据（英文/日文可选）</td>
</tr>
<tr>
  <td>3398元/365天</td>
</tr>
<tr>
  <td>Business/企业专线定制</td>
  <td colspan="4">此为定制方案，可动态根据需求优化，具体详情请咨询客服</td>
</tr>
</table>
<table>
<tr><th>套餐</th><th>流量</th><th>价格</th><th>公网IP数</th><th>备注</th></tr>
<tr>
  <td rowspan="2">Business/企业版基础套餐</td>
  <td rowspan="2">2048G/月</td>
  <td>298元/30天</td>
  <td rowspan="2">10</td>
  <td rowspan="2">无定制专线，可自助购买<br>如需要线路定制请查看定制套餐<br>可提供国际电子收据（英文/日文可选）</td>
</tr>
<tr>
  <td>1788元/180天</td>
</tr>
<tr>
  <td>Business/企业专线定制</td>
  <td colspan="4">此为定制方案，可动态根据需求优化，具体详情请咨询客服</td>
</tr>
</table>
<h2 id="四、其他的话">四、其他的话</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nhb21laWNsb3VkL3VybA==">官网地址发布页<i class="fa fa-external-link-alt"></i></span>，永不失联</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jYW9tZWlqdW1wLmNvbQ==">最新地址跳转页<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90Lm1lL3MvY215bmV0d29yaw==">官方 TG 通知频道<i class="fa fa-external-link-alt"></i></span></li>
<li>可在官网右下角与客服联系(推荐)或提交工单</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jYW9tZWkud2lraS8=">全平台各客户端下载、教程与进阶技巧<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<ul>
<li>本站仅做介绍和引荐，不参与购买、服务和售后，此类问题请通过官方联系方式联系官方，一般可以通过<code>工单</code>或 <code>tg 群</code>的方式。</li>
<li>如有疑问，可在评论区回复。</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>翻墙</tag>
        <tag>科学上网</tag>
        <tag>V2Ray</tag>
        <tag>ssr</tag>
        <tag>机场</tag>
        <tag>SS</tag>
        <tag>Trojan</tag>
        <tag>网络加速</tag>
        <tag>代理推荐</tag>
        <tag>酸酸乳</tag>
        <tag>ssr机场</tag>
        <tag>机场推荐</tag>
        <tag>机场评测</tag>
        <tag>V2Ray推荐</tag>
        <tag>代理</tag>
        <tag>推荐</tag>
        <tag>加速</tag>
        <tag>V2Ray机场</tag>
        <tag>ssr/v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在JAVA中比较两个String对象</title>
    <url>/posts/compare-stirng-in-java/</url>
    <content><![CDATA[<p>记录一下，最近在 JAVA 中比较两个 String 对象遇到的一个小坑。</p>
<span id="more"></span>
<h2 id="问题">问题</h2>
<p>最近写程序的时候，遇到了需要比较两个 String 对象是否相等的情况，我习惯性的写了形如<code>if(a == &quot;a&quot;)&#123;&#125;</code>的语句，IDEA 跳出警告，内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String values are compared using &#x27;==&#x27;, not &#x27;equals()&#x27;.</span><br></pre></td></tr></table></figure>
<p>也就是说我刚刚那句话应该写成<code>if(a.equals(&quot;a&quot;))&#123;&#125;</code>才对，果然不再标红了。</p>
<h2 id="说明">说明</h2>
<p>那么，为什么会这样呢？<code>==</code>和<code>equals()</code>分别是什么效果呢？</p>
<p>对于基本数据类型<code>byte</code>(字节型)、<code>short</code>(短整型)、<code>int</code>(整型)、<code>long</code>(长整型)、<code>float</code>(单精度浮点型)、<code>double</code>(双精度浮点型)、<code>boolean</code>(布尔型)、<code>char</code>(字符型)，<code>==</code>比较的就是他们的值，也不存在<code>equals()</code>方法。</p>
<p>而对于<code>String</code>这样的引用数据类型，<code>==</code>比较的是两个对象的<strong>引用地址</strong>即内存地址是否相同，如果内存地址相同，自然就是同一个对象了，同一个对象之间有啥好比的。</p>
<p>我们一般的应用场景主要是要比较两个 String 对象的内容，那就需要使用<code>equals()</code>方法。我们可以看一下<code>java.lang.String</code>中<code>equals()</code>方法的定义，可以看到<code>equals()</code>才是在比较两个 String 对象的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Compares this string to the specified object.  The result is &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">* true&#125; if and only if the argument is not &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">* String&#125; object that represents the same sequence of characters as this</span></span><br><span class="line"><span class="comment">* object.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  anObject</span></span><br><span class="line"><span class="comment">*         The object to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the given object represents a &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment">*          equivalent to this string, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span>  #compareTo(String)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span>  #equalsIgnoreCase(String)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有一个特例的情况，比如<code>&quot;abcde&quot; == &quot;abcde&quot;</code>或是<code>&quot;abcde&quot; == &quot;abc&quot; + &quot;de&quot;</code>都是会返回<code>true</code>的，因为双方都是由编译器直接实现的，没有被声明为变量。</p>
<h2 id="小结">小结</h2>
<p>当然，如果你知道自己在做什么，就是要利用<code>==</code>的这个特性，自然是没有问题的。其他时候用<code>equals()</code>方法即可。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>知识笔记</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>BT下载中的Peer状态有什么含义</title>
    <url>/posts/d/</url>
    <content><![CDATA[<p>记录下 BT 下载中节点(Peer)状态码含义。</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>O</td>
<td>远程节点状态良好，未阻塞本客户端</td>
</tr>
<tr>
<td>D</td>
<td>正在从远程节点下载</td>
</tr>
<tr>
<td>d</td>
<td>如果远程节点允许，本客户端将会从该节点下载</td>
</tr>
<tr>
<td>U</td>
<td>正在上传到远程节点</td>
</tr>
<tr>
<td>u</td>
<td>如果远程节点请求，本客户端将会向该节点上传</td>
</tr>
<tr>
<td>K</td>
<td>远程节点未阻塞，但本客户端对远程节点提供的数据不感兴趣</td>
</tr>
<tr>
<td>?</td>
<td>本客户端未阻塞远程节点，但远程节点对本客户端提供的数据不感兴趣</td>
</tr>
<tr>
<td>E</td>
<td>加密连接</td>
</tr>
<tr>
<td>H</td>
<td>远程节点是通过 DHT 网络发现的</td>
</tr>
<tr>
<td>X</td>
<td>远程节点是通过节点间交换发现的(PEX)</td>
</tr>
<tr>
<td>I</td>
<td>该节点是一个传入节点</td>
</tr>
<tr>
<td>T</td>
<td>正在通过 uTP 连接该节点</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>知识笔记</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker一键部署LNMP</title>
    <url>/posts/dnmp/</url>
    <content><![CDATA[<p>之前一段时间，我已经把服务器上的应用全部 Docker 化了。我把我服务器上的 LNMP 配置，提取出来，来写一下如何用 Docker 部署一个最简单的 LNMP。</p>
<span id="more"></span>
<h2 id="项目地址">项目地址</h2>
<p>写了 docker-compose，放在了 Github 上，还有些简单的配置文件。</p>
<p>Github 项目地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL2RubXA=">https://github.com/ZvonimirSun/dnmp<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="简介">简介</h3>
<p>通过 Docker 一键部署 LNMP。包含以下内容：</p>
<ul>
<li><code>nginx:alpine</code>:
<ul>
<li>说明
<ul>
<li>已支持<code>TLS 1.3</code></li>
</ul>
</li>
<li>网站目录: <code>./nginx/html</code>(docker 内<code>/usr/share/nginx/html</code>)</li>
<li>虚拟主机配置目录: <code>./nginx/conf.d</code>(docker 内<code>/etc/nginx/conf.d</code>)</li>
</ul>
</li>
<li><code>mysql:5</code>
<ul>
<li>数据库目录: <code>./mysql</code></li>
</ul>
</li>
<li><code>php:7-fpm-alpine</code>:
<ul>
<li>说明
<ul>
<li>基于初始镜像额外安装了<code>pdo_mysql</code>、<code>mysqli</code>、<code>gd</code>插件。</li>
<li>若想安装其他插件，请自行修改<code>Dockerfile</code>。</li>
</ul>
</li>
<li><code>php.ini</code>目录: <code>./php-fpm</code></li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span>:
<ul>
<li>说明:
<ul>
<li>用于申请 ssl 证书。</li>
<li>使用方法: 参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05laWxwYW5nL2FjbWUuc2g=">官方文档<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>证书存储目录: <code>./ssl</code></li>
</ul>
</li>
</ul>
<h3 id="安装">安装</h3>
<ul>
<li>请确保已经安装<code>docker</code>和<code>docker-compose</code>。</li>
<li>将项目 clone 到本地</li>
<li>在<code>docker-compose.yml</code>文件中更改你需要的端口和数据库密码。</li>
<li>执行<code>docker-compose up -d</code>，并等待启动完成。</li>
</ul>
<h3 id="常见问题">常见问题</h3>
<p>Nginx:</p>
<ul>
<li>检查 Nginx 配置:
<ul>
<li><code>docker exec nginx nginx -t</code></li>
</ul>
</li>
<li>Nginx 重载配置:
<ul>
<li><code>docker exec nginx nginx -s reload</code></li>
</ul>
</li>
<li>配置:
<ul>
<li>启用<code>php</code>: <code>include enable-php.conf</code></li>
<li>启用带<code>pathinfo</code>的<code>php</code>: <code>include enable-php-pathinfo.conf</code></li>
<li>启用<code>HSTS</code>: <code>add_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot; always;</code>(此句可根据需要适当调整)</li>
</ul>
</li>
</ul>
<p>php:</p>
<ul>
<li>安装插件(以 pdo_mysql 为例):
<ul>
<li><code>docker exec php docker-php-ext-install pdo_mysql</code></li>
<li>最好修改<code>Dockerfile</code>实现，否则无法保留</li>
</ul>
</li>
<li>访问地址:
<ul>
<li><code>docker</code>中访问<code>php</code>: <code>http://php:9000</code></li>
</ul>
</li>
</ul>
<p>mysql:</p>
<ul>
<li>访问地址
<ul>
<li><code>docker</code>中访问<code>mysql</code>地址: <code>http://mysql:3306</code></li>
<li>宿主机访问<code>mysql</code>地址: <code>http://localhost:3306</code></li>
</ul>
</li>
<li>如需外部访问 mysql，请自行修改 mysql 的端口映射为<code>3306:3306</code>，并放开防火墙。</li>
<li>连接数据库: <code>docker-compose exec mysql mysql -u root -p</code></li>
</ul>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Docker部署acme.sh</title>
    <url>/posts/docker-acme-sh/</url>
    <content><![CDATA[<p>本文介绍一下如何通过 Docker 部署 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span> 申请证书，并添加 crontab 任务自动更新证书。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>最近觉得这个 <code>Docker</code> 超好用啊，<code>docker-compose</code> 也是个神器，折腾了半天，把服务器上跑的所有应用都 docker 化了，用一个 <code>docker-compose.yml</code> 统一管理，怎一个爽字了得。</p>
<p>今天才把 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span> 替换成 docker，在此记录一下。</p>
<h2 id="安装环境">安装环境</h2>
<h3 id="Docker-安装">Docker 安装</h3>
<p>在此以 Ubuntu 为例，其他系统请自己找下方法，教程很多，很容易的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sudo sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意把username换成你自己的用户名，root用户请忽略</span></span><br><span class="line">sudo usermod -aG docker username</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<h3 id="docker-compose-安装">docker-compose 安装</h3>
<p><code>docker-compose</code>作为一个 python 应用，也是可以直接用容器来执行的，下面来安装一下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.23.2/run.sh &gt; /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>下面可以运行一下<code>docker-compose version</code>来检测一下是否成功，第一次运行 docker-compose 命令会自动拉取<code>docker/compose:1.23.2</code>镜像。</p>
<p>安装成功会显示如下内容，可能会与我有些差异。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose version 1.23.2, build 1110ad01</span><br><span class="line">docker-py version: 3.6.0</span><br><span class="line">CPython version: 3.6.7</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0f  25 May 2017</span><br></pre></td></tr></table></figure>
<h2 id="部署-acme-sh">部署 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span></h2>
<h3 id="编写-docker-compose-yml">编写 docker-compose.yml</h3>
<p>本文使用一个<code>docker-compose.yml</code>文件来部署 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span>，不使用 docker-compose 的方法呢，请看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05laWxwYW5nL2FjbWUuc2gvd2lraS9SdW4tYWNtZS5zaC1pbi1kb2NrZXI=">官方给出的方法<i class="fa fa-external-link-alt"></i></span>。</p>
<p>在你想要的位置运行如下命令创建<code>docker-compose.yml</code>文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch docker-compose.yml</span><br></pre></td></tr></table></figure>
<p>编辑此文件，加入如下内容。需要使用 dns api 的请参考注释中的添加方法添加环境变量，如果有什么类似 CloudXNS 的 IP 白名单记得要加好。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  acme.sh:</span><br><span class="line">    image: neilpang/acme.sh</span><br><span class="line">    container_name: acme.sh</span><br><span class="line">    restart: always</span><br><span class="line">    command: daemon</span><br><span class="line">    #environment:</span><br><span class="line">    #  - CX_Key=&quot;XXXXXXXXXX&quot;</span><br><span class="line">    #  - CX_Secret=&quot;XXXXXXXXXX&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./ssl:/acme.sh</span><br><span class="line">    network_mode: host</span><br></pre></td></tr></table></figure>
<p>保存后在<code>docker-compose.yml</code>同目录下运行如下命令启动 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span>。如果更改了<code>docker-compose.yml</code>文件，只要在此运行如下命令，就能够更新到最新状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h3 id="申请证书">申请证书</h3>
<p>所有 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span> 的正常命令都能够正常使用，需要做一点小小的更改，比如我演示一下使用 CloudXNS API 申请本站的 ECC 泛域名证书，其他命令也类似进行。由于我的 container_name 也是 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span>，所以可以直接使用 docker 而非 docker-compose 命令运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec acme.sh --issue --dns dns_cx -d iszy.cc -d &#x27;*.iszy.cc&#x27; --keylength ec-384</span><br></pre></td></tr></table></figure>
<p>也可以添加一条 alias 来像往常一样运行 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span>，可以将这句添加到<code>.bashrc</code>或<code>.zshrc</code>文件中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias acme.sh=&quot;docker exec acme.sh&quot;</span><br></pre></td></tr></table></figure>
<h3 id="设置-crontab-任务自动续签">设置 crontab 任务自动续签</h3>
<p>运行<code>crontab -e</code>来编辑 crontab 文件，添加如下内容，保存即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 * * * docker exec acme.sh --cron</span><br></pre></td></tr></table></figure>
<p>可以运行<code>crontab -e</code>来查看已经添加的 crontab 任务。</p>
<h2 id="后话">后话</h2>
<p>所以，这就部署好了，还是很方便的，尤其是在你的 VPS 上有不少 docker，并统一使用 docker-compose 进行管理的时候。有兴趣的可以这么折腾一下啦。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
        <tag>SSL</tag>
        <tag>acme.sh</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Docker快速部署ASF(ArchiSteamFarm)挂卡</title>
    <url>/posts/docker-asf/</url>
    <content><![CDATA[<p>今天来介绍一下超简单的使用 Docker 部署 ASF 的方法。在部署上，相对一般的部署，使用 Docker 会简单许多，今天我就来介绍一下如何使用 Docker 部署 ASF。</p>
<span id="more"></span>
<h2 id="ArchiSteamFarm">ArchiSteamFarm</h2>
<p>这个软件就是用来 Steam 挂卡的，相信查到这篇文章的人应该都知道 Steam 挂卡是什么吧。在之前的一篇文章——<a href="https://www.iszy.cc/2018/08/08/asf-steam/">在 Ubuntu 16.04 环境下使用 ASF(v3) 实现云挂卡</a>里，我已经介绍了部署 ArchiSteamFarm 的一般流程，以及 ASF 的两步验证、IPC、在 Telegram 中管理 ASF 等内容，感兴趣的可以了解一下。</p>
<h2 id="为什么使用-Docker">为什么使用 Docker</h2>
<p>我也不想多介绍 Docker，大家可以自己去搜索一下。为什么要用 Docker 呢，那就是简单。</p>
<p>由于 Docker 确保了执行环境的一致性，不用在意系统环境，你只需要运行做好的 Docker 镜像，部署就完成了，又快又好。</p>
<h2 id="步骤">步骤</h2>
<h3 id="安装-Docker">安装 Docker</h3>
<p>我是用一键脚本进行安装的，非常简便。</p>
<p>Ubuntu 系统使用以下脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>
<p>CentOS 系统使用以下脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<h3 id="创建配置文件">创建配置文件</h3>
<h4 id="创建文件夹">创建文件夹</h4>
<p>创建一个文件夹用于存储配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/asf &amp;&amp; cd /home/asf</span><br></pre></td></tr></table></figure>
<h4 id="创建配置文件-2">创建配置文件</h4>
<p>一样，我们需要创建 ASF 需要使用的配置文件。建议使用<span class="exturl" data-url="aHR0cHM6Ly9qdXN0YXJjaGluZXQuZ2l0aHViLmlvL0FTRi1XZWJDb25maWdHZW5lcmF0b3IvIy8=">ASF 配置文件生成器<i class="fa fa-external-link-alt"></i></span>进行生成<code>ASF.json</code>和<code>botname.json</code>文件，其中<code>botname</code>为机器人名称。</p>
<p>将生成的全局配置存储为<code>ASF.json</code>，生成的机器人配置存储为<code>botname.json</code>，可以将<code>botname</code>改成你喜欢的名称。</p>
<h4 id="IPC-端口配置">IPC 端口配置</h4>
<p>在使用 docker 镜像的时候，需要让 IPC 在镜像内绑定到<code>0.0.0.0:1242</code>，否则外部无法访问。只需要添加配置文件<code>IPC.config</code>，填入以下内容。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Kestrel&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Endpoints&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;HTTP&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;Url&quot;</span>: <span class="string">&quot;http://*:1242&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="其他配置">其他配置</h4>
<p>如果还有其他需要配置的文件，也要将配置文件放置在此处，如 2FA 配置文件<code>botname.maFile</code>。</p>
<h3 id="启动-Docker-镜像">启动 Docker 镜像</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull justarchi/archisteamfarm</span><br><span class="line">docker run -it -p 127.0.0.1:1242:1242 -p [::1]:1242:1242 -v /home/asf:/app/config --name asf justarchi/archisteamfarm</span><br></pre></td></tr></table></figure>
<p>注意将<code>/home/asf</code>改成你之前存储配置文件的文件夹。</p>
<p>这个命令运行后，将会进入镜像和程序进行交互，可能会有需要输入的内容，比如 Steam 的二次验证等。等程序正常运行后，按<code>ctrl+P+Q</code>撤出镜像并让镜像继续在后台执行。</p>
<p>这样运行下来，只有本地能够访问 1242 端口，建议保持这样，比较安全，可以使用 Nginx 进行反代 IPC 进行使用。</p>
<p>如果想要直接绑定到<code>0.0.0.0:1242</code>，可以将命令改成如下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -p 1242:1242 -v /home/asf:/app/config --name asf justarchi/archisteamfarm</span><br></pre></td></tr></table></figure>
<h3 id="ASF-的启动和停止">ASF 的启动和停止</h3>
<ul>
<li>启动: <code>docker start asf</code></li>
<li>停止: <code>docker stop asf</code></li>
</ul>
<h2 id="Nginx-反代-IPC-配置">Nginx 反代 IPC 配置</h2>
<p>可以参考一下，由 ASF 作者提供。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen *:443 ssl;</span><br><span class="line">    server_name asf.mydomain.com;</span><br><span class="line">    ssl_certificate /path/to/your/certificate.crt;</span><br><span class="line">    ssl_certificate_key /path/to/your/certificate.key;</span><br><span class="line"></span><br><span class="line">    location /Api/NLog &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:1242;</span><br><span class="line">#        proxy_set_header Host 127.0.0.1; # Only if you need to override default host</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">        # We add those 3 extra options for websockets proxying, see https://nginx.org/en/docs/http/websocket.html</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection &quot;Upgrade&quot;;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:1242;</span><br><span class="line">#        proxy_set_header Host 127.0.0.1; # Only if you need to override default host</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Steam</tag>
        <tag>ASF</tag>
        <tag>挂卡</tag>
      </tags>
  </entry>
  <entry>
    <title>从namecheap转移域名到阿里云/万网</title>
    <url>/posts/domain-transfer/</url>
    <content><![CDATA[<p>由于国内的政策，在国内使用 cdn 等等网络服务需要使用自己的域名的，都需要一个网站备案。备案除了需要实名认证、国内网站空间、复杂的审核材料之外，还需要经过国内认证的域名注册商。也就是说必须将你要备案的域名也转移到国内才能进行备案，方便随时责任到户啊。今天我就将一个闲置的域名转移到了阿里云，不用白不用，不如备案一下，加速一下网站的静态资源。在这里简单记录下流程。</p>
<span id="more"></span>
<h2 id="获取转移码">获取转移码</h2>
<p>首先需要在 namecheap 处获取转移码。</p>
<h3 id="进入域名转移面板">进入域名转移面板</h3>
<p>首先在个人面板里点击这里。</p>
<p><img data-src="https://img.iszy.xyz/20190318212633.png?x-oss-process=style/big" alt=""></p>
<h3 id="解锁域名">解锁域名</h3>
<p>如果域名是锁定状态，需要先点击这里进行解锁。</p>
<p><img data-src="https://img.iszy.xyz/20190318212645.png?x-oss-process=style/big" alt=""></p>
<h3 id="获取转移码-2">获取转移码</h3>
<p>解锁后，点击这里获取转移码，namecheap 将会将转移码通过邮箱方式发送到你的邮箱。</p>
<p><img data-src="https://img.iszy.xyz/20190318212656.png?x-oss-process=style/big" alt=""></p>
<p><img data-src="https://img.iszy.xyz/20190318212708.png?x-oss-process=style/big" alt=""></p>
<h2 id="转移域名">转移域名</h2>
<h3 id="实名认证">实名认证</h3>
<p>首先需要有一套实名认证的模板，在国内需要实名认证这是绕不过去的，在这里添加信息模板并进行实名认证。</p>
<p><img data-src="https://img.iszy.xyz/20190318212719.png?x-oss-process=style/big" alt=""></p>
<h3 id="进行域名转入">进行域名转入</h3>
<p>等实名认证通过以后，进入阿里云<span class="exturl" data-url="aHR0cHM6Ly93YW53YW5nLmFsaXl1bi5jb20vZG9tYWluL3RyYW5zZmVycw==">域名转移页面<i class="fa fa-external-link-alt"></i></span>。</p>
<p>在这里按格式填写你要转入的域名和之前获取的转移码。</p>
<p><img data-src="https://img.iszy.xyz/20190318212733.png?x-oss-process=style/big" alt=""></p>
<h3 id="验证审核">验证审核</h3>
<p>点击立即转入后，选择刚刚已经实名认证的信息模板，支付转入费用（即续费域名一年），进入转移流程。</p>
<p>之前转入的时候这步没截图，该问题不大。</p>
<p>接下来，将会进行命名审核，验证转移密码，一般会很短时间内完成。</p>
<h2 id="namecheap-通过验证">namecheap 通过验证</h2>
<p>阿里云流程结束后，将会等待 namecheap 释放域名，你将会收到一封由 namecheap 发送的验证邮件。</p>
<p><img data-src="https://img.iszy.xyz/20190318212747.png?x-oss-process=style/big" alt=""></p>
<p>邮件上说，你如果要取消转移，才去点那个链接，需要等 5 天没有收到消息，namecheap 才会释放域名。其实，经过我的验证，点击那个链接，将会有<code>approve</code>和<code>reject</code>两个选项。点击<code>approve</code>以后，namecheap 就会直接通过验证，释放域名，几秒后，就会收到阿里云域名转移成功的通知。</p>
<h2 id="后话">后话</h2>
<p>至此，域名转移成功，再等一段时间，阿里云会自己修改域名信息、实名认证等，过后就能正常操作域名了。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>备案</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Docker 中的 Nginx 启用 Brotli 压缩算法</title>
    <url>/posts/e/</url>
    <content><![CDATA[<p>为了节省服务器带宽，加快页面速度，准备为 Nginx 启用 Brotli 插件。我发现都已经 1.21.6 版本了，Brotli 作为一个非常常用的无损压缩插件，仍然没有被包含到官方的 Nginx docker 镜像中，那么我们要使用只能自己动手了。</p>
<span id="more"></span>
<h2 id="一、成果">一、成果</h2>
<p>我把构建好的镜像推送到了 Github 的 Docker registry 里，懒得折腾的可以直接使用。</p>
<p>可以通过以下语句拉取。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ghcr.io/zvonimirsun/nginx:stable-alpine-brotli</span><br></pre></td></tr></table></figure>
<p>我这边选用了最新 stable 版本的 Nginx，因为不会一直关注 Nginx 版本，更新可能会不及时。</p>
<h2 id="二、解决方案">二、解决方案</h2>
<p>总的来说就是通过对应版本的 Nginx 编译<code>google/ngx_brotli</code>，然后将编译出来的插件 so 文件塞到官方镜像中，这样我们就能够动态加载此模块了。</p>
<p>针对 Dockerfile 一点说明:</p>
<ul>
<li><code>build-base</code>: 添加编译相关工具</li>
<li><code>git</code>: 用于克隆<code>google/ngx_brotli</code>库</li>
<li><code>pcre-dev</code>: http rewrite 模块需要用到</li>
<li><code>openssl-dev</code>: ssl 模块需要用到</li>
<li><code>zlib-dev</code>: gzip 模块需要用到</li>
<li><code>linux-headers</code>: with-file-ato 需要用到</li>
<li>configure 参数完全使用了官方镜像参数，仅添加了 add-dynamic-module 用于添加 brotli</li>
</ul>
<p><strong>Dockerfile:</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> version=<span class="number">1.20</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:$&#123;version&#125;-alpine AS builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> version</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --update --no-cache build-base git pcre-dev openssl-dev zlib-dev linux-headers \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget http://nginx.org/download/nginx-<span class="variable">$&#123;version&#125;</span>.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar zxf nginx-<span class="variable">$&#123;version&#125;</span>.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; git <span class="built_in">clone</span> https://github.com/google/ngx_brotli.git \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">cd</span> ngx_brotli \</span></span><br><span class="line"><span class="bash">    &amp;&amp; git submodule update --init --recursive \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">cd</span> ../nginx-<span class="variable">$&#123;version&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ./configure \</span></span><br><span class="line"><span class="bash">    --add-dynamic-module=../ngx_brotli \</span></span><br><span class="line"><span class="bash">    --prefix=/etc/nginx \</span></span><br><span class="line"><span class="bash">    --sbin-path=/usr/sbin/nginx \</span></span><br><span class="line"><span class="bash">    --modules-path=/usr/lib/nginx/modules \</span></span><br><span class="line"><span class="bash">    --conf-path=/etc/nginx/nginx.conf \</span></span><br><span class="line"><span class="bash">    --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log \</span></span><br><span class="line"><span class="bash">    --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log \</span></span><br><span class="line"><span class="bash">    --pid-path=/var/run/nginx.pid \</span></span><br><span class="line"><span class="bash">    --lock-path=/var/run/nginx.lock \</span></span><br><span class="line"><span class="bash">    --http-client-body-temp-path=/var/cache/nginx/client_temp \</span></span><br><span class="line"><span class="bash">    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span></span><br><span class="line"><span class="bash">    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span></span><br><span class="line"><span class="bash">    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span></span><br><span class="line"><span class="bash">    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span></span><br><span class="line"><span class="bash">    --with-perl_modules_path=/usr/lib/perl5/vendor_perl \</span></span><br><span class="line"><span class="bash">    --user=nginx \</span></span><br><span class="line"><span class="bash">    --group=nginx \</span></span><br><span class="line"><span class="bash">    --with-compat \</span></span><br><span class="line"><span class="bash">    --with-file-aio \</span></span><br><span class="line"><span class="bash">    --with-threads \</span></span><br><span class="line"><span class="bash">    --with-http_addition_module \</span></span><br><span class="line"><span class="bash">    --with-http_auth_request_module \</span></span><br><span class="line"><span class="bash">    --with-http_dav_module \</span></span><br><span class="line"><span class="bash">    --with-http_flv_module \</span></span><br><span class="line"><span class="bash">    --with-http_gunzip_module \</span></span><br><span class="line"><span class="bash">    --with-http_gzip_static_module \</span></span><br><span class="line"><span class="bash">    --with-http_mp4_module \</span></span><br><span class="line"><span class="bash">    --with-http_random_index_module \</span></span><br><span class="line"><span class="bash">    --with-http_realip_module \</span></span><br><span class="line"><span class="bash">    --with-http_secure_link_module \</span></span><br><span class="line"><span class="bash">    --with-http_slice_module \</span></span><br><span class="line"><span class="bash">    --with-http_ssl_module \</span></span><br><span class="line"><span class="bash">    --with-http_stub_status_module \</span></span><br><span class="line"><span class="bash">    --with-http_sub_module \</span></span><br><span class="line"><span class="bash">    --with-http_v2_module \</span></span><br><span class="line"><span class="bash">    --with-mail \</span></span><br><span class="line"><span class="bash">    --with-mail_ssl_module \</span></span><br><span class="line"><span class="bash">    --with-stream \</span></span><br><span class="line"><span class="bash">    --with-stream_realip_module \</span></span><br><span class="line"><span class="bash">    --with-stream_ssl_module \</span></span><br><span class="line"><span class="bash">    --with-stream_ssl_preread_module \</span></span><br><span class="line"><span class="bash">    --with-cc-opt=<span class="string">&#x27;-Os -fomit-frame-pointer -g&#x27;</span> \</span></span><br><span class="line"><span class="bash">    --with-ld-opt=-Wl,--as-needed,-O1,--sort-common \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make modules</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:$&#123;version&#125;-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> version</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TIME_ZONE=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/<span class="variable">$TIME_ZONE</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TIME_ZONE</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /root/nginx-<span class="variable">$&#123;version&#125;</span>/objs/ngx_http_brotli_filter_module.so /usr/lib/nginx/modules/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /root/nginx-<span class="variable">$&#123;version&#125;</span>/objs/ngx_http_brotli_static_module.so /usr/lib/nginx/modules/</span></span><br></pre></td></tr></table></figure>
<h2 id="三、启用-Brotli">三、启用 Brotli</h2>
<p>确保使用了我的镜像或上文的 Dockerfile 构建出的镜像。此时镜像中已经添加了 Brotli 的模块文件，可以动态引入。</p>
<p>在 nginx.conf 开头添加</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">load_module</span> /usr/lib/nginx/modules/ngx_http_brotli_filter_module.so;</span><br><span class="line"><span class="attribute">load_module</span> /usr/lib/nginx/modules/ngx_http_brotli_static_module.so;</span><br></pre></td></tr></table></figure>
<p>在<code>http</code>部分中添加以启用，gzip 和 Brotli 可以共存。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># brotli</span></span><br><span class="line"><span class="attribute">brotli</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">brotli_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="attribute">brotli_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">brotli_min_length</span> <span class="number">20</span>;</span><br><span class="line"><span class="attribute">brotli_types</span></span><br><span class="line">  application/atom+xml</span><br><span class="line">  application/geo+json</span><br><span class="line">  application/javascript</span><br><span class="line">  application/x-javascript</span><br><span class="line">  application/json</span><br><span class="line">  application/ld+json</span><br><span class="line">  application/manifest+json</span><br><span class="line">  application/rdf+xml</span><br><span class="line">  application/rss+xml</span><br><span class="line">  application/vnd.ms-fontobject</span><br><span class="line">  application/wasm</span><br><span class="line">  application/x-web-app-manifest+json</span><br><span class="line">  application/xhtml+xml</span><br><span class="line">  application/xml</span><br><span class="line">  font/eot</span><br><span class="line">  font/otf</span><br><span class="line">  font/ttf</span><br><span class="line">  image/bmp</span><br><span class="line">  image/svg+xml</span><br><span class="line">  text/cache-manifest</span><br><span class="line">  text/calendar</span><br><span class="line">  text/css</span><br><span class="line">  text/javascript</span><br><span class="line">  text/markdown</span><br><span class="line">  text/plain</span><br><span class="line">  text/xml</span><br><span class="line">  text/vcard</span><br><span class="line">  text/vnd.rim.location.xloc</span><br><span class="line">  text/vtt</span><br><span class="line">  text/x-component</span><br><span class="line">  text/x-cross-domain-policy;</span><br></pre></td></tr></table></figure>
<p>通过<code>nginx -t</code>检查下配置无误后，通过<code>nginx -s reload</code>应用配置即可。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>使用telegram来收发微信消息</title>
    <url>/posts/ehforwarderbot/</url>
    <content><![CDATA[<p>我一直非常喜欢使用 telegram，我个人觉得这是最好用的社交聊天工具。微信，我就用的少很多了，但是有时候说不得还是要用一下的。今天发现了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JsdWVzZXQvZWhGb3J3YXJkZXJCb3Q=">EH Forwarder Bot<i class="fa fa-external-link-alt"></i></span>这个好东西，可以用来在 telegram 上收发微信消息，当真是神奇。我马上决定来折腾一下。</p>
<span id="more"></span>
<h2 id="前期准备">前期准备</h2>
<h3 id="首要条件">首要条件</h3>
<ol>
<li>你需要有一个能翻墙的服务器</li>
<li>你需要有一个 telegram 账号</li>
<li>你需要有一个微信账号</li>
</ol>
<p>差不多就是这样了。</p>
<p>顺便我的系统是<code>Ubuntu 18.04</code>，仅供参考。</p>
<h3 id="可能存在的问题">可能存在的问题</h3>
<ol>
<li>这个 bot 其实是对微信网页版的一个封装，或许可能会被封微信网页版。我也不清楚，网上是这么说的来着，要做好心理准备。</li>
<li>虽然可能初始配置比较麻烦，但是想到之后就能用美腻的 tg 来用微信就很期待了。</li>
<li>由于是基于网页版微信，手机上的微信还不能关，但是由于微信支持在网页版微信登录的时候关闭手机上通知，所以还行吧。</li>
<li>需要自行将消息分类，不然会所有消息堆在一起。</li>
</ol>
<h2 id="安装依赖">安装依赖</h2>
<h3 id="安装-python3-pip3">安装 python3 &amp; pip3</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install python3-pip python3-dev python3-setuptools libtiff5-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev libmagic-dev ffmpeg -y</span><br></pre></td></tr></table></figure>
<h3 id="安装-EH-Forwarder-Bot">安装 EH Forwarder Bot</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install ehforwarderbot</span><br><span class="line">pip3 install efb-telegram-master</span><br><span class="line">pip3 install efb-wechat-slave</span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<h3 id="配置-telegram">配置 telegram</h3>
<h4 id="创建-bot">创建 bot</h4>
<p>搜索<code>botfather</code>，注意是图中圈出的，不要找错了。</p>
<p><img data-src="https://img.iszy.xyz/20190318212915.png" alt=""></p>
<p>然后发送<code>/newbot</code>，开始创建 bot。</p>
<p><img data-src="https://img.iszy.xyz/20190318212925.png" alt=""></p>
<p>如图所示，发过<code>/newbot</code>以后，先发送 bot 的名称，类似于昵称，可以重复。再发送用户名，用户名需要唯一。顺序注意不要搞错。当然左边也有说明，照着说明来一般没有问题。</p>
<p>结束后，就会把你的 http api 给你，注意保存。</p>
<h4 id="配置-bot">配置 bot</h4>
<p>继续在<code>botfather</code>中进行。</p>
<ol>
<li>输入<code>/setprivacy</code>，选择你创建的 bot，选择<code>Disable</code></li>
<li>输入<code>/setjoingroups</code>，选择你创建的 bot，选择<code>Enable</code></li>
<li>输入<code>/setcommands</code>，选择你创建的 bot，输入以下内容：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">link - 将会话绑定到 Telegram 群组</span><br><span class="line">chat - 生成会话头</span><br><span class="line">recog - 回复语音消息以进行识别</span><br><span class="line">extra - 获取更多功能</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.iszy.xyz/20190318212939.png" alt=""></p>
<p><img data-src="https://img.iszy.xyz/20190318212953.png" alt=""></p>
<p><img data-src="https://img.iszy.xyz/20190318213004.png" alt=""></p>
<h4 id="获取个人-chat-id">获取个人 chat id</h4>
<p>搜索<code>get_id_bot</code>，同样是图中圈出的。</p>
<p><img data-src="https://img.iszy.xyz/20190318213016.png" alt=""></p>
<p>发送<code>/start</code>即可获取自己的 chat id，留作后用。</p>
<p><img data-src="https://img.iszy.xyz/20190318213029.png" alt=""></p>
<h3 id="配置-EH-Forwarder-Bot">配置 EH Forwarder Bot</h3>
<p>2.0 版本的 EH Forwarder Bot 需要自行创建配置文件。</p>
<h4 id="创建配置文件">创建配置文件</h4>
<p>输入以下命令创建并编辑配置文件，路径可能不存在，需要另外创建。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.ehforwarderbot/profiles/default/config.yaml</span><br></pre></td></tr></table></figure>
<p>输入以下内容并保存。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">master_channel:</span> <span class="string">&quot;blueset.telegram&quot;</span></span><br><span class="line"><span class="attr">slave_channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;blueset.wechat&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="创建主端配置">创建主端配置</h4>
<p>输入以下命令创建并编辑主端配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.ehforwarderbot/profiles/default/blueset.telegram/config.yaml</span><br></pre></td></tr></table></figure>
<p>输入以下内容并保存，<code>token</code>后替换为之前在<code>botfather</code>处获得的 http api，<code>admins</code>后面替换成<code>get_id_bot</code>处查询到的个人 id。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">token:</span> <span class="string">&quot;88888888:dGDe890Pml9lmp9PO9j9pJ9Pn9NMPO0nnki&quot;</span></span><br><span class="line"><span class="attr">admins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">88888888</span></span><br></pre></td></tr></table></figure>
<h2 id="运行">运行</h2>
<h3 id="二维码扫描登录">二维码扫描登录</h3>
<p>首先需要登录一次，以得到相关文件。输入以下内容启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ehforwarderbot</span><br></pre></td></tr></table></figure>
<p>终端上将会显示出一个二维码，使用手机微信扫一扫确认登陆。可以看到很快就会登陆成功，手机微信里也会显示网页微信已登录。</p>
<p>按下<code>ctrl+c</code>终止程序。</p>
<h3 id="守护进程">守护进程</h3>
<p>守护进程肯定是需要的，总不能一直开着终端窗口吧。</p>
<p>创建 service 配置文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/ehforwarderbot.service</span><br></pre></td></tr></table></figure>
<p>输入以下内容并保存。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=EH Forwarder Bot instance</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line">Documentation=https://github.com/blueset/ehForwarderBot</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Environment=&#x27;EFB_PROFILE=/root/.ehforwarderbot/profiles/default/&#x27; &#x27;LANG=en_US.UTF-8&#x27; &#x27;PYTHONIOENCODING=utf_8&#x27; &#x27;EFB_DATA_PATH=/root&#x27;</span><br><span class="line">ExecStart=/usr/local/bin/ehforwarderbot --verbose --profile=$&#123;EFB_PROFILE&#125;</span><br><span class="line">Restart=on-abort</span><br><span class="line">KillSignal=SIGINT</span><br><span class="line">StandardOutput=journal+file:/var/log/efb.debug</span><br><span class="line">StardardError=journal+file:/var/log/efb.error</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=efb</span><br><span class="line">Alias=ehforwarderbot</span><br></pre></td></tr></table></figure>
<p><code>ExecStart</code>后的地址可能不同，可以输入<code>which ehforwarderbot</code>来查看你的地址进行替换。</p>
<p>接下来即可使用以下 service 操作。</p>
<ul>
<li><code>service ehforwarderbot start</code>: 启动</li>
<li><code>service ehforwarderbot status</code>: 查看状态</li>
<li><code>service ehforwarderbot stop</code>: 停止</li>
</ul>
<h2 id="使用">使用</h2>
<h3 id="添加-bot">添加 bot</h3>
<p>添加刚刚创建的 bot，这个应该都明白吧。</p>
<h3 id="常见命令">常见命令</h3>
<p>说明一下，后面的联系人参数是模糊查询，会列出找出的联系人并进行下一步操作。联系人包括人、群组、公众号。</p>
<ul>
<li><code>/chat 联系人</code>：聊天</li>
<li><code>/link 联系人</code>：可以进行多种操作，将联系人消息绑定到某个群组，或者设置该联系人免打扰。再次运行可重新绑定或取消免打扰。</li>
</ul>
<p>其他的可以查看参考文档研究研究。</p>
<h3 id="消息分组">消息分组</h3>
<p>不能让所有消息都发到 bot 里吧，那也太乱了，所以需要对消息进行分组。</p>
<p>我讲一下将公众号消息全部分组到一个群里的过程。</p>
<ol>
<li>首先创建一个群组，似乎创建群组必须拉一个其他人的样子，我是自己有个小号，拉进去创建了群，再踢掉。</li>
<li>进入你刚刚创建的 bot，输入<code>/link 联系人</code>，选择<code>绑定</code>，在弹出的窗口中选择你刚刚创建的群组，bot 将被加入那个群组，以后该联系人的消息将会发送到那个群组中。</li>
<li>多个联系人可以绑定到一个群组中，重复进行第 2 步，即可将公众号都分组到一个群组里。</li>
</ol>
<p>注意：</p>
<ol>
<li>当群组只绑定了一个群组时，直接发消息就是回复该联系人。可以用于绑定单个人或群组。</li>
<li>当群组绑定了多个群组时，我没有试过直接回复会发生什么情况，或许需要使用<code>/chat</code>命令。我觉得一般用于绑定一堆不需要回复的公众号之类。</li>
<li>这个程序仅支持网页版微信支持的消息类型，可能会有部分消息接收不正常，被网页微信截断的情况，会提醒你去移动端查看。</li>
</ol>
<h3 id="使用技巧（转）">使用技巧（转）</h3>
<blockquote>
<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9tZXRhLmFwcGlubi5jb20vdC9lZmIvMzMyOQ==">Efb 的一些小技巧<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ol>
<li>微信端退出后，可以在<code>Telegram Bot</code>里直接重新登录，但需要第二块屏幕来扫码二维码。</li>
<li>可以将所有公众号绑定到一个<code>Group</code>里</li>
<li>可以防止微信的撤回功能</li>
<li>微信客户端可设置手机静音功能，即开启<code>EFB</code>的时候，微信不发送通知</li>
<li>可以绑定「文件传输助手」，名称是<code>File Helper</code></li>
<li>使用<code>/link 李三</code>来绑定李三至<code>Group</code></li>
<li>使用<code>/info</code>来查看当前<code>Group</code>状态</li>
<li>建议使用与微信相同的联系人头像，且为<code>Group</code>命名为<code>李三.WeChat</code>以便区分</li>
<li>Telegram 的贴纸、GIF 可以直接发往微信，微信可正常显示</li>
<li>微信发来的表情、图片、视频等媒体文件，多数可正常显示，有部分有版权的表情无法显示，取决于微信网页端</li>
<li>红包、语音提醒、位置等功能取决于微信网页端功能（目前 EFB 框架尚无计划支持朋友圈类社交功能和语音/视频通话）</li>
<li>在单独绑定的会话中，指定回复一条消息可以在微信中同样引用。（仅适用于文本消息）</li>
<li><code>Group</code>中除了添加<code>bot</code>，还能添加<code>Telegram</code>联系人，此时该<code>Telegram</code>联系人可以扮演老大哥的节奏，可以观察微信聊天，但微信端无法收到该联系人在<code>Group</code>中的消息</li>
<li><code>EFB</code>可以实现微信聊天记录的无限制保存与漫游功能，此后，再也无需备份微信聊天内容，<code>Telegram</code>都帮你保存了。包括语音、视频、文件、位置、分享链接、甚至撤回提示。</li>
<li><code>Telegram Inline Bot</code>生成的（已兼容格式的）内容可以直接发送到微信。</li>
<li>手机微信上的未读数不会自动减少。</li>
</ol>
<h2 id="后话">后话</h2>
<p>我使用微信频率不高，一般也就看看公众号，觉得用着还是非常舒适的，请看官们自行斟酌自己的使用情况。喜欢折腾的也可以自己配置着玩玩，挺有意思的。有点期待，未来会不会也能用 tg 来收发 QQ 消息呢？</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>微信</tag>
        <tag>Telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Docker快速部署FileBrowser 2.0</title>
    <url>/posts/filebrowser2-setup-docker/</url>
    <content><![CDATA[<p>File Browser 作为一款远端文件浏览器，可以把你的服务器轻松地变为私人网盘。今天我就来简单介绍一下，如何通过 Docker 轻松部署 File Browser 2.0。</p>
<span id="more"></span>
<h2 id="File-Browser-简介">File Browser 简介</h2>
<p>File Browser 可以在指定目录中提供文件管理界面，可以上传、删除、预览、重命名和编辑文件。 它允许创建多个用户，每个用户都可以拥有自己的目录。 它可以用作独立应用程序或中间件。</p>
<p>功能概览：</p>
<ul>
<li>简单好用的登录系统</li>
<li>通过流畅的界面管理文件</li>
<li>管理用户，添加权限，设置文件范围</li>
<li>编辑文件</li>
<li>执行自定义命令</li>
<li>个性化界面</li>
</ul>
<h2 id="安装及配置">安装及配置</h2>
<h3 id="安装-Docker">安装 Docker</h3>
<p>Docker 的安装很简单，教程很多，在这里只列举一下，Ubuntu 和 CentOS 的安装脚本。</p>
<ul>
<li>Ubuntu: <code>wget -qO- https://get.docker.com/ | sudo sh</code></li>
<li>CentOS: <code>curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh</code></li>
</ul>
<h3 id="创建配置文件">创建配置文件</h3>
<p>如果要自定义设置的话，那就要创建一个配置文件，注意配置文件中的路径都是 Docker 容器中的虚拟路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi filebrowser.json</span><br></pre></td></tr></table></figure>
<p>我的配置文件内容如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">&quot;locale&quot;</span>: <span class="string">&quot;zh-cn&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;baseURL&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;log&quot;</span>: <span class="string">&quot;stdout&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;/database.db&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;/srv&quot;</span>, <span class="comment">// 文件管理根目录</span></span><br><span class="line">  <span class="attr">&quot;cert&quot;</span>: <span class="string">&quot;/ssl.cer&quot;</span>, <span class="comment">// 如果不需要 https 请去掉</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;/ssl.key&quot;</span> <span class="comment">//   cert 和 key 两行配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要更多配置内容，请参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmZpbGVicm93c2VyLnh5ei9jbGkvZmlsZWJyb3dzZXItY29uZmlnLXNldA==">官方文档<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="创建一个-db-文件">创建一个 db 文件</h3>
<p>如果需要长久化存储账号配置等信息，需要提前创建一个空的 db 文件用于存储。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch database.db</span><br></pre></td></tr></table></figure>
<h3 id="启动-File-Browser">启动 File Browser</h3>
<p>使用如下命令启动 File Browser。注意替换所有<code>:</code>前的路径为你自己的路径，<code>:</code>后的路径为 docker 容器中的虚拟路径，不要修改。可以把 8888 改成任意你想要的端口。如果上面配置文件里面没有写 https 配置的话，可以不用加上证书和密钥的映射。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-v /your/path:/srv \</span><br><span class="line">-v /your/path/to/example.cer:/ssl.cer \</span><br><span class="line">-v /your/path/to/example.key:/ssl.key \</span><br><span class="line">-v /your/path/to/database.db:/database.db \</span><br><span class="line">-v /your/path/to/filebrowser.json:/.filebrowser.json \</span><br><span class="line">-p 8888:80 \</span><br><span class="line">--name filebrowser \</span><br><span class="line">--restart=always \</span><br><span class="line">filebrowser/filebrowser</span><br></pre></td></tr></table></figure>
<p>访问你的浏览器，现在应该可以开始使用了。如果通过外网访问，别忘了在防火墙打开端口。</p>
<p><img data-src="https://img.iszy.xyz/20190318213056.png" alt="File Browser"></p>
<h2 id="其他">其他</h2>
<h3 id="管理">管理</h3>
<p>这里的管理指的是在服务器上对 File Browser 进行管理，File Browser 内的操作我就不再赘述了。</p>
<ul>
<li>关闭 File Browser: <code>docker stop filebrowser</code></li>
<li>开启 File Browser: <code>docker start filebrowser</code></li>
<li>卸载 File Browser: <code>docker rm filebrowser</code></li>
</ul>
<h3 id="防火墙配置">防火墙配置</h3>
<p>如果需要外网访问，需要在服务器上打开端口，以上面的<code>8888</code>端口为例。</p>
<p>这里仅举例 iptables 和 ufw 的操作。</p>
<h4 id="iptables">iptables</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp --dport 8888 -j ACCEPT</span><br><span class="line">sudo iptables -A OUTPUT -p tcp --sport 8888 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h4 id="ufw">ufw</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 8888</span><br></pre></td></tr></table></figure>
<h2 id="后话">后话</h2>
<p>好了，以上就是通过 Docker 在 Linux 系统上安装以及使用 File Browser 的方法。既然是 Docker，那么在其他支持 Docker 的平台也是可以用的，Docker 部分的操作是一致的。</p>
<p>有更多问题，欢迎在评论区留言。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>文件管理</tag>
      </tags>
  </entry>
  <entry>
    <title>小米MI6最新欧版(xiaomi.eu版)MIUI教程</title>
    <url>/posts/flash-miui-eu/</url>
    <content><![CDATA[<p>最近刚买了小米手环 3 NFC 版，在手环上开好了公交卡，感觉对国内的 MIUI 版本再无留恋。早就想把手机刷成欧版 MIUI 了，碍于想要使用 NFC 公交卡，一直没有执行，现在终于没有牵绊了。现在我就来记录一下流程。注意，刷机前请备份好你的数据。</p>
<span id="more"></span>
<h2 id="解锁手机">解锁手机</h2>
<p>MI6 的 bootloader 是带锁的，需要先到<span class="exturl" data-url="aHR0cDovL3d3dy5taXVpLmNvbS91bmxvY2svaW5kZXguaHRtbA==">申请解锁小米手机<i class="fa fa-external-link-alt"></i></span>上申请解锁，申请通过后，按照官网流程解锁即可。解锁成功后，手机开机画面最低端会显示<code>Unlocked</code>。</p>
<h2 id="刷-TWRP">刷 TWRP</h2>
<p>刷第三方 ROM 之前，需要先通过 Fastboot 模式刷入第三方 Recovery，这里以 TWRP 为例。</p>
<h3 id="下载-adb">下载 adb</h3>
<p>adb 全称 Android Debug Bridge，通过这个工具能够在连接的安卓设备上运行命令。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kbC5nb29nbGUuY29tL2FuZHJvaWQvcmVwb3NpdG9yeS9wbGF0Zm9ybS10b29scy1sYXRlc3Qtd2luZG93cy56aXA=">点击这里<i class="fa fa-external-link-alt"></i></span>，下载官方 adb 包。下载好后解压出来，会在文件夹中找到<code>adb.exe</code>、<code>fastboot.exe</code>等文件。</p>
<h3 id="下载-TWRP">下载 TWRP</h3>
<p>TWRP 是一个很强大的第三方 Recovery，我们需要下载对应手机型号的 TWRP 镜像。点击<span class="exturl" data-url="aHR0cHM6Ly9kbC50d3JwLm1lL3NhZ2l0L3R3cnAtMy4yLjMtMi1zYWdpdC5pbWc=">这里<i class="fa fa-external-link-alt"></i></span>下载 MI6 机型的镜像。</p>
<p>其他机型可以访问<span class="exturl" data-url="aHR0cHM6Ly90d3JwLm1lL0RldmljZXMv">Devices - TWRP<i class="fa fa-external-link-alt"></i></span>寻找，这里不再介绍。</p>
<h3 id="刷入-TWRP">刷入 TWRP</h3>
<ol>
<li>将刚刚下载的镜像移动到<code>adb.exe</code>等文件的同一目录下，并重命名为<code>twrp.img</code>。</li>
<li>长按手机<code>电源键</code>和<code>下音量键</code>，直到屏幕上出现一个安卓小机器人，进入到 Fastboot 模式。</li>
<li>将手机用数据线连接刀电脑。</li>
<li>在<code>adb.exe</code>所在目录，按住<code>shift</code>并右键，点击<code>在此处打开Powershell窗口</code>/<code>在此处打开CMD窗口</code>。</li>
<li>运行如下命令，刷入并重启到 TWRP Recovery。</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">fastboot.exe flash recovery twrp.img</span><br><span class="line">fastboot.exe boot twrp.img</span><br></pre></td></tr></table></figure>
<h2 id="安装">安装</h2>
<h3 id="下载系统">下载系统</h3>
<p>在这里我直接提供一下，我下载的版本的下载链接。</p>
<p>点击下载: <span class="exturl" data-url="aHR0cHM6Ly9qYWlzdC5kbC5zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdC94aWFvbWktZXUtbXVsdGlsYW5nLW1pdWktcm9tcy94aWFvbWkuZXUvTUlVSS1XRUVLTFktUkVMRUFTRVMvOS4yLjIxL3hpYW9taS5ldV9tdWx0aV9NSTZfOS4yLjIxX3YxMC04LjAuemlw">xiaomi.eu_multi_MI6_9.2.21_v10-8.0.zip<i class="fa fa-external-link-alt"></i></span></p>
<p>其他机型或更新版本，请去<span class="exturl" data-url="aHR0cHM6Ly94aWFvbWkuZXUvY29tbXVuaXR5Lw==">xiaomi.eu<i class="fa fa-external-link-alt"></i></span>寻找。</p>
<h3 id="格式化手机">格式化手机</h3>
<p>进入 TWRP 以后，点击<code>Wipe</code>-<code>Format Data</code>，输入<code>yes</code>并确定，这将格式化手机内部存储并清除<code>data</code>分区的加密。</p>
<h3 id="安装系统">安装系统</h3>
<p>接下来将下载好的系统安装包(zip 格式)拷贝到手机内部目录，当然通过 U 盘插到手机上也是可以的，TWRP 支持使用 MTP 存储。</p>
<p>点击<code>Install</code>，然后选择之前拷贝进去的 zip 包，滑动滑块开始安装。安装完成后，重启即可开始使用新系统。</p>
<p>注意，可能需要登录 Google，自行解决科学上网环境。</p>
<h3 id="ROOT-选">ROOT(选)</h3>
<p>推荐使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvcGpvaG53dS9NYWdpc2svcmVsZWFzZXMv">Magisk<i class="fa fa-external-link-alt"></i></span>。下载最新 Release 的 zip 安装包，通过 TWRP 直接刷入即可。卸载也是很简单的，下载对应版本<code>Magisk-uninstaller</code>的 zip 包，刷入即可。需要安装 Magisk Manager 进行管理，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvcGpvaG53dS9NYWdpc2svcmVsZWFzZXMvZG93bmxvYWQvbWFuYWdlci12Ny4wLjAvTWFnaXNrTWFuYWdlci12Ny4wLjAuYXBr">点击这里<i class="fa fa-external-link-alt"></i></span>下载。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>MIUI</tag>
        <tag>TWRP</tag>
      </tags>
  </entry>
  <entry>
    <title>闲置VPS能用来干点啥</title>
    <url>/posts/free-vps/</url>
    <content><![CDATA[<p>总是看到线路好、价格合适的 VPS 就忍不住剁手，到现在多多少少有几台闲置的 VPS，放着也是放着，能干点啥好呢？</p>
<span id="more"></span>
<ol>
<li>
<p>建代理</p>
<p>鉴于我国的特色国情，访问外网总还是需要一些辅助。既然有闲置的 VPS，如果是国外的，线路速度也还不错的，可以考虑建个代理。虽然网上老说，会被检测啦，容易被封啦，其实不去选特别热门的商家，代理不要公开，自己好好用，基本也不会被封的。</p>
</li>
<li>
<p>搭建个人博客</p>
<p>这个么，如果你原本没有博客的话，可以考虑在 VPS 上建个博客。现在建站已经容易很多了，lnmp 一键脚本非常好用，也有免费的宝塔面板。博客可以采用 wordpress，或者静态的 Hexo、Jekyll 等，都有许多模板可用。相比于其他不是自建的博客，自建博客有了更高的自由度，当然也需要你有一定的基础。</p>
</li>
<li>
<p>云盘</p>
<p>国内许多免费云盘服务都陆续结束了服务，百度云盘又各种限速、审核，国外网盘访问困难。自建私人云盘就自由的多了。如果你有一台流量充足、硬盘足够的 VPS，就可以考虑以下自建云盘了。当然，硬盘不充足还有其他的选择，比如腾讯云和阿里云挂载自家的对象存储到服务器上做硬盘，牺牲了一定的性能，但能弥补硬盘的不足。</p>
</li>
<li>
<p>PT/BT 下载</p>
<p>在允许 BT 下载的服务器上凭借着大带宽、高流量、24 小时不关机，刷刷上传量，造福大众岂不是美滋滋。当然，一定要是服务商允许 BT 才行，不然小心给你封了。</p>
</li>
<li>
<p>自建 DNS 服务器</p>
<p>不想再被运营商劫持、不想再被 DNS 污染，那就在服务器上自建纯净 DNS 吧。当然要注意打开端口，而且最好不要是 53 端口，不然经过 GFW 就被污染了，一点用都没有。顺便，DNS 不解决翻墙问题。</p>
</li>
<li>
<p>自建邮箱服务器</p>
<p>厌恶了国内的免费邮箱，想要拥有自己的域名服务器？那么你可以在自己的服务器商搭建邮箱服务器。服务器怎么配置全凭你喜好。当然也有更好的实现方式。像我现在用 mailgun 转发，配合 gmail，用得还是非常舒服的。</p>
</li>
<li>
<p>虚拟主机</p>
<p>VPS 嘛，虽然说是虚拟服务器，那也是一台服务器啊，那就可以拆分成虚拟主机来卖咯。当然可能大家都得共用一个 IP 了，如果有哪个网站有问题，说不定会牵连同 IP 的其他网站。而且吧，弄成虚拟主机也没那么简单，还有许多工作要做，如果只是简单的 lnmp 一键脚本这样的虚拟主机，还是就跟朋友用用吧，分担一下网费。</p>
</li>
<li>
<p>搭建感兴趣的其他服务</p>
<p>在 GitHub 上面有许多有意思的项目，如果你比较感兴趣，你可以将其部署到你的服务器上玩一玩。感觉也是非常不错的。</p>
</li>
<li>
<p>其他</p>
<p>我前面说的基本都是 Linux 主机，Windows 服务器或许也能做吧。但是 Windows 自身内存占用较多，成本或许也更高了。Windows 主机的话还能干些只有 Windows 能干的事，比如说一些挂机的工作，需要运行 exe 程序的。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>自由鲸FreeWhale--性价比SSR/V2Ray机场推荐</title>
    <url>//page/freewhale/</url>
    <content><![CDATA[<blockquote>
<p><strong>郑重声明</strong>：本文所介绍产品主要是为了方便学习、科研以及外贸工作。请遵守中华人民共和国法律法规，切勿在任何地方发布分裂国家，激化民族矛盾的言论。</p>
</blockquote>
<p>本文来介绍一家性价比超高的 SSR/V2Ray 机场，名叫自由鲸 FreeWhale，可满足多种需求。经过长期使用，稳定性和速度上都很不错，推荐一下。</p>
<span id="more"></span>
<p><img data-src="https://img.iszy.xyz/20210905234122.png?x-oss-process=style/big" alt=""></p>
<h2 id="前言">前言</h2>
<p>或许不少人已经对自由鲸 FreeWhale 有了不少了解了，在此先提供一下相关的链接和优惠信息。我会尽量保证此处的官网传送门可用。</p>
<h3 id="相关链接">相关链接</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZnJlZXdoYWxl">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p>如果需要邀请码，可以使用我的邀请码: <code>iszy</code></p>
<p>机场测速在这里提供下，仅供参考。考虑到测速会占用大量服务器带宽，尤其是在高峰期，或许会影响其他用户的正常使用，在此不会频繁更新测速记录，仅在出现重大情况或是用户要求更新时更新测速。测速时间会在速度图的底部留有记录。</p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#FreeWhale-%E8%87%AA%E7%94%B1%E9%B2%B8">⭐⭐ FreeWhale 自由鲸 测速 ⭐⭐</a> (2022-02-09)</p>
<h3 id="优惠">优惠</h3>
<blockquote>
<p>官方长期优惠</p>
</blockquote>
<p><strong>￥ 115</strong> 及以上套餐可用</p>
<p><strong>95 折</strong>礼遇码：<code>dearmarch</code></p>
<h2 id="自由鲸-FreeWhale-简介">自由鲸 FreeWhale 简介</h2>
<p><strong>自由鲸 FreeWhale</strong>是一家长期走中高端路线的 <strong>ShadowsocksR(SSR)</strong> 机场，也提供部分 V2Ray 线路，已经稳定运行多年。实际对比下来，它的性价比还是相当高的，线路又多，提供的流量也十分充足，主要推荐的套餐充分考虑了当前主流用户能够接受的价位，可以说是无可挑剔。现阶段包含大量优质 V2Ray 线路和更多的 SSR 线路，<strong>Lv.2</strong> 节点采用 <strong>SSR 隧道加密</strong>和 V2ray 技术，配合国内 <strong>6Gbps</strong> 机器和负载均衡技术，保证全时段稳定性。用了很久，稳定通过了“多次网络波动”时期，体验极佳，可以放心使用。</p>
<p>和自由鲸 FreeWhale 接触时间也比较久了，一步步看着自由鲸 FreeWhale 成长到现在这样，也是比较感慨。几年前，自由鲸 FreeWhale 曾经比较惨，一度觉得快要跑路了，没想到硬是撑过了困难时期，到现在线路质量越来越好，回购用户越来越多，可以说和商家负责任的态度有很大关系。我觉得吧，姑且还是可以信任的，可以放心购买。</p>
<h3 id="特点">特点</h3>
<p><strong>封闭邀请机制</strong></p>
<p>自由鲸 FreeWhale 需要邀请码才能注册成功，这样的注册机制一定程度确保了服务的稳定性。</p>
<p>如果需要邀请码，可以使用我的邀请码: <code>iszy</code></p>
<p>也可以直接点击我的<span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZnJlZXdoYWxl">邀请链接<i class="fa fa-external-link-alt"></i></span>，进入注册。</p>
<p><strong>长期折扣优惠</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZnJlZXdoYWxl">购买套餐<i class="fa fa-external-link-alt"></i></span>时使用优惠码，可享受折扣优惠，优惠码不可叠加使用。</p>
<p><strong>实时服务监控</strong></p>
<p>在自由鲸 FreeWhale 的面板中有提供<strong>节点列表</strong>，会展示各种节点信息，方便用户选择空闲优质的节点。你可以轻松地查看到目前所有线路的状况，包括节点已使用流量总量(所有用户)、流量倍率、目前用户量等。当然你也可以轻松的在首页查看到自己套餐流量的使用状况。</p>
<p><strong>每日签到系统</strong></p>
<p>在自由鲸 FreeWhale 的面板中，每天可以签到一次，以获得一定量的流量，不会很多，但是在流量即将用尽的情况下能够续续命。不过如果有必要还是推荐选择 5 元 30G 的月重置套餐流量叠加包。</p>
<p><strong>特供打机神线</strong></p>
<p>所谓“打机神线”其实是提供与全球多个海外游戏服务器提供连结的线路，确保国际服游戏玩家在进行游戏时候能获得最佳的低延迟网络质量。也就是说，自由鲸 FreeWhale 提供了降低游戏延迟的国际网络线路，而且据我查看一共提供了两条(香港线路)，应该足以够用。当然，如果有游戏需求，个人推荐最好还是使用游戏加速器效果更佳，毕竟专线专用。</p>
<p><strong>总结</strong></p>
<ul>
<li>SSR 隧道中转 &amp; V2ray</li>
<li>采用封闭邀请，精选客户，稳定可靠安全</li>
<li>定期发放折扣，部分套餐月均低至 9 元，具有极高性价比（可提供企业定制服务）</li>
<li>全面解锁 Netflix,DMM,HULU,TVB 等各类流媒体，YouTube4K-8K 流畅</li>
<li>支持 Windows/Mac/iOS/Android/ 路由器，支持多设备同时使用</li>
<li>充值采用支付宝 Alipay，支付安全便捷，使用教程简单易用</li>
<li>和多家 IDC 深入合作，如阿里云，GmoCloud，香港宽频，中华电信……</li>
<li>全球线路全面，香港（HK,HKBN,CN2）、日本(IIJ，NTT)，台湾（HiNet，TFN）、新加坡、美国（GIA,NCP）、韩国(AWS)、俄罗斯(KHV)、英国(NTT)、澳门(CTM)等线路可选</li>
<li>提供昂贵的 IPLC，为稳定性需求较高的用户提供了支持，在良好网络环境下可为游戏加速</li>
</ul>
<h2 id="套餐">套餐</h2>
<p>自由鲸 FreeWhale 提供了多样种类的套餐分类，具体可分为：</p>
<ul>
<li>按月重置流量的月费套餐</li>
<li>按季度重置流量的季度套餐</li>
<li>按年重置流量的全年套餐</li>
<li>另提供了流量不足时救命的流量叠加包</li>
<li>如有个人/企业高端定制的需求，可以找老板详谈</li>
</ul>
<blockquote>
<p>特别的，你可以购买全节点或者部分节点。对应的，全节点套餐赋予用户 2 级用户等级；而部分节点套餐只赋予用户 1 级用户等级。套餐过期后长期不续费或新购套餐的用户账号，用户等级会自动将为 0 级。处于等级 0 长达 30 天且余额小于￥ 5 的账号，将会被清理。</p>
</blockquote>
<p><strong>包年包月套餐</strong></p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>账号等级</th>
<th>付款周期</th>
<th>客户端数量</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>月费套餐【全节点】</strong></td>
<td>130G/30 天</td>
<td>25 元</td>
<td>2</td>
<td>月付</td>
<td>8</td>
</tr>
<tr>
<td>月费套餐【非全节点】<br>不含 V2Ray 和隧道中转线路及香港台湾地区</td>
<td>70G/30 天</td>
<td>20 元</td>
<td>1</td>
<td>月付</td>
<td>8</td>
</tr>
<tr>
<td>月重置套餐流量叠加包</td>
<td>30G</td>
<td>5 元</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>按量付费套餐</strong></p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>账号等级</th>
<th>付款周期</th>
<th>客户端数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>季度套餐【全节点】</td>
<td>350G/90 天</td>
<td>70 元</td>
<td>2</td>
<td>季付</td>
<td>10</td>
</tr>
<tr>
<td><strong>全年 0.5T 轻量【全节点/性价比】★</strong></td>
<td>512G/360 天</td>
<td>115 元</td>
<td>2</td>
<td>年付</td>
<td>10</td>
</tr>
<tr>
<td><strong>全年 1T 中度【全节点/主流】★</strong></td>
<td>1024G/360 天</td>
<td>200 元</td>
<td>2</td>
<td>年付</td>
<td>15</td>
</tr>
<tr>
<td><strong>全年 2T 重度【全节点/尊享】★</strong></td>
<td>2048G/360 天</td>
<td>375 元</td>
<td>2</td>
<td>年付</td>
<td>15</td>
</tr>
<tr>
<td>全年畅享套餐【全节点/团队】</td>
<td>6666G/360 天</td>
<td>996 元</td>
<td>2</td>
<td>年付</td>
<td>20</td>
</tr>
</tbody>
</table>
<h2 id="其他的话">其他的话</h2>
<ul>
<li>使用前请确保设备时间校准精确，使用 V2ray 时服务器时间和本地时间误差不能超过两分钟.</li>
<li>新客初试可选购 <code>月费套餐【全节点】</code>,后期可选购年费套餐,目前暂不支持退款。</li>
<li>使用邀请码(<code>iszy</code>)注册后，在用户面板首页，你可以找到各平台的 SR 和 V2Ray 客户端的下载链接及相关配置教程。
<ul>
<li>苹果平台比较特殊，没法提供下载，iOS 可能需要自行在美区苹果商城购买软件，请尝试某宝搜索美区 ID 等关键词。</li>
</ul>
</li>
<li>还可以点击以下自由鲸 FreeWhale 全平台订阅教程链接进入，查看教程进行服务订阅。
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLm9obXkuY2F0Lw==">自由鲸 FreeWhale 全平台订阅教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>订阅地址及节点信息请勿截图发到其他地方，请务必打码。</li>
<li>由于众所周知的原因，官网域名会被迫更换，请务必记下用户首页上的多个域名，以免失联，或从本文中的链接访问。</li>
<li>售后公告请关注 <span class="exturl" data-url="aHR0cHM6Ly90Lm1lL2pvaW5jaGF0L0hySjZCRmNVUE8tQ2xyQlVyb3FKVWc=">TG 群<i class="fa fa-external-link-alt"></i></span>，建议加入获取最新消息。</li>
<li>若有充值、使用问题，请联系 <span class="exturl" data-url="aHR0cHM6Ly90Lm1lL2ZvcmV2ZXJmb3JmaXJl">TG 群管理员<i class="fa fa-external-link-alt"></i></span>，<strong>请勿通过工单系统提交问题</strong>。</li>
</ul>
<hr>
<ul>
<li>本站仅做介绍和引荐，不参与购买、服务和售后，此类问题请通过官方联系方式联系官方，一般可以通过<code>工单</code>或 <code>tg 群</code>的方式。</li>
<li>如有疑问，可在评论区回复。</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>翻墙</tag>
        <tag>科学上网</tag>
        <tag>V2Ray</tag>
        <tag>ssr</tag>
        <tag>机场</tag>
        <tag>SS</tag>
        <tag>Trojan</tag>
        <tag>网络加速</tag>
        <tag>代理推荐</tag>
        <tag>酸酸乳</tag>
        <tag>ssr机场</tag>
        <tag>机场推荐</tag>
        <tag>机场评测</tag>
        <tag>V2Ray推荐</tag>
        <tag>代理</tag>
        <tag>推荐</tag>
        <tag>加速</tag>
        <tag>V2Ray机场</tag>
        <tag>ssr/v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)整合 Gmail 与 Mailgun 实现免费域名邮箱 — 香菇肥牛的博客</title>
    <url>/posts/gmail-and-mailgun/</url>
    <content><![CDATA[<blockquote>
<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9xaW5nLnN1L2FydGljbGUvMTMxLmh0bWw=">奇技淫巧——整合 Gmail 与 Mailgun 实现免费域名邮箱<i class="fa fa-external-link-alt"></i></span> —— 香菇肥牛</p>
</blockquote>
<p>曾今免费的 G Suite 现在已经不再免费了，老版本的 G Suite 已不能更换域名。至于其他的免费域名邮箱，Yandex 的发信经常被 Block, Zoho 收信延迟严重且服务器不稳定，国内各企业邮局更是垃圾得不能用。因此，免费且靠谱的域名邮箱显得格外稀缺。最近在处理邮件发送的时候发现了 Mailgun 这款神器；它和 Gmail 配合可以完美地实现免费域名邮箱。因此，在这里分享给大家。</p>
<span id="more"></span>
<h2 id="Mailgun">Mailgun</h2>
<p>首先要说明一下，Mailgun 每个月发送 10000 封邮件以内是免费的。对于个人和小型团体来说，10000 封的月发送量绰绰有余了。</p>
<p>整个域名邮箱的实现如下面的示意图所示。可见，我们整合了 Mailgun 和 Gmail 实现了和 G Suite 一样的功能，曲线救国。下面我就来介绍一下具体怎样部署 GMail 和 Mailgun。</p>
<p><img data-src="https://img.iszy.xyz/20190318213136.png" alt=""></p>
<h3 id="添加域名">添加域名</h3>
<p>首先，我们要去 <span class="exturl" data-url="aHR0cDovL21haWxndW4uY29t">mailgun.com<i class="fa fa-external-link-alt"></i></span> 注册一个账号。注册账号并验证邮箱后，可以登录到后台，然后在 Domains 选项卡中点击 Add New Domain。</p>
<p><img data-src="https://img.iszy.xyz/20190318213148.png?x-oss-process=style/big" alt=""></p>
<p>输入域名 (比如 <span class="exturl" data-url="aHR0cDovL2V4YW1wbGUuY29t">example.com<i class="fa fa-external-link-alt"></i></span>) 之后点击下一步，会提示修改 DNS 记录。请移步你的域名 DNS 解析商，添加好对应的 DNS 记录。相关的记录一共有 5 条，其中 2 条 TXT 记录，2 条 MX 记录，1 条 CNAME 记录。添加好后点击页面底部的 Continue to Domain Overview，进入管理控制台。</p>
<p><img data-src="https://img.iszy.xyz/20190318213158.png?x-oss-process=style/big" alt=""></p>
<p>在控制台中，顶部有提示，DNS 需要 24~48 小时生效。如果确认自己更改的 DNS 已经生效了，就可以点击控制台中的 Check DNS Records Now，如上图。如果 DNS 设置无误，那么这个域名就可以开始使用了，我们可以看到此时域名的状态已经变成了绿色的 Active。</p>
<h3 id="配置域名转发">配置域名转发</h3>
<p>现在，我们首先要给这个域名设置转发，使得我们的 Gmail 邮箱能够收取域名邮箱的所有信件。</p>
<p>点击顶部 Routes 选项卡，然后点击 Create Route，如下图所示。</p>
<p><img data-src="https://img.iszy.xyz/20190318213212.png?x-oss-process=style/big" alt=""></p>
<p>在 Create New Route 界面中，Expression Type 选择 Catch All，Actions 勾选 Forward 并输入你的 GMail 邮箱地址，其他所有选项保持默认即可，最后点击下面的 Create Route。</p>
<p><img data-src="https://img.iszy.xyz/20190318213224.png?x-oss-process=style/big" alt=""></p>
<p>这时，我们回到 Domains 列表中点击我们自己的域名，应该能看到如下图的页面，其中包含了 SMTP 服务器和密码，以及 API 等内容。我们只需要知道服务器密码即可。</p>
<p><img data-src="https://img.iszy.xyz/20190318213235.png?x-oss-process=style/big" alt=""></p>
<p>至此，Mailgun 的设置完毕，我们需要登录 GMail，设置收发信。</p>
<h2 id="GMail">GMail</h2>
<h3 id="在-GMail-中配置收发信">在 GMail 中配置收发信</h3>
<p>登录你的个人 Gmail 后台，在 Settings 里面找到 Accounts and Import，点击 Add another email address，如下图。</p>
<p><img data-src="https://img.iszy.xyz/20190318213248.png?x-oss-process=style/big" alt=""></p>
<p>在弹出的小窗口中，输入姓名和你要使用的域名邮箱，这里以 <span class="exturl" data-url="bWFpbHRvOmFkbWluQGV4YW1wbGUuY29t">admin@example.com<i class="fa fa-external-link-alt"></i></span> 为例。勾选 Treat as an alias, 然后点击 Next step。在服务器配置的页面输入我们刚才的服务器信息、SMTP 用户名和密码。端口为 587，加密方式选择 TLS，如下图所示。填好后点击 Add account。</p>
<p><img data-src="https://img.iszy.xyz/20190318213257.png?x-oss-process=style/big" alt=""></p>
<p>如果用户名和密码输入无误，GMail 会向你的 <span class="exturl" data-url="bWFpbHRvOmFkbWluQGV4YW1wbGUuY29t">admin@example.com<i class="fa fa-external-link-alt"></i></span> 邮箱发送一封验证邮件，而此时，这封邮件已经被转发至你的 GMail 邮箱了，所以只要点击收到的邮件中的验证链接就大功告成了。</p>
<p><img data-src="https://img.iszy.xyz/20190318213309.png" alt=""></p>
<p>至此，我们完成了 GMail 和 Mailgun 的整合，以及免费域名邮箱的设置。所有发往 <span class="exturl" data-url="bWFpbHRvOmFkbWluQGV4YW1wbGUuY29t">admin@example.com<i class="fa fa-external-link-alt"></i></span> 的邮件均会被 Mailgun 转递至你的 GMail 邮箱，而你的 GMail 邮箱可以直接以 <span class="exturl" data-url="bWFpbHRvOmFkbWluQGV4YW1wbGUuY29t">admin@example.com<i class="fa fa-external-link-alt"></i></span> 的名义发信，和普通的域名邮箱没有任何差别。收件人是无法知道你是用 GMail 发信还是用其他独立的域名邮箱发信的。如果需要添加多个域名邮箱或者别名，只需要重复执行上述 GMail 的配置即可。</p>
<p>如果大家在使用过程中遇到任何问题，欢迎在这里留言，我将及时回复。本文作者为香菇肥牛，原文地址为<span class="exturl" data-url="aHR0cHM6Ly9xaW5nLnN1L2FydGljbGUvMTMxLmh0bWw=">https://qing.su/article/131.html<i class="fa fa-external-link-alt"></i></span>。转载需经过作者同意且需注明原文链接。谢谢！</p>
]]></content>
      <categories>
        <category>应用</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Mailgun</tag>
        <tag>域名邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>Google 中国竟然在 B 站发视频了</title>
    <url>/posts/google-bilibili/</url>
    <content><![CDATA[<p>今天，我在刷 B 站视频的时候偶然发现，<span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNjQxNjk0NTgvIy8=">Google 中国<i class="fa fa-external-link-alt"></i></span>居然有 B 站官方账号，而且还在今天发了第一个视频。不少人在视频下面发评论说：“这不仅是 404 的一小步，也是 b 站的一大步。”我已经进行了一波投币、收藏、分享素质三连了。</p>
<span id="more"></span>
<p><img data-src="https://img.iszy.xyz/20190318213338.png" alt=""></p>
<p>对我这个常年挂着代理，不知墙为何物的人来说，Google 就如家常便饭一般。用惯了 Google 的搜索，实在是无法再回到百度那个广告满天飞、首页垃圾文章一大堆、搜索竞价排名的糟糕搜索引擎了。虽说百度这些年已经有所改善（大概），但在搜索方面还是有着相当的距离，更不要说是尖端技术了。</p>
<p>在经历了 2010 年的谷歌退出中国大陆事件后，Google 慢慢淡出了大多数人的视野。毕竟大多数网民并不愿意费劲折腾去访问一个不是必须访问的网站，尤其是还有一个百度作为替代，可以提供还算不错的服务，Google 当时在中国也并没有达到一家独大的程度。简单提一下，谷歌退出中国大陆事件是指 2010 年 Google 公司因内容审查问题与中国政府交涉，并最终关闭中国版网页搜索服务，转用<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oaw==">香港域名<i class="fa fa-external-link-alt"></i></span>及服务器为中国用户提供简体中文服务的事件。 香港谷歌也在 2014 年被全面封杀了。</p>
<p>Google 一直以来都是互联网自由的倡导者，我非常喜欢 Google 的这一点。即使进行内容审查，Google 也会明明白白地告诉你是因为什么原因删除了什么内容。不想国内的搜索引擎，只会写一个因为某法律法规删除了某些内容，却从来没有更具体的信息以及法律依据。我倒是无所谓了，只要不妨碍我就好，我也改变不了什么。</p>
<p>由于 Google 的超高的技术水平，很多东西都走在时代的前沿，国内的新闻上总是时不时的出现一些 Google 相关的信息。对于国内来说，全都是 404 网站嘛，真是令人尴尬。就有人笑称，某连网站都没法进去的 404 小公司，吃枣药丸 (〜￣ △ ￣)〜 ，真是因缺思厅。</p>
<p>最近老是传出 Google 要回归中国市场的传言，也不知道哪里来的依据。看政府的态度，基本上应该是不会放弃内容审查的了，即使 Google 回归，那也是一个阉割过后的 Google 了。但怎么说，真回归了，好歹也是在这方面做过努力了，正好也能给百度点压力，不要再搞得乱七八糟的了。</p>
<p>emmm，扯得有点远。今天嘛，我看到了这个 Google 中国在 B 站发的视频，还是有些高兴的。怎么说呢？这或许也是 Google 为回归中国做出的一些努力吧。着眼与年轻一代人，感觉算是走了一步好棋，年轻人是未来嘛。关于发的这个<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MjM4NjI2MDI=">有关机器学习的系列教程<i class="fa fa-external-link-alt"></i></span>，我知道已经早就在 <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1IY3FwYW5EYWR5USZsaXN0PVBMSWl2ZFd5WTVzcUp4bndKaGUzZXRhSzd1dHJCaVBCUTI=">Youtube<i class="fa fa-external-link-alt"></i></span> 上发过了，但是管他呢，毕竟是人家第一次发视频，总要有个试水的嘛。反正我是希望以后能在 B 站上多多看见 Google 的身影。</p>
<p>嘛，就这样吧，扯了一堆，就是发表一点点看法吧。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署Hadoop集群记录</title>
    <url>/posts/hadoop-cluster-setup/</url>
    <content><![CDATA[<p>今天记录一下，部署 Hadoop 集群的过程。</p>
<span id="more"></span>
<h2 id="前期准备">前期准备</h2>
<h3 id="系统及软件版本说明">系统及软件版本说明</h3>
<p>本章操作中所使用的相关操作系统及软件版本如下：</p>
<table>
<thead>
<tr>
<th>软件</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>操作系统</td>
<td>Ubuntu 14.04.1</td>
</tr>
<tr>
<td>JDK</td>
<td>1.8.0</td>
</tr>
<tr>
<td>Hadoop</td>
<td>2.7.3</td>
</tr>
</tbody>
</table>
<h3 id="JDK-安装">JDK 安装</h3>
<p>集群中每台机器都需要安装 JDK，步骤如下：</p>
<ol>
<li>
<p>上传<code>jdk-8u191-linux-x64.tar.gz</code>到<code>/opt</code>目录并解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u191-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将 JDK 环境变量配置到/etc/profile 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=/opt/jdk1.8.0_191&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JRE_HOME=/opt/jdk1.8.0_191/jre&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="网络配置">网络配置</h3>
<p>如有三台机器，分别命名为 master、slave1、slave2。那么我们就分别修改各自机器上<code>/etc/hostname</code>文件中的机器名为上述名称。<br>
修改每台机器的/etc/hosts 文件，添加上述三对网络 IP 和机器名的对应：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">192.168.1.2     master</span><br><span class="line">192.168.1.3     slave1</span><br><span class="line">192.168.1.4     slave2</span><br></pre></td></tr></table></figure>
<h3 id="SSH-免密登录配置">SSH 免密登录配置</h3>
<p>该操作是要让 master 节点可以无密码 SSH 登陆到各个 slave 节点上。</p>
<ol>
<li>
<p>首先生成 master 节点的公钥，在 master 节点的终端中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>多次回车完成 ssh 密钥对创建</p>
</li>
<li>
<p>在各节点上将该公钥加入授权</p>
<p>将公钥加入 master 本机授权，master 节点上执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>完成后执行 <code>ssh master</code> 验证一下（可能需要输入 <code>yes</code>，成功后执行 <code>exit</code> 返回原来的终端）</p>
<p>接着在 master 节点将上公匙分发到 slave1 和 slave2 节点，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@slave1:/root</span><br><span class="line">scp ~/.ssh/id_rsa.pub root@slave2:/root</span><br></pre></td></tr></table></figure>
<p>接着分别在 slave1 和 slave2 节点上，将 ssh 公匙加入授权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>这样，在 master 节点上就可以无密码 ssh 登录到各个 slave 节点了，在 master 节点上执行 <code>ssh slave1</code> 和 <code>ssh slave2</code> 命令进行检验。</p>
</li>
</ol>
<h2 id="Hadoop-集群部署">Hadoop 集群部署</h2>
<h3 id="安装及配置">安装及配置</h3>
<ol>
<li>
<p>上传<code>hadoop-2.7.3.tar.gz</code>到<code>/opt</code>目录并解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.7.3.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 hadoop 目录上创建 tmp、dfs、dfs/name、 dfs/data 文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/hadoop-2.7.3</span><br><span class="line">mkdir -p tmp dfs dfs/name dfs/data</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HADOOP_HOME=/opt/hadoop-2.7.3&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$HADOOP_HOME/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改配置文件</p>
<p>切换到<code>/opt/hadoop-2.7.3/etc/hadoop</code>目录下修改配置文件。</p>
<ol>
<li>
<p>编辑 <code>hadoop-env.sh</code> 文件，将 <code>JAVA_HOME</code>(25 行)配置项为 <code>JDK</code> 安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_191</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编辑 <code>core-site.xml</code> 文件，添加以下内容，其中 <code>master</code> 为计算机名，<code>/opt/hadoop-2.7.3/tmp</code> 为手动创建的目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>
<p>内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/hadoop-2.7.3/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abasefor other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编辑 <code>hdfs-site.xml</code> 文件，添加以下内容，其中<code>/opt/hadoop-2.7.3/dfs/name</code> 和 <code>/opt/hadoop-2.7.3/dfs/data</code> 为手动创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure>
<p>内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop-2.7.3/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop-2.7.3/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave1:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>need not permissions<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改 <code>mapred-site.xml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>
<p>内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.local.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop-2.7.3/var<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改 <code>yarn-env.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/yarn-env.sh</span><br></pre></td></tr></table></figure>
<p>内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_191</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改 <code>yarn-site.xml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/yarn-env.xml</span><br></pre></td></tr></table></figure>
<p>内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- reducer获取数据的方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改 <code>slaves</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/slaves</span><br></pre></td></tr></table></figure>
<p>内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li>
<p>文件配置分发</p>
<p>至此，master 上的 hadoop 配置已经结束，需将<code>/etc/profile</code>、<code>/opt/hadoop-2.7.3</code>通过 scp 分发至至 slave1、slave2，重新编译 <code>/etc/profile</code> 使生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /etc/profile root@slave1:/etc/profile</span><br><span class="line">scp /etc/profile root@slave2:/etc/profile</span><br><span class="line">scp -r /opt/hadoop-2.7.3 root@slave1:/opt/hadoop-2.7.3</span><br><span class="line">scp -r /opt/hadoop-2.7.3 root@slave2:/opt/hadoop-2.7.3</span><br></pre></td></tr></table></figure>
<p>分别登录 slave1 和 slave2 执行<code>source /etc/profile</code></p>
</li>
</ol>
<h3 id="启动及验证">启动及验证</h3>
<ol>
<li>
<p>第一次启动初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/hadoop-2.7.3/bin/hadoop namenode -format</span><br></pre></td></tr></table></figure>
<p>初始化成功后，可以在 <code>/opt/hadoop-2.7.3/dfs/name</code> 目录下看到新增了一个 current 目录以及一些文件。</p>
</li>
<li>
<p>Hadoop 启动</p>
<ol>
<li>
<p>启动 hdfs</p>
<p>在 master 节点执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/hadoop-2.7.3/sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动 yarn</p>
<p>在 slave1 节点执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/hadoop-2.7.3/sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>浏览器输入访问 <span class="exturl" data-url="aHR0cDovL21hc3Rlcjo1MDA3MA==">http://master:50070<i class="fa fa-external-link-alt"></i></span> (替换 master 节点 IP)验证部署成功。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>Hadoop</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title>本站已全面启用AMP</title>
    <url>/posts/hexo-enable-amp/</url>
    <content><![CDATA[<p>早有听闻 Google 的 AMP，能够显著加快网站的移动访问。现在本站终于全面启用了 AMP，现在已经有部分 AMP 页面加入了索引，效果很不错。</p>
<span id="more"></span>
<h2 id="AMP-简介">AMP 简介</h2>
<p>Accelerated Mobile Pages（简称 AMP，意为“加速移动页面”）是 Google 带领开发的开源项目，目的是为提升移动设备对网站的访问速度。AMP 也可指其派生的标准和库等项目成果。AMP 在 HTML 等广泛使用的网络技术基础上进行改良，它的核心称作 AMP HTML，是 HTML 的一种。服务于技术预览期结束后的 2016 年 2 月正式发布。</p>
<p><img data-src="https://img.iszy.xyz/20190318213401.png?x-oss-process=style/big" alt=""></p>
<h2 id="Hexo-博客启用方式">Hexo 博客启用方式</h2>
<p>本站采用 NexT 主题，就以此作为演示。</p>
<h3 id="安装hexo-generator-amp插件">安装<code>hexo-generator-amp</code>插件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-amp --save</span><br></pre></td></tr></table></figure>
<p>如果不成功，加个<code>sudo</code>再试一下。</p>
<h3 id="修改主题">修改主题</h3>
<p>本文使用的是 NexT 主题 v6.4.0，这个版本已有提供用户自定义增加内容的设置。</p>
<p>打开<code>themes/next/layout/_custom</code>文件夹中的<code>head.swig</code>文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi themes/next/layout/_custom/head.swig</span><br></pre></td></tr></table></figure>
<p>在文件中添加如下内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if is_post() and config.generator_amp %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;amphtml&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./amp/&quot;</span> /&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改站点配置">修改站点配置</h3>
<p>打开<strong>站点配置文件</strong><code>_config.yml</code>，加入以下内容。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">generator_amp:</span></span><br><span class="line">  <span class="attr">templateDir:</span> <span class="string">amp-template</span></span><br><span class="line">  <span class="attr">assetDistDir:</span> <span class="string">amp-dist</span></span><br><span class="line">  <span class="attr">logo:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sample/sample-logo.png</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">substituteTitleImage:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sample/sample-substituteTitleImage.png</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">1024</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">800</span></span><br><span class="line">  <span class="attr">warningLog:</span> <span class="literal">false</span> <span class="comment"># To display warning, please set true.</span></span><br><span class="line">  <span class="attr">validateAMP:</span> <span class="literal">true</span> <span class="comment"># To AMP HTML validate automatically, please set true.</span></span><br></pre></td></tr></table></figure>
<h3 id="部署">部署</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<h2 id="查看效果">查看效果</h2>
<p>在我的每篇文章地址后加上<code>./amp/</code>即可看到效果，以本文为例。</p>
<p><img data-src="https://img.iszy.xyz/20190318213417.png" alt=""></p>
<h2 id="Google-的-AMP-测试">Google 的 AMP 测试</h2>
<p>可以使用 Google 的<span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2guZ29vZ2xlLmNvbS90ZXN0L2FtcA==">AMP 测试<i class="fa fa-external-link-alt"></i></span>来测试你的 AMP 网页的有效性。然后你就能放心地将网页提交给 Google 和百度了。</p>
<p><img data-src="https://img.iszy.xyz/20190318213428.png?x-oss-process=style/big" alt=""></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>AMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch 节点磁盘使用率过高，导致ES索引无法写入</title>
    <url>/posts/imue92/</url>
    <content><![CDATA[<p>解决一下因为 Elasticsearch 节点磁盘使用率过高，导致 ES 索引无法写入的问题。</p>
<span id="more"></span>
<h2 id="原因">原因</h2>
<p>经过查阅<span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS9jdXJyZW50L21vZHVsZXMtY2x1c3Rlci5odG1sI2Rpc2stYmFzZWQtc2hhcmQtYWxsb2NhdGlvbg==">官方文档<i class="fa fa-external-link-alt"></i></span>，我们可以看到 ES 的默认配置是当集群中的某个节点磁盘达到使用率为 <code>85%</code> 的时候，就不会在该节点进行创建副本，当磁盘使用率达到 <code>90%</code> 的时候，尝试将该节点的副本重分配到其他节点。当磁盘使用率达到 <code>95%</code> 的时候，当前节点的所有索引将被设置为只读索引。</p>
<blockquote>
<ul>
<li><code>cluster.routing.allocation.disk.threshold_enabled</code><br>
(Dynamic) Defaults to . Set to to disable the disk allocation decider. truefalse</li>
<li><code>cluster.routing.allocation.disk.watermark.low</code><br>
(Dynamic) Controls the low watermark for disk usage. It defaults to , meaning that Elasticsearch will not allocate shards to nodes that have more than 85% disk used. It can also be set to an absolute byte value (like ) to prevent Elasticsearch from allocating shards if less than the specified amount of space is available. This setting has no effect on the primary shards of newly-created indices but will prevent their replicas from being allocated. 85%500mb</li>
<li><code>cluster.routing.allocation.disk.watermark.high</code><br>
(Dynamic) Controls the high watermark. It defaults to , meaning that Elasticsearch will attempt to relocate shards away from a node whose disk usage is above 90%. It can also be set to an absolute byte value (similarly to the low watermark) to relocate shards away from a node if it has less than the specified amount of free space. This setting affects the allocation of all shards, whether previously allocated or not. 90%</li>
<li><code>cluster.routing.allocation.disk.watermark.enable_for_single_data_node</code><br>
(Static) For a single data node, the default is to disregard disk watermarks when making an allocation decision. This is deprecated behavior and will be changed in 8.0. This setting can be set to to enable the disk watermarks for a single data node cluster (will become default in 8.0). true</li>
<li><code>cluster.routing.allocation.disk.watermark.flood_stage</code><br>
(Dynamic) Controls the flood stage watermark, which defaults to 95%. Elasticsearch enforces a read-only index block () on every index that has one or more shards allocated on the node, and that has at least one disk exceeding the flood stage. This setting is a last resort to prevent nodes from running out of disk space. The index block is automatically released when the disk utilization falls below the high watermark.index.blocks.read_only_allow_delete</li>
</ul>
</blockquote>
<h2 id="解决方法">解决方法</h2>
<h3 id="调整物理环境">调整物理环境</h3>
<p>扩大磁盘，或者删除部分数据来空出一些磁盘，这个没什么好多说的。</p>
<h3 id="调整-es-配置">调整 es 配置</h3>
<h4 id="通过配置文件-需要重启">通过配置文件(需要重启)</h4>
<p>更改配置文件<code>elasticsearch.yml</code>，调高锁定的阈值，需要重启 ES。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.routing.allocation.disk.threshold_enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cluster.routing.allocation.disk.watermark.low:</span> <span class="number">90</span><span class="string">%</span></span><br><span class="line"><span class="attr">cluster.routing.allocation.disk.watermark.high:</span> <span class="number">95</span><span class="string">%</span></span><br><span class="line"><span class="attr">cluster.routing.allocation.disk.watermark.flood_stage:</span> <span class="number">98</span><span class="string">%</span></span><br></pre></td></tr></table></figure>
<h4 id="通过接口-无需重启">通过接口(无需重启)</h4>
<p>通过 ES api 调整配置。transient 临时更改，persistent 是永久更改。</p>
<ul>
<li>
<p>永久更改 <code>persistent</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;persistent&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.low&quot;</span>: <span class="string">&quot;90%&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.high&quot;</span>: <span class="string">&quot;95%&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.flood_stage&quot;</span>: <span class="string">&quot;98%&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster.info.update.interval&quot;</span>: <span class="string">&quot;1m&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>临时更改 <code>transient</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;transient&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.low&quot;</span>: <span class="string">&quot;90%&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.high&quot;</span>: <span class="string">&quot;95%&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.flood_stage&quot;</span>: <span class="string">&quot;98%&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster.info.update.interval&quot;</span>: <span class="string">&quot;1m&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>通过向<code>/_cluster/settings</code>提交<code>PUT</code>请求来修改，示例如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Content-Type: application/json&quot;</span> -XPUT localhost:9200/_cluster/settings  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;transient&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;cluster.routing.allocation.disk.watermark.low&quot;: &quot;90%&quot;,</span></span><br><span class="line"><span class="string">    &quot;cluster.routing.allocation.disk.watermark.high&quot;: &quot;95%&quot;,</span></span><br><span class="line"><span class="string">    &quot;cluster.routing.allocation.disk.watermark.flood_stage&quot;: &quot;98%&quot;,</span></span><br><span class="line"><span class="string">    &quot;cluster.info.update.interval&quot;: &quot;1m&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.iszy.xyz/20210309190311.png?x-oss-process=style/big" alt=""></p>
<h2 id="解锁已经锁定的索引">解锁已经锁定的索引</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Content-Type: application/json&quot;</span> -XPUT http://localhost:9200/_cluster/settings -d <span class="string">&#x27;&#123;&quot;transient&quot;:&#123;&quot;cluster.routing.allocation.disk.threshold_enabled&quot;:false&#125;&#125;&#x27;</span></span><br><span class="line">curl -H <span class="string">&quot;Content-Type: application/json&quot;</span> -XPUT http://localhost:9200/_all/_settings -d <span class="string">&#x27;&#123;&quot;index.blocks.read_only_allow_delete&quot;:null&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>JanusGraph 图数据库搭建</title>
    <url>/posts/janusgraph/</url>
    <content><![CDATA[<p>最近折腾了一波 JanusGraph 图数据库的部署，采用 <code>JanusGraph</code> + <code>HBase</code> + <code>ElasticSearch</code> 架构，在此记录下过程。</p>
<span id="more"></span>
<h2 id="搭建">搭建</h2>
<h3 id="搭建准备">搭建准备</h3>
<p>本文主要记录 JanusGraph 图数据库的部署，需要另行搭建 HBase 和 ElasticSearch，本文以本地已经部署好 HBase 和 ElasticSearch 为例。</p>
<ul>
<li>HBase 地址: <code>127.0.0.1:2181</code></li>
<li>ElasticSearch 地址: <code>127.0.0.1:9200</code></li>
</ul>
<p>另外，系统需安装有<code>unzip</code>、<code>jdk</code>和你喜欢的文本编辑器，且建议在非 root 用户下执行。</p>
<h3 id="文件准备">文件准备</h3>
<blockquote>
<p>项目地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbnVzR3JhcGgvamFudXNncmFwaA==">JanusGraph/janusgraph<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbnVzR3JhcGgvamFudXNncmFwaC9yZWxlYXNlcw==">Github release 页面<i class="fa fa-external-link-alt"></i></span>上下载我们所需要的文件，形如<code>janusgraph-&#123;VERSION&#125;-hadoop2.zip</code>，在这里我们下载最新版 <code>0.3.2</code> 版本: <a href="https://github.com/JanusGraph/janusgraph/releases/download/v0.3.2/janusgraph-0.3.2-hadoop2.zip"><code>janusgraph-0.3.2-hadoop2.zip</code></a>，并解压出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/JanusGraph/janusgraph/releases/download/v0.3.2/janusgraph-0.3.2-hadoop2.zip -cO janusgraph-0.3.2-hadoop2.zip</span><br><span class="line">unzip janusgraph-0.3.2-hadoop2.zip</span><br><span class="line">mv janusgraph-0.3.2-hadoop2 janusgraph</span><br><span class="line"><span class="built_in">cd</span> janusgraph</span><br></pre></td></tr></table></figure>
<p>接下来的操作大部分在此文件夹内进行，即<code>~/janusgraph</code>文件夹内。</p>
<h3 id="调整-Gremlin-Server-配置">调整 Gremlin Server 配置</h3>
<p>通过<code>vi conf/gremlin-server/gremlin-server.yaml</code>打开，有以下部分配置需要改动。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听地址，默认对外开放，若只允许本地访问则更改为 127.0.0.1</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 监听端口，有需要可以更改</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8182</span></span><br><span class="line"><span class="comment"># 服务类型，可选以下内容</span></span><br><span class="line"><span class="comment"># - WebSocketChannelizer 提供WebSocket服务</span></span><br><span class="line"><span class="comment"># - HttpChannelizer 提供Http服务</span></span><br><span class="line"><span class="comment"># - WsAndHttpChannelizer 推荐，同时提供WebSocket和Http服务，从0.2.0版本开始支持</span></span><br><span class="line"><span class="attr">channelizer:</span> <span class="string">org.apache.tinkerpop.gremlin.server.channel.WsAndHttpChannelizer</span></span><br><span class="line"><span class="attr">graphs:</span> &#123;</span><br><span class="line">    <span class="comment"># 所要用到的配置文件路径，可自定义</span></span><br><span class="line">    <span class="attr">graph:</span> <span class="string">conf/gremlin-server/janusgraph.properties</span>,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<details>
  <summary>完整配置</summary>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8182</span></span><br><span class="line"><span class="attr">scriptEvaluationTimeout:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">channelizer:</span> <span class="string">org.apache.tinkerpop.gremlin.server.channel.WsAndHttpChannelizer</span></span><br><span class="line"><span class="attr">graphs:</span> &#123; <span class="attr">graph:</span> <span class="string">conf/gremlin-server/janusgraph.properties</span> &#125;</span><br><span class="line"><span class="attr">scriptEngines:</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">gremlin-groovy:</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">plugins:</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">org.janusgraph.graphdb.tinkerpop.plugin.JanusGraphGremlinPlugin:</span> &#123;&#125;,</span><br><span class="line">            <span class="attr">org.apache.tinkerpop.gremlin.server.jsr223.GremlinServerGremlinPlugin:</span></span><br><span class="line">              &#123;&#125;,</span><br><span class="line">            <span class="attr">org.apache.tinkerpop.gremlin.tinkergraph.jsr223.TinkerGraphGremlinPlugin:</span></span><br><span class="line">              &#123;&#125;,</span><br><span class="line">            <span class="attr">org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin:</span></span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">classImports:</span> [<span class="string">java.lang.Math</span>],</span><br><span class="line">                <span class="attr">methodImports:</span> [<span class="string">java.lang.Math#*</span>],</span><br><span class="line">              &#125;,</span><br><span class="line">            <span class="attr">org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin:</span></span><br><span class="line">              &#123; <span class="attr">files:</span> [<span class="string">scripts/empty-sample.groovy</span>] &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="attr">serializers:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0</span>,</span><br><span class="line">      <span class="attr">config:</span> &#123; <span class="attr">serializeResultToString:</span> <span class="literal">true</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment"># Older serialization versions for backwards compatibility:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoLiteMessageSerializerV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span> &#123; <span class="attr">serializeResultToString:</span> <span class="literal">true</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerGremlinV2d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerGremlinV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span></span><br><span class="line">            [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistryV1d0</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span></span><br><span class="line">            [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistryV1d0</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.server.op.session.SessionOpProcessor</span>,</span><br><span class="line">      <span class="attr">config:</span> &#123; <span class="attr">sessionTimeout:</span> <span class="number">28800000</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.server.op.traversal.TraversalOpProcessor</span>,</span><br><span class="line">      <span class="attr">config:</span> &#123; <span class="attr">cacheExpirationTime:</span> <span class="number">600000</span>, <span class="attr">cacheMaxSize:</span> <span class="number">1000</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="attr">metrics:</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">consoleReporter:</span> &#123; <span class="attr">enabled:</span> <span class="literal">true</span>, <span class="attr">interval:</span> <span class="number">180000</span> &#125;,</span><br><span class="line">    <span class="attr">csvReporter:</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">interval:</span> <span class="number">180000</span>,</span><br><span class="line">        <span class="attr">fileName:</span> <span class="string">/tmp/gremlin-server-metrics.csv</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="attr">jmxReporter:</span> &#123; <span class="attr">enabled:</span> <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">slf4jReporter:</span> &#123; <span class="attr">enabled:</span> <span class="literal">true</span>, <span class="attr">interval:</span> <span class="number">180000</span> &#125;,</span><br><span class="line">    <span class="attr">gangliaReporter:</span></span><br><span class="line">      &#123; <span class="attr">enabled:</span> <span class="literal">false</span>, <span class="attr">interval:</span> <span class="number">180000</span>, <span class="attr">addressingMode:</span> <span class="string">MULTICAST</span> &#125;,</span><br><span class="line">    <span class="attr">graphiteReporter:</span> &#123; <span class="attr">enabled:</span> <span class="literal">false</span>, <span class="attr">interval:</span> <span class="number">180000</span> &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="attr">maxInitialLineLength:</span> <span class="number">4096</span></span><br><span class="line"><span class="attr">maxHeaderSize:</span> <span class="number">8192</span></span><br><span class="line"><span class="attr">maxChunkSize:</span> <span class="number">8192</span></span><br><span class="line"><span class="attr">maxContentLength:</span> <span class="number">65536</span></span><br><span class="line"><span class="attr">maxAccumulationBufferComponents:</span> <span class="number">1024</span></span><br><span class="line"><span class="attr">resultIterationBatchSize:</span> <span class="number">64</span></span><br><span class="line"><span class="attr">writeBufferLowWaterMark:</span> <span class="number">32768</span></span><br><span class="line"><span class="attr">writeBufferHighWaterMark:</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure>
</details>
<h3 id="调整-properties-文件">调整 properties 文件</h3>
<p>通过<code>vi conf/gremlin-server/janusgraph.properties</code>打开 properties 文件，加入以下内容。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">gremlin.graph</span> <span class="string">=</span> <span class="string">org.janusgraph.core.JanusGraphFactory</span></span><br><span class="line"><span class="string">storage.backend</span> <span class="string">=</span> <span class="string">hbase</span></span><br><span class="line"><span class="comment"># 可换成远程 HBase 所在 IP</span></span><br><span class="line"><span class="string">storage.hostname</span> <span class="string">=</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment"># 若采用 HBase 集群，使用下面的写法，采用&#x27;,&#x27;分隔各个 IP</span></span><br><span class="line"><span class="comment"># storage.hostname = 192.168.0.1,192.168.0.2</span></span><br><span class="line"><span class="string">storage.port</span> <span class="string">=</span> <span class="number">2181</span></span><br><span class="line"><span class="string">cache.db-cache</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="string">cache.db-cache-clean-wait</span> <span class="string">=</span> <span class="number">20</span></span><br><span class="line"><span class="string">cache.db-cache-time</span> <span class="string">=</span> <span class="number">180000</span></span><br><span class="line"><span class="string">cache.db-cache-size</span> <span class="string">=</span> <span class="number">0.5</span></span><br><span class="line"><span class="string">index.search.backend</span> <span class="string">=</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="comment"># 可换成远程 ElasticSearch 所在地址</span></span><br><span class="line"><span class="string">index.search.hostname</span> <span class="string">=</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9200</span></span><br><span class="line"><span class="comment"># 若采用 ElasticSearch 集群，使用下面的写法，采用&#x27;,&#x27;分隔各个 IP，默认端口可省略</span></span><br><span class="line"><span class="string">index.search.hostname</span> <span class="string">=</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span><span class="string">,192.168.0.2:9200,192.168.0.3</span></span><br></pre></td></tr></table></figure>
<h3 id="临时启用服务">临时启用服务</h3>
<p>运行如下命令启动服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/gremlin-server.sh conf/gremlin-server/gremlin-server.yaml</span><br></pre></td></tr></table></figure>
<p>由于使用了默认配置文件，则可以省略配置文件路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/gremlin-server.sh</span><br></pre></td></tr></table></figure>
<p>当屏幕上出现如下内容时，则代表服务已经开启完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[gremlin-server-boss-1] INFO  org.apache.tinkerpop.gremlin.server.GremlinServer  - Channel started at port 8182.</span><br></pre></td></tr></table></figure>
<h3 id="守护进程">守护进程</h3>
<h4 id="配置">配置</h4>
<p>在此以 systemd 为例进行配置，可以参考一下，注意替换文件路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/systemd/system/janusgraph.service</span><br></pre></td></tr></table></figure>
<p>输入以下内容并保存:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=JanusGraph Server</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># Environment=&quot;PATH=yourpath&quot;</span></span><br><span class="line">ExecStart=/root/janusgraph/bin/gremlin-server.sh /root/janusgraph/conf/gremlin-server/gremlin-server.yaml</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -HUP <span class="variable">$MAINPID</span></span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>可能会遇到错误，显示<code>java: command not found</code>，请把上面的备注取消掉，替换上自己的系统环境变量。</p>
<h4 id="常用命令">常用命令</h4>
<ul>
<li>启用服务: <code>sudo service janusgraph start</code></li>
<li>关闭服务: <code>sudo service janusgraph stop</code></li>
<li>重启服务: <code>sudo service janusgraph restart</code></li>
<li>开机启动: <code>sudo systemctl enable janusgraph</code></li>
<li>取消开机启动: <code>sudo systemctl disable janusgraph</code></li>
<li>查看日志: <code>sudo journalctl -u janusgraph --since tody</code></li>
</ul>
<h2 id="测试">测试</h2>
<h3 id="测试-WebSocket">测试 WebSocket</h3>
<p>运行<code>bin/gremlin.sh</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[admin@localhost janusgraph]$ bin/gremlin.sh</span><br><span class="line"></span><br><span class="line">         \,,,/</span><br><span class="line">         (o o)</span><br><span class="line">-----oOOo-(3)-oOOo-----</span><br><span class="line">plugin activated: janusgraph.imports</span><br><span class="line">plugin activated: tinkerpop.server</span><br><span class="line">plugin activated: tinkerpop.utilities</span><br><span class="line">plugin activated: tinkerpop.hadoop</span><br><span class="line">plugin activated: tinkerpop.spark</span><br><span class="line">plugin activated: tinkerpop.tinkergraph</span><br><span class="line">gremlin&gt; :remote connect tinkerpop.server conf/remote.yaml</span><br><span class="line">==&gt;Configured localhost/127.0.0.1:8182</span><br><span class="line">gremlin&gt; :&gt; g.V().count()</span><br><span class="line">==&gt;0</span><br><span class="line">gremlin&gt;</span><br></pre></td></tr></table></figure>
<p>如能正常响应，则表示部署成功。</p>
<h3 id="测试-Http">测试 Http</h3>
<p>运行如下命令测试 http 能否正常响应。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -Hcontent-type:application/json -d <span class="string">&#x27;&#123;&quot;gremlin&quot;:&quot;g.V().count()&quot;&#125;&#x27;</span> http://localhost:8182</span><br></pre></td></tr></table></figure>
<p>应有类似如下返回内容，则为正常。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;requestId&quot;</span>: <span class="string">&quot;47608dd1-275d-4708-acf7-fa1e6355328b&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;attributes&quot;</span>: &#123; <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;g:Map&quot;</span>, <span class="attr">&quot;@value&quot;</span>: [] &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;g:List&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;@value&quot;</span>: [&#123; <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;g:Int64&quot;</span>, <span class="attr">&quot;@value&quot;</span>: <span class="number">0</span> &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123; <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;g:Map&quot;</span>, <span class="attr">&quot;@value&quot;</span>: [] &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="可能遇到的坑">可能遇到的坑</h2>
<p>别问我怎么知道的</p>
<ol>
<li>本地是否安装 java</li>
<li>配置文件路径是否正确</li>
<li>远程 hbase 和 es 端口防火墙是否开放</li>
<li>远程 hbase 和 es 是否监听的是本地地址</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>JanusGraph</tag>
        <tag>Hbase</tag>
        <tag>Gremlin</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在JAVA中获取格式化的当前时间</title>
    <url>/posts/java-format-date/</url>
    <content><![CDATA[<p>记录一下如何在 JAVA 中获取格式化的当前时间。</p>
<span id="more"></span>
<h2 id="所需-java-类">所需 java 类</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br></pre></td></tr></table></figure>
<h2 id="方法">方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">let dateAfterFormat = simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">console.log(dateAfterFormat); <span class="comment">// 应当会输出格式化后的当前时间，如&quot;2019-07-25 16:17:30&quot;</span></span><br></pre></td></tr></table></figure>
<p>由于 SimpleDateFormat 不是线程安全的，推荐在需要格式化的时候创建 SimpleDateFormat 的局部变量，而不要公用，否则可能会出现冲突，线程挂死等问题。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)Javascript模块化编程（一）：模块的写法</title>
    <url>/posts/javascript_module/</url>
    <content><![CDATA[<p>最近学习这个模块化编程，转载几篇大佬文章学习一下。</p>
<blockquote>
<p>原文链接: <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTIvMTAvamF2YXNjcmlwdF9tb2R1bGUuaHRtbA==">Javascript 模块化编程（一）：模块的写法<i class="fa fa-external-link-alt"></i></span> —— 阮一峰</p>
</blockquote>
<span id="more"></span>
<p>随着网站逐渐变成&quot;<span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWJfYXBwbGljYXRpb24=">互联网应用程序<i class="fa fa-external-link-alt"></i></span>&quot;，嵌入网页的 Javascript 代码越来越庞大，越来越复杂。</p>
<p><img data-src="https://img.iszy.xyz/20190814094600.png" alt=""></p>
<p>网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试等等…开发者不得不使用软件工程的方法，管理网页的业务逻辑。</p>
<p>Javascript 模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p>
<p>但是，Javascript 不是一种模块化编程语言，它不支持&quot;类&quot;（class），更遑论&quot;模块&quot;（module）了。（正在制定中的 <span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FQ01BU2NyaXB0">ECMAScript 标准<i class="fa fa-external-link-alt"></i></span>第六版，将正式支持&quot;类&quot;和&quot;模块&quot;，但还需要很长时间才能投入实用。）</p>
<p>Javascript 社区做了很多努力，在现有的运行环境中，实现&quot;模块&quot;的效果。本文总结了当前＂Javascript 模块化编程＂的最佳实践，说明如何投入实用。虽然这不是初级教程，但是只要稍稍了解 Javascript 的基本语法，就能看懂。</p>
<p><img data-src="https://img.iszy.xyz/20190814094950.png" alt=""></p>
<h2 id="原始写法">原始写法</h2>
<p>模块就是实现特定功能的一组方法。</p>
<p>只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的函数 m1()和 m2()，组成一个模块。使用的时候，直接调用就行了。</p>
<p>这种做法的缺点很明显：&quot;污染&quot;了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p>
<h2 id="对象写法">对象写法</h2>
<p>为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">  <span class="attr">_count</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">m1</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">m2</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面的函数 m1()和 m2(），都封装在 module1 对象里。使用的时候，就是调用这个对象的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">module1.m1();</span><br></pre></td></tr></table></figure>
<p>但是，这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">module1._count = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h2 id="立即执行函数写法">立即执行函数写法</h2>
<p>使用&quot;<span class="exturl" data-url="aHR0cDovL2JlbmFsbWFuLmNvbS9uZXdzLzIwMTAvMTEvaW1tZWRpYXRlbHktaW52b2tlZC1mdW5jdGlvbi1leHByZXNzaW9uLw==">立即执行函数<i class="fa fa-external-link-alt"></i></span>&quot;（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">m1</span>: m1,</span><br><span class="line">    <span class="attr">m2</span>: m2,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>使用上面的写法，外部代码无法读取内部的_count 变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(module1._count); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<p>module1 就是 Javascript 模块的基本写法。下面，再对这种写法进行加工。</p>
<h2 id="放大模式">放大模式</h2>
<p>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用&quot;放大模式&quot;（augmentation）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">mod</span>) </span>&#123;</span><br><span class="line">  mod.m3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(module1);</span><br></pre></td></tr></table></figure>
<p>上面的代码为 module1 模块添加了一个新方法 m3()，然后返回新的 module1 模块。</p>
<h2 id="宽放大模式（Loose-augmentation）">宽放大模式（Loose augmentation）</h2>
<p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用&quot;宽放大模式&quot;。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">mod</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(<span class="built_in">window</span>.module1 || &#123;&#125;);</span><br></pre></td></tr></table></figure>
<p>与&quot;放大模式&quot;相比，＂宽放大模式＂就是&quot;立即执行函数&quot;的参数可以是空对象。</p>
<h2 id="输入全局变量">输入全局变量</h2>
<p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。</p>
<p>为了在模块内部调用全局变量，必须显式地将其他变量输入模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">$, YAHOO</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)(jQuery, YAHOO);</span><br></pre></td></tr></table></figure>
<p>上面的 module1 模块需要使用 jQuery 库和 YUI 库，就把这两个库（其实是两个模块）当作参数输入 module1。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。这方面更多的讨论，参见 Ben Cherry 的著名文章<span class="exturl" data-url="aHR0cDovL3d3dy5hZGVxdWF0ZWx5Z29vZC5jb20vMjAxMC8zL0phdmFTY3JpcHQtTW9kdWxlLVBhdHRlcm4tSW4tRGVwdGg=">《JavaScript Module Pattern: In-Depth》<i class="fa fa-external-link-alt"></i></span>。</p>
<p>这个系列的第二部分，将讨论如何在浏览器环境组织不同的模块、管理模块之间的依赖性。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AMD</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery 中 $.ajax 和 $.getJSON 的简单应用对比</title>
    <url>/posts/jquery-ajax-getjson/</url>
    <content><![CDATA[<p>在项目中使用到了 <code>$.ajax</code> 与 <code>$.getJSON</code> 两种从后台获取 json 的方式，在此进行简单的对比，用以记录学习。</p>
<span id="more"></span>
<h2 id="两种方式">两种方式</h2>
<h3 id="ajax-方式"><code>$.ajax</code> 方式</h3>
<p>代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/example&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">key</span>: <span class="string">&quot;test&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    somefunction();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="getJSON-方式"><code>$.getJSON</code> 方式</h3>
<p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.getJSON(&quot;/example&quot;,&#123;key: &quot;test&quot;&#125;,function(data)&#123;</span><br><span class="line">    somefunction();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="区别">区别</h2>
<p>我能想到的一些区别:</p>
<ul>
<li><code>$.ajax</code> 功能更加强大，能够实现更多功能</li>
<li>在获取 <code>json</code> 的这一目标下，<code>$.getJSON</code> 代码更加简洁易懂</li>
</ul>
<p>在实际使用过程中，我觉得似乎差别不大，实在不知道还有什么区别。希望了解的大佬能够教我。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>直接修改和替换Jar包中文件的几种方式</title>
    <url>/posts/kmznu4/</url>
    <content><![CDATA[<p>在我们日常打包部署 Jar 包的时候，时常会出现需要修改少量内容或替换某个文件的时候，重新打包完整 Jar 包并在网上传输费时费力，所以需要直接修改 Jar 包，这里就对直接修改 和替换 Jar 包中文件的几种方式做一下总结。</p>
<span id="more"></span>
<h2 id="通用方法——解压后重新打包-Jar-包">通用方法——解压后重新打包 Jar 包</h2>
<p>这个通用方法，就是将 Jar 包进行解压，修改或替换文件后，重新打包成 Jar 包的方式。这个方法需要部署 JAVA jdk，需要用到其中的 jar 命令。</p>
<p>我们可以先看下 jar 命令的官方说明，<code>0</code>参数是关键。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用法: jar &#123;ctxui&#125;[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...</span><br><span class="line">选项:</span><br><span class="line">    -c  创建新档案</span><br><span class="line">    -t  列出档案目录</span><br><span class="line">    -x  从档案中提取指定的 (或所有) 文件</span><br><span class="line">    -u  更新现有档案</span><br><span class="line">    -v  在标准输出中生成详细输出</span><br><span class="line">    -f  指定档案文件名</span><br><span class="line">    -m  包含指定清单文件中的清单信息</span><br><span class="line">    -n  创建新档案后执行 Pack200 规范化</span><br><span class="line">    -e  为捆绑到可执行 jar 文件的独立应用程序</span><br><span class="line">        指定应用程序入口点</span><br><span class="line">    -0  仅存储; 不使用任何 ZIP 压缩</span><br><span class="line">    -P  保留文件名中的前导 &#x27;/&#x27; (绝对路径) 和 &quot;..&quot; (父目录) 组件</span><br><span class="line">    -M  不创建条目的清单文件</span><br><span class="line">    -i  为指定的 jar 文件生成索引信息</span><br><span class="line">    -C  更改为指定的目录并包含以下文件</span><br><span class="line">如果任何文件为目录, 则对其进行递归处理。</span><br><span class="line">清单文件名, 档案文件名和入口点名称的指定顺序</span><br><span class="line">与 &#x27;m&#x27;, &#x27;f&#x27; 和 &#x27;e&#x27; 标记的指定顺序相同。</span><br><span class="line"></span><br><span class="line">示例 1: 将两个类文件归档到一个名为 classes.jar 的档案中:</span><br><span class="line">       jar cvf classes.jar Foo.class Bar.class</span><br><span class="line">示例 2: 使用现有的清单文件 &#x27;mymanifest&#x27; 并</span><br><span class="line">           将 foo/ 目录中的所有文件归档到 &#x27;classes.jar&#x27; 中:</span><br><span class="line">       jar cvfm classes.jar mymanifest -C foo/ .</span><br></pre></td></tr></table></figure>
<p>所以流程就是这样的，首先解压 jar 包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 解压</span><br><span class="line">jar -xvf test.jar</span><br></pre></td></tr></table></figure>
<p>进入文件夹编辑或者替换需要更改的文件，然后重新进行打包，加了 <code>0</code> 参数表示只打包不压缩。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 压缩</span><br><span class="line">jar -cvf0m test.jar ./META-INF/MANIFEST.MF .</span><br></pre></td></tr></table></figure>
<p>不要漏了这个 MANIFET.MF 文件，，这个文件里面记录了该 JAR 包的版本、创建人和类搜索路径等信息。如果一个 JAR 文件被当作可执行文件，则其中的 MANIFEST 文件需要指出该程序的主类文件，漏掉了则不能正常执行。</p>
<h2 id="Windows-方式">Windows 方式</h2>
<p>在 Windows 上因为有许多完善好用的 GUI 应用，编辑起来就简单很多。Jar 包通常可以通过安装的压缩软件直接打开，所以至少要安装一个压缩软件，我想基本上每个人都会有的。</p>
<h3 id="仅文本文件">仅文本文件</h3>
<p>对于文本文件来说，一般可以直接在 Jar 包里打开，修改保存后，压缩软件会提醒说文件已经修改，是否更新到 Jar 包中，点确定即可。</p>
<p><img data-src="https://img.iszy.xyz/20200517234204.png" alt=""></p>
<h3 id="所有文件">所有文件</h3>
<p>所有文件，都可以通过将文件拖进 Jar 包的方式，添加或替换内容。需要注意的是，压缩方式需要选择存储/不压缩，或是其他类似的表达。当然也可以通过上面的通用方法解决。</p>
<p><img data-src="https://img.iszy.xyz/20200517234555.png" alt=""></p>
<h2 id="Linux-方式">Linux 方式</h2>
<p>我指的 Linux 方式，基本就是指命令行的方式，不包含桌面操作，那个我不是很了解，或许会和 Windows 上的操作比较接近。</p>
<h3 id="仅文本文件-2">仅文本文件</h3>
<p>首先需要系统里面安装 vim 和 zip 两个包，如果是 Ubuntu，可以运行<code>sudo apt install vim zip -y</code>安装。</p>
<p>然后你可能已经想到了，那就是通过 vim 工具打开 Jar 包，将会显示 Jar 包中的所有文件夹和文件绝对路径，每行显示一个。</p>
<p><img data-src="https://img.iszy.xyz/20200518084041.png" alt=""></p>
<p>通过将光标移动到需要修改的文件上，回车进入文件，像编辑普通文件一样进行修改，修改完成后，<code>:wq</code>退出返回到文件列表。</p>
<p>接下来可以选择继续编辑其他文件或退出 Jar 包。退出 Jar 包时，请一定要通过<code>:q</code>退出，这个很重要，如果你像上面保存文件一样加了 w 参数，这个 Jar 包就废了，它将会变成保存了文件列表的一个文本文件。所以请千万通过<code>:q</code>参数退出 Jar 包，切记！</p>
<h3 id="所有文件-2">所有文件</h3>
<p>这个我暂时只知道通过上面说明的通用方法进行修改替换文件，如有小伙伴知道其他方法，希望可以告诉我，十分感谢。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试Layui日期控件(layDate)遇到的坑</title>
    <url>/posts/laydate-problem/</url>
    <content><![CDATA[<p>最近在写个小网页的时候用到了 Layui 的日期控件——layDate，期间遇到了一些小问题，在此记录一下。</p>
<span id="more"></span>
<h2 id="问题简述">问题简述</h2>
<p>情形大致如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layui.use(<span class="string">&quot;laydate&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> laydate = layui.laydate;</span><br><span class="line">  laydate.render(&#123;</span><br><span class="line">    <span class="attr">elem</span>: <span class="string">&quot;#date&quot;</span>,</span><br><span class="line">    <span class="attr">change</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="attr">done</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="关于layDate的change与done属性">关于<code>layDate</code>的<code>change</code>与<code>done</code>属性</h3>
<p>如果是单独的时间选择，效果类似下图，则选中日期后的回调触发的是<code>change</code>。</p>
<p><img data-src="https://img.iszy.xyz/20190407214909.png" alt=""></p>
<p>如果是时间范围的选择，效果类似下图，则选中日期后的回调触发的是<code>done</code>。</p>
<p><img data-src="https://img.iszy.xyz/20190407215225.png" alt=""></p>
<p>需要根据情况在对应的属性后编写回调函数。</p>
<h3 id="关于-date-change-不触发">关于<code>$('#date').change()</code>不触发</h3>
<p>我本想用<code>$('#date').change(function()&#123;&#125;)</code>来在日期变化时做些处理，但我发现 laydate 的日期变化并没有触发 change 事件，十分奇怪。</p>
<p>解决办法：</p>
<p>在<code>layDate</code>的<code>change</code>或<code>done</code>的回调函数中手动触发<code>change</code>事件，即加入以下内容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#date&quot;</span>).change();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JQuery</tag>
        <tag>LayUI</tag>
      </tags>
  </entry>
  <entry>
    <title>LayUI Icon 扩展 Iconfont 图标</title>
    <url>/posts/layui-iconfont/</url>
    <content><![CDATA[<p>layui 的所有图标全部采用字体形式，取材于阿里巴巴矢量图标库（iconfont）。不过 layui 自带的图标太少了，可以说连够用都算不上，所以今天就要用 iconfont 上的图标扩展一下。</p>
<span id="more"></span>
<h2 id="引入图标">引入图标</h2>
<p>正常引入 layui 和 iconfont 的 css。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/layui/css/layui.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/iconfont/iconfont.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="加入样式">加入样式</h2>
<p>加入样式，优先采用 layui 自带图标。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.layui-icon</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-family</span>: layui-icon, iconfont <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-style</span>: normal;</span></span><br><span class="line"><span class="css">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="css">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JQuery</tag>
        <tag>LayUI</tag>
      </tags>
  </entry>
  <entry>
    <title>军哥LNMP一键安装包的php扩展安装</title>
    <url>/posts/lnmporg-php-extension/</url>
    <content><![CDATA[<p>我站上的 LNMP 用的是军哥的 LNMP 一键安装包，其中的软件都是通过编译安装的，我发现直接通过<code>apt install</code>的方法安装 php 扩展并不会生效，其实有更好的安装方法。</p>
<span id="more"></span>
<h2 id="前提">前提</h2>
<p>这里讲的方法适用于使用军哥 LNMP 一键安装包的情况。LNMP 一键安装包官网，请点击<span class="exturl" data-url="aHR0cHM6Ly9sbm1wLm9yZy8=">这里<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="环境">环境</h2>
<p>我使用的 LNMP 一键安装包 1.5 版本，默认 php 安装了 php7.0。</p>
<h2 id="步骤">步骤</h2>
<p>在这里以安装 zip 扩展为例。</p>
<h3 id="解压-php-安装包">解压 php 安装包</h3>
<p>先进入 lnmp 安装包目录，我放在了 root 文件夹中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/lnmp/</span><br></pre></td></tr></table></figure>
<p>进入安装包存放位置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd src</span><br></pre></td></tr></table></figure>
<p>解压安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -jxvf php-7.0.30.tar.bz2</span><br></pre></td></tr></table></figure>
<h3 id="进入扩展包存放目录">进入扩展包存放目录</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd php-7.0.30/ext</span><br></pre></td></tr></table></figure>
<h3 id="进入需要的扩展文件夹">进入需要的扩展文件夹</h3>
<p>以 zip 为例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd zip</span><br></pre></td></tr></table></figure>
<h3 id="编译配置">编译配置</h3>
<h4 id="执行-phpize">执行 phpize</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/php/bin/phpize</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.iszy.xyz/20190318204059.png?x-oss-process=style/big" alt=""></p>
<h4 id="执行-configure">执行 configure</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --with-php-config=&quot;/usr/local/php/bin/php-config&quot;</span><br></pre></td></tr></table></figure>
<h3 id="编译">编译</h3>
<h4 id="开始编译">开始编译</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<h4 id="编译完成">编译完成</h4>
<p>编译完成后，将在 modules 目录下生成<code>zip.so</code>文件，将其复制到 php 扩展文件夹中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd modules</span><br><span class="line">cp zip.so /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012</span><br></pre></td></tr></table></figure>
<p>可以到<code>/usr/local/php/lib/php/extensions</code>文件夹中看一下，这个文件夹名字可能和我这里有所不同。</p>
<h4 id="配置-php-ini">配置 php.ini</h4>
<p>经测试，不需要修改 php.ini，可能已经默认包含了所有扩展文件夹中的内容。</p>
<p><s>打开<code>php.ini</code>文件</s></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/local/php/etc/php.ini</span><br></pre></td></tr></table></figure>
<p><s>找到<code>;extension=</code>字样，可以通过输入<code>/;extension=</code>快速找到。</s></p>
<p><s>添加以下内容。</s></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extension=zip.so</span><br></pre></td></tr></table></figure>
<h3 id="重载-php-fpm">重载 php-fpm</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lnmp php-fpm reload</span><br></pre></td></tr></table></figure>
<h2 id="结论">结论</h2>
<p>现在你已经成功安装了 zip 扩展，其他扩展也可以类比着来，有什么问题，可以在评论区问我。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 16.04搭建Minecraft服务器1.13</title>
    <url>/posts/mc-server-ubuntu/</url>
    <content><![CDATA[<p>在此记录在 Ubuntu 16.04 搭建 Minecraft 服务器 1.13 的全过程。</p>
<span id="more"></span>
<h2 id="安装-Java-运行库">安装 Java 运行库</h2>
<p>在前一篇文章——<a href="https://www.iszy.cc/2018/08/05/ubuntu-oracle-java/">在 Ubuntu 16.04 中安装 Oracle Java 8</a>中已经有了详细讲述。</p>
<h2 id="创建新用户和组">创建新用户和组</h2>
<h3 id="创建用户和组">创建用户和组</h3>
<p>创建用户和组 minecraft，用以运行 minecraft 服务端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo adduser minecraft</span><br><span class="line">sudo groupadd minecraft</span><br><span class="line">sudo usermod -a -G minecraft minecraft</span><br></pre></td></tr></table></figure>
<h3 id="登录到用户-minecraft">登录到用户 minecraft</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su minecraft</span><br><span class="line">cd</span><br></pre></td></tr></table></figure>
<h2 id="下载并启动-Minecraft">下载并启动 Minecraft</h2>
<h3 id="下载-Minecraft-服务器">下载 Minecraft 服务器</h3>
<p>官方地址：<span class="exturl" data-url="aHR0cHM6Ly9taW5lY3JhZnQubmV0L3poLWhhbnMvZG93bmxvYWQvc2VydmVy">下载 MINECRAFT ：JAVA 版的服务器<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://launcher.mojang.com/mc/game/1.13/server/d0caafb8438ebd206f99930cfaecfa6c9a13dca0/server.jar</span><br><span class="line">chmod a+x server.jar</span><br></pre></td></tr></table></figure>
<h3 id="启动-Minecraft">启动 Minecraft</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -Xmx1024M -Xms1024M -jar server.jar nogui</span><br></pre></td></tr></table></figure>
<p>如图所示，首次运行需要同意 EULA 协议。</p>
<p><img data-src="https://img.iszy.xyz/20190318214212.png?x-oss-process=style/big" alt=""></p>
<p>下面编辑生成的<code>eula.txt</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi eula.txt</span><br></pre></td></tr></table></figure>
<p>如图所示，将<code>eula=false</code>改为<code>eula=true</code>。</p>
<p><img data-src="https://img.iszy.xyz/20190318214227.png?x-oss-process=style/big" alt=""></p>
<p>再次启动，<code>-Xmx</code>和<code>-Xms</code>可以调整内存大小，请自行根据情况调整，内存太少将会卡顿严重。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -Xmx1024M -Xms1024M -jar server.jar nogui</span><br></pre></td></tr></table></figure>
<p>如图所示，你的服务器已经启动成功，注意打开服务器端口。</p>
<p><img data-src="https://img.iszy.xyz/20190318214241.png?x-oss-process=style/big" alt=""></p>
<p>按<code>Ctrl+C</code>可以中止服务器</p>
<h3 id="打开服务器端口">打开服务器端口</h3>
<p>使用如下语句打开服务器端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -m tcp --dport 25565 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h2 id="注册为-service">注册为 service</h2>
<h3 id="先退出-minecraft-用户">先退出 minecraft 用户</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<h3 id="创建-systemd-配置文件">创建 systemd 配置文件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/systemd/system/minecraft.service</span><br></pre></td></tr></table></figure>
<p>写入如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=start and stop the minecraft-server</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/home/minecraft</span><br><span class="line">User=minecraft</span><br><span class="line">Group=minecraft</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=20 5</span><br><span class="line">ExecStart=/usr/bin/java -Xms1024M -Xmx1024M -jar server.jar nogui</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=minecraft.service</span><br></pre></td></tr></table></figure>
<h3 id="启动-Minecraft-2">启动 Minecraft</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service minecraft start</span><br></pre></td></tr></table></figure>
<p>还可以使用如下语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service minecraft stop #停止 Minecraft 服务</span><br><span class="line">service minecraft status # 查看 Minecraft 服务运行状态</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.iszy.xyz/20190318214300.png?x-oss-process=style/big" alt=""></p>
<h2 id="后话">后话</h2>
<p>至此，已经成功在 Ubuntu 16.04 搭建了 Minecraft 服务器 1.13，可以尽情玩耍了。当然，需要获得更好的体验，还有更多调整需要进行。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>Minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>解决ttyname failed: Inappropriate ioctl for device问题</title>
    <url>/posts/mesg-tty-fail/</url>
    <content><![CDATA[<p>在我使用<code>git push</code>、<code>hexo deploy</code>等类似操作时，时常会看到<code>ttyname failed: Inappropriate ioctl for device</code>的报错信息。这怎么能行，不是<code>0 errors,0 warnings</code>能行？这里就来记录一下这个问题的解决办法。</p>
<span id="more"></span>
<h2 id="问题原因">问题原因</h2>
<p>Ubuntu 知道并不是所有人都会对 root 账户执行图形登录，所以在默认<code>.profile</code>文件中设置了在这种情况下产生虚假错误。你可以看到，在<code>/root/.profile</code>文件末尾有这样一行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mesg n || true</span><br></pre></td></tr></table></figure>
<p>这是什么呢？这是为了防止像<code>talk</code>之类的程序写入你的控制台，这在你通过文本会话登录 root 账户时尤为重要。<code>|| true</code>是为了防止在请求 tty 失败时的错误导致 shell 脚本中止。</p>
<p>把这句话放在<code>.profile</code>文件中，能够让每次运行 bash 的时候，执行这句话。当你从没有 tty 设备的绘画中运行时，你就能看到报错，并且这不会影响其他程序的运行，只是显示一条消息。</p>
<h2 id="解决方案">解决方案</h2>
<p>虽说这个消息无害，但是总是看到报错消息还是不太舒服，那就把它去掉吧。</p>
<p>将<code>/root/.profile</code>文件中的<code>mesg n || true</code>改为如下内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tty -s &amp;&amp; mesg n || true</span><br></pre></td></tr></table></figure>
<p>这就能让<code>mesg</code>在没有 tty 时，不发送消息，而在有 tty 时继续调用。现在你可以不用再看到<code>ttyname failed: Inappropriate ioctl for device</code>了。</p>
<p><img data-src="https://img.iszy.xyz/20190318214328.png" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>利用钻井数据，计算地下矿体的储量练习</title>
    <url>/posts/mine-storage/</url>
    <content><![CDATA[<p>利用 GIS 的空间分析、3D 显示和统计计算功能，采用示例数据，进行地下矿体资源的计算、制图、空间分布统计分析练习。下面是我的实验流程。</p>
<span id="more"></span>
<h2 id="实验数据">实验数据</h2>
<ul>
<li>钻孔数据 (point shapefile)：包含钻孔处矿洞上下表面深度</li>
<li>地形数据 (DEM)</li>
<li>行政区划 (polygon shapefile)</li>
</ul>
<h2 id="实验流程">实验流程</h2>
<h3 id="提取钻孔矿体上下表面高程">提取钻孔矿体上下表面高程</h3>
<h4 id="使用“值提取至点”工具提取钻孔地面高程">使用“值提取至点”工具提取钻孔地面高程</h4>
<p><img data-src="https://img.iszy.xyz/20190318214347.png" alt=""></p>
<h4 id="计算钻孔在矿洞上下表面的高程">计算钻孔在矿洞上下表面的高程</h4>
<p><img data-src="https://img.iszy.xyz/20190318214356.png" alt=""></p>
<h3 id="地下矿体表面拟和生成矿体表面">地下矿体表面拟和生成矿体表面</h3>
<h4 id="使用样条函数法进行插值，分别拟合矿体上下表面">使用样条函数法进行插值，分别拟合矿体上下表面</h4>
<p>像元大小统一设为 10，样条函数类型选择 TENSION。</p>
<p><img data-src="https://img.iszy.xyz/20190318214411.png" alt=""></p>
<p>所得结果如下所示。</p>
<p><img data-src="https://img.iszy.xyz/20190318214428.png" alt=""></p>
<p>上表面 A</p>
<p><img data-src="https://img.iszy.xyz/20190318214440.png" alt=""></p>
<p>下表面 B</p>
<p>三维显示效果如下图所示。</p>
<p><img data-src="https://img.iszy.xyz/20190318214519.png" alt=""></p>
<h4 id="提取矿区范围">提取矿区范围</h4>
<p>使用栅格计算器，提取矿区的范围。</p>
<p><img data-src="https://img.iszy.xyz/20190318214555.png" alt=""></p>
<p>结果如下。</p>
<p><img data-src="https://img.iszy.xyz/20190318214608.png" alt=""></p>
<p>重分类后，即是矿区的范围。</p>
<p><img data-src="https://img.iszy.xyz/20190318214618.png" alt=""></p>
<h3 id="使用掩模提取矿区的上下表面">使用掩模提取矿区的上下表面</h3>
<p><img data-src="https://img.iszy.xyz/20190318214629.png" alt=""></p>
<p>结果如下图所示。</p>
<p><img data-src="https://img.iszy.xyz/20190318214645.png" alt=""></p>
<p>上表面 A</p>
<p><img data-src="https://img.iszy.xyz/20190318214659.png" alt=""></p>
<p>下表面 B</p>
<h3 id="矿产储量分析">矿产储量分析</h3>
<h4 id="利用“填挖方”工具计算储量">利用“填挖方”工具计算储量</h4>
<p><img data-src="https://img.iszy.xyz/20190318214710.png" alt=""></p>
<p>结果如下图所示，矿区面积为 60515200㎡，矿产储量体积 8225087860.089111 立方米。</p>
<p><img data-src="https://img.iszy.xyz/20190318214721.png" alt=""></p>
<h4 id="矿产储量分布">矿产储量分布</h4>
<p><img data-src="https://img.iszy.xyz/20190318214735.png" alt=""></p>
<h4 id="按地区矿产储量分布">按地区矿产储量分布</h4>
<h5 id="分区统计">分区统计</h5>
<p>使用“Spatial Analyst 工具”-“区域分析”-“以表格显示分区统计”工具，对 county 每个分区的矿产储量进行统计。</p>
<p><img data-src="https://img.iszy.xyz/20190318214748.png" alt=""></p>
<p>结果如下。</p>
<p><img data-src="https://img.iszy.xyz/20190318214800.png" alt=""></p>
<h5 id="计算矿产储量并出图">计算矿产储量并出图</h5>
<p>将统计结果与 county 要素关联，乘以像元面积即为矿产储量，导出数据。</p>
<p><img data-src="https://img.iszy.xyz/20190318214813.png" alt=""></p>
<p>最终出图如下。</p>
<p><img data-src="https://img.iszy.xyz/20190318214825.png" alt=""></p>
<h2 id="实验结果">实验结果</h2>
<h3 id="总储量统计">总储量统计</h3>
<p>矿区面积为 60515200㎡，矿产储量体积 8225087860.089111 立方米。</p>
<p><img data-src="https://img.iszy.xyz/20190318214836.png" alt=""></p>
<h3 id="矿产储量分布图">矿产储量分布图</h3>
<p><img data-src="https://img.iszy.xyz/20190318214847.png" alt=""></p>
<h3 id="按地区矿产储量分布图">按地区矿产储量分布图</h3>
<p><img data-src="https://img.iszy.xyz/20190318214856.png" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ArcGIS</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT 主题配置记录</title>
    <url>/posts/next-config/</url>
    <content><![CDATA[<p>前段时间将博客模板更改为 NexT 主题了，在此记录一下配置的内容，按照配置文件顺序进行。留做备份，方便升级。很多以前的自定义添加的内容都整合进了主题，只需要在配置文件中简单启用即可。</p>
<span id="more"></span>
<p>这里只是记录了我主要的配置内容，并不是全部，后期也可能会修改。有什么配置上的问题，可以在评论里留言，我会尽量回答。</p>
<h2 id="启用-NexT-主题">启用 NexT 主题</h2>
<p>默认已经新建了 hexo 站点，不再赘述。</p>
<h3 id="下载-NexT-主题">下载 NexT 主题</h3>
<p>在这里选取 <code>v6.5.0</code> 版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone --branch v6.5.0 https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
<h3 id="启用主题">启用主题</h3>
<p>在站点配置文件中将主题设置为 next。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-Hexo-data-files-配置主题">使用 Hexo data files 配置主题</h2>
<p>为了使主题与配置分离，方便升级主题，采用 Hexo data files 进行配置。</p>
<h3 id="创建文件">创建文件</h3>
<p>在站点文件夹创建 <code>source/_data/next.yml</code> 文件。</p>
<h3 id="复制配置">复制配置</h3>
<p>将所有配置内容，包括站点和主题配置文件移入 <code>source/_data/next.yml</code> 文件。</p>
<h3 id="next-yml-文件中启用-override"><code>next.yml</code> 文件中启用 override</h3>
<p>修改以下内容。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">override:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>至此，配置文件与主题分离，不用再区分站点配置文件或是主题配置文件，后面的所有配置更改都将在此文件内进行。</p>
<h2 id="站点配置内容">站点配置内容</h2>
<p>在此只列出改动的内容</p>
<h3 id="基本信息">基本信息</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">随遇而安</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">在自由的空气中漂浮</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">孙梓洋的个人博客，主要用于生活吐槽和学习记录</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">your</span> <span class="string">keywords</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Sun</span> <span class="string">Ziyang</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://www.iszy.cc</span></span><br></pre></td></tr></table></figure>
<h3 id="远程部署">远程部署</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">your</span> <span class="string">git</span> <span class="string">repo</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h3 id="本地搜索">本地搜索</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<h3 id="启用-AMP-选">启用 AMP(选)</h3>
<p>需要安装插件<code>hexo-generator-amp</code>，请确保你了解<strong>AMP</strong>，否则不要贸然进行这一步。</p>
<h4 id="安装插件">安装插件</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-amp --save</span><br></pre></td></tr></table></figure>
<h4 id="添加配置文件内容">添加配置文件内容</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">generator_amp:</span><br><span class="line">  templateDir:  amp-template</span><br><span class="line">  assetDistDir: amp-dist</span><br><span class="line">  logo:</span><br><span class="line">    path:   sample/sample-logo.png</span><br><span class="line">    width:  384</span><br><span class="line">    height: 384</span><br><span class="line">  substituteTitleImage:</span><br><span class="line">    path:   sample/sample-substituteTitleImage.png</span><br><span class="line">    width:  640</span><br><span class="line">    height: 640</span><br><span class="line">  warningLog: false   # To display warning, please set true.</span><br><span class="line">  validateAMP: true   # To AMP HTML validate automatically, please set true.</span><br></pre></td></tr></table></figure>
<h4 id="修改模板">修改模板</h4>
<p>打开<code>post</code>的模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi themes/next/layout/_macro/post.swig</span><br></pre></td></tr></table></figure>
<p>添加以下内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if is_post() and config.generator_amp %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;amphtml&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; post.permalink &#125;&#125;amp/&quot;</span> /&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="主题配置内容">主题配置内容</h2>
<h3 id="图标配置">图标配置</h3>
<p>这些图标可以在 <span class="exturl" data-url="aHR0cHM6Ly93d3cud2Vic2l0ZXBsYW5ldC5jb20vemgtaGFucy93ZWJ0b29scy9mYXZpY29uLWdlbmVyYXRvci8=">网页图标生成器<i class="fa fa-external-link-alt"></i></span> 生成（感谢一位热心读者提供了这个更加好用的工具）。如果前面那个用不来，也可以尝试一下<span class="exturl" data-url="aHR0cHM6Ly9yZWFsZmF2aWNvbmdlbmVyYXRvci5uZXQv">Favicon Generator<i class="fa fa-external-link-alt"></i></span>。图片存放路径与站点 source 文件夹中路径一致。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/safari-pinned-tab.svg</span></span><br><span class="line">  <span class="attr">android_manifest:</span> <span class="string">/images/manifest.json</span></span><br><span class="line">  <span class="attr">ms_browserconfig:</span> <span class="string">/images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>
<h3 id="RSS-订阅">RSS 订阅</h3>
<p>安装插件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p>保持此项配置不动。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rss:</span></span><br></pre></td></tr></table></figure>
<h3 id="关闭站点底部各种说明">关闭站点底部各种说明</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">powered:</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line">  <span class="attr">version:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span></span><br><span class="line">  <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">  <span class="attr">version:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="备案信息">备案信息</h3>
<p>国内网站需要添加备案信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">beian:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">icp:苏ICP备18000000号-1</span> <span class="comment">#请换成你自己的备案号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 打开SEO优化</span></span><br><span class="line"></span><br><span class="line"><span class="string">```yaml</span></span><br><span class="line"><span class="attr">seo:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="菜单配置">菜单配置</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<h3 id="选取主题样式">选取主题样式</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>
<h3 id="配置社交">配置社交</h3>
<p>可以自行添加，选择图标</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">Telegram:</span> <span class="string">https://t.me/sunziyang97</span> <span class="string">||</span> <span class="string">telegram</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:hi@iszy.xyz</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br></pre></td></tr></table></figure>
<h3 id="配置友链">配置友链</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span></span><br><span class="line"><span class="comment">#links_layout: block</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">随遇而安:</span> <span class="string">https://www.iszy.cc</span></span><br><span class="line">  <span class="attr">name2:</span> <span class="string">https://example.com</span></span><br></pre></td></tr></table></figure>
<h3 id="侧边栏头像">侧边栏头像</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.png</span> <span class="comment">#头像地址</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment">#是否圆形</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span> <span class="comment">#透明度</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span> <span class="comment">#鼠标指向是否转圈</span></span><br></pre></td></tr></table></figure>
<h3 id="文章浏览进度">文章浏览进度</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">b2t:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">scroll_to_more:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">save_scroll:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="字数统计">字数统计</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure>
<h3 id="赞助">赞助</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">您的支持将是对我最好的鼓励！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>
<h3 id="相关文章">相关文章</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Related popular posts</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/tea3/hexo-related-popular-posts</span></span><br><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="comment"># custom header, leave empty to use the default one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0</span></span><br><span class="line">    <span class="comment">#isDate: false</span></span><br><span class="line">    <span class="comment">#isImage: false</span></span><br><span class="line">    <span class="comment">#isExcerpt: false</span></span><br></pre></td></tr></table></figure>
<h3 id="版权声明">版权声明</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;</span> <span class="string">rel=&quot;external</span> <span class="string">nofollow&quot;</span> <span class="string">target=&quot;_blank&quot;&gt;CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span><span class="string">&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Valine-评论">Valine 评论</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">your</span> <span class="string">appid</span> <span class="comment"># your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">your</span> <span class="string">appkey</span> <span class="comment"># your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">ヾﾉ≧∀≦)o快来评论一下吧!</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="comment"># gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure>
<h3 id="站长工具">站长工具</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">google_site_verification:</span> <span class="string">ABCD...</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">UA-123456789-1</span></span><br><span class="line"><span class="attr">bing_site_verification:</span> <span class="string">10AA...</span></span><br></pre></td></tr></table></figure>
<h3 id="本地搜索-2">本地搜索</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="关闭动画">关闭动画</h3>
<p>为了加速我的网站，我关闭了站点的动画。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="配置静态文件-CDN">配置静态文件 CDN</h3>
<p>配置 CDN 能够节省服务器流量。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Script Vendors.</span></span><br><span class="line"><span class="comment"># Set a CDN address for the vendor you want to customize.</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment">#    jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</span></span><br><span class="line"><span class="comment"># Be aware that you should use the same version as internal ones to avoid potential problems.</span></span><br><span class="line"><span class="comment"># Please use the https protocol of CDN files when you enable https on your site.</span></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># Internal path prefix. Please do not edit it.</span></span><br><span class="line">  <span class="attr">_internal:</span> <span class="string">lib</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 2.1.3</span></span><br><span class="line">  <span class="attr">jquery:</span> <span class="string">//cdn.bootcss.com/jquery/2.1.3/jquery.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 2.1.5</span></span><br><span class="line">  <span class="comment"># See: http://fancyapps.com/fancybox/</span></span><br><span class="line">  <span class="attr">fancybox:</span> <span class="string">//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js</span></span><br><span class="line">  <span class="attr">fancybox_css:</span> <span class="string">//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.6</span></span><br><span class="line">  <span class="comment"># See: https://github.com/ftlabs/fastclick</span></span><br><span class="line">  <span class="attr">fastclick:</span> <span class="string">//cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.9.7</span></span><br><span class="line">  <span class="comment"># See: https://github.com/tuupola/jquery_lazyload</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="string">//cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.2.1</span></span><br><span class="line">  <span class="comment"># See: http://VelocityJS.org</span></span><br><span class="line">  <span class="attr">velocity:</span> <span class="string">//cdn.bootcss.com/velocity/1.2.1/velocity.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.2.1</span></span><br><span class="line">  <span class="comment"># See: http://VelocityJS.org</span></span><br><span class="line">  <span class="attr">velocity_ui:</span> <span class="string">//cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 0.7.9</span></span><br><span class="line">  <span class="comment"># See: https://faisalman.github.io/ua-parser-js/</span></span><br><span class="line">  <span class="attr">ua_parser:</span> <span class="string">//cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 4.6.2</span></span><br><span class="line">  <span class="comment"># See: http://fontawesome.io/</span></span><br><span class="line">  <span class="attr">fontawesome:</span> <span class="string">//cdn.bootcss.com/font-awesome/4.6.2/css/font-awesome.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1</span></span><br><span class="line">  <span class="comment"># https://www.algolia.com</span></span><br><span class="line">  <span class="attr">algolia_instant_js:</span></span><br><span class="line">  <span class="attr">algolia_instant_css:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.2</span></span><br><span class="line">  <span class="comment"># See: https://github.com/HubSpot/pace</span></span><br><span class="line">  <span class="comment"># Or use direct links below:</span></span><br><span class="line">  <span class="comment"># pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js</span></span><br><span class="line">  <span class="comment"># pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span></span><br><span class="line">  <span class="attr">pace:</span> <span class="string">//cdn.bootcss.com/pace/1.0.2/pace.min.js</span></span><br><span class="line">  <span class="attr">pace_css:</span> <span class="string">//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># See: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line">  <span class="attr">canvas_nest:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js</span></span><br><span class="line">  <span class="attr">canvas_nest_nomobile:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># See: https://github.com/theme-next/theme-next-three</span></span><br><span class="line">  <span class="comment"># three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js</span></span><br><span class="line">  <span class="comment"># three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js</span></span><br><span class="line">  <span class="comment"># canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js</span></span><br><span class="line">  <span class="comment"># canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js</span></span><br><span class="line">  <span class="attr">three:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># https://github.com/zproo/canvas-ribbon</span></span><br><span class="line">  <span class="attr">canvas_ribbon:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 3.3.0</span></span><br><span class="line">  <span class="comment"># https://github.com/ethantw/Han</span></span><br><span class="line">  <span class="attr">Han:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 3.3.0</span></span><br><span class="line">  <span class="comment"># https://github.com/vinta/pangu.js</span></span><br><span class="line">  <span class="comment"># Example:</span></span><br><span class="line">  <span class="comment"># pangu: //cdn.jsdelivr.net/npm/pangu@3.3.0/dist/browser/pangu.min.js</span></span><br><span class="line">  <span class="comment"># pangu: //cdnjs.cloudflare.com/ajax/libs/pangu/3.3.0/pangu.min.js</span></span><br><span class="line">  <span class="attr">pangu:</span> <span class="string">//cdn.bootcss.com/pangu/3.3.0/pangu.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># needMoreShare2</span></span><br><span class="line">  <span class="comment"># https://github.com/revir/need-more-share2</span></span><br><span class="line">  <span class="comment"># Example:</span></span><br><span class="line">  <span class="comment"># needmoreshare2_js: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.js</span></span><br><span class="line">  <span class="comment"># needmoreshare2_css: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.css</span></span><br><span class="line">  <span class="attr">needmoreshare2_js:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.js</span></span><br><span class="line">  <span class="attr">needmoreshare2_css:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># bookmark</span></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># https://github.com/theme-next/theme-next-bookmark</span></span><br><span class="line">  <span class="comment"># Example:</span></span><br><span class="line">  <span class="comment"># bookmark: //cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@1.0.0/bookmark.min.js</span></span><br><span class="line">  <span class="attr">bookmark:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@1.0.0/bookmark.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># reading_progress</span></span><br><span class="line">  <span class="comment"># Internal version: 1.0</span></span><br><span class="line">  <span class="comment"># https://github.com/theme-next/theme-next-reading-progress</span></span><br><span class="line">  <span class="comment"># Example: https://cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1.1/reading_progress.min.js</span></span><br><span class="line">  <span class="attr">reading_progress:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1.1/reading_progress.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># valine comment</span></span><br><span class="line">  <span class="comment"># Example: https://cdn.jsdelivr.net/npm/valine@1.1.8/dist/Valine.min.js</span></span><br><span class="line">  <span class="attr">valine:</span> <span class="string">//cdn.jsdelivr.net/npm/valine@latest/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx启用TLS1.3正式版教程</title>
    <url>/posts/nginx-tls13/</url>
    <content><![CDATA[<p>早就听说有 TLS1.3 了，一直心痒痒，想折腾折腾试试。以前浏览器支持的不多，网上也没太多人试过，不太敢趟雷。现在有一些大型网站网站已经弄上了 TLS1.3，也有不少博主给自己的博客升级了 TLS1.3 了，留下了宝贵的经验。我也忍不住了，今天就来折腾一下看看。Openssl 1.1.1 LTS 已经发布，更新一下 TLS1.3 正式版。</p>
<span id="more"></span>
<h2 id="软件版本">软件版本</h2>
<ul>
<li>Nginx: nginx-1.15.4</li>
<li>OpenSSL: openssl-1.1.1(LTS)</li>
</ul>
<h2 id="教程">教程</h2>
<h3 id="安装依赖">安装依赖</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y build-essential libpcre3 libpcre3-dev zlib1g-dev liblua5.1-dev libluajit-5.1-dev libgeoip-dev google-perftools libgoogle-perftools-dev</span><br></pre></td></tr></table></figure>
<h3 id="下载并解压所需软件">下载并解压所需软件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.15.4.tar.gz</span><br><span class="line">tar zxf nginx-1.15.4.tar.gz</span><br><span class="line">wget https://www.openssl.org/source/openssl-1.1.1.tar.gz</span><br><span class="line">tar zxf openssl-1.1.1.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="OpenSSL-打补丁">OpenSSL 打补丁</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pushd openssl-1.1.1</span><br><span class="line"><span class="meta">#</span><span class="bash">打TLS1.3 Draft 23, 26, 28, Final补丁</span></span><br><span class="line">curl https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/openssl-equal-1.1.1_ciphers.patch | patch -p1</span><br><span class="line"><span class="meta">#</span><span class="bash">打ignore Strict-SNI <span class="built_in">log</span>补丁</span></span><br><span class="line">curl https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/openssl-ignore_log_strict-sni.patch | patch -p1</span><br><span class="line">popd</span><br></pre></td></tr></table></figure>
<h3 id="Nginx-补丁">Nginx 补丁</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pushd nginx-1.15.4</span><br><span class="line"><span class="meta">#</span><span class="bash">打SPDY, HTTP2 HPACK, Dynamic TLS Record, Fix Http2 Push Error, PRIORITIZE_CHACHA补丁</span></span><br><span class="line">curl https://raw.githubusercontent.com/kn007/patch/43f2d869b209756b442cfbfa861d653d993f16fe/nginx.patch | patch -p1</span><br><span class="line">curl https://raw.githubusercontent.com/kn007/patch/c59592bc1269ba666b3bb471243c5212b50fd608/nginx_auto_using_PRIORITIZE_CHACHA.patch | patch -p1</span><br><span class="line"><span class="meta">#</span><span class="bash">打Strict-SNI补丁</span></span><br><span class="line">curl https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/nginx_strict-sni.patch | patch -p1</span><br><span class="line">popd</span><br></pre></td></tr></table></figure>
<h3 id="编译安装-Nginx">编译安装 Nginx</h3>
<p>如果原本编译安装过 Nginx，可以输入<code>nginx -V</code>，查看以前的 configure 配置。在后面加上所需参数进行编译。</p>
<p>关键参数：</p>
<ul>
<li>添加<code>--with-openssl=../openssl-1.1.1</code>来指定 OpenSSL 路径</li>
<li><code>HTTP2 HPACK</code>需要加入<code>--with-http_v2_hpack_enc</code>参数。</li>
<li><code>SPDY</code>需要加入<code>--with-http_spdy_module</code></li>
</ul>
<p>注意将<code>--with-openssl</code>参数改为自己的 OpenSSL 文件夹地址。</p>
<p>我的完整 configure 命令如下，请类比进行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx-1.15.4</span><br><span class="line"></span><br><span class="line">./configure \</span><br><span class="line">--user=www \</span><br><span class="line">--group=www \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-pcre-jit \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_ssl_preread_module \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-http_slice_module \</span><br><span class="line">--with-http_geoip_module \</span><br><span class="line">--with-google_perftools_module \</span><br><span class="line">--with-openssl=../openssl-1.1.1 \</span><br><span class="line">--with-http_v2_hpack_enc \</span><br><span class="line">--with-http_spdy_module</span><br></pre></td></tr></table></figure>
<p>configure 完成后，输入以下语句开始编译。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<p>编译完成后，如果没有报错，输入以下内容进行安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="配置-Nginx-虚拟主机">配置 Nginx 虚拟主机</h3>
<p>将以下内容加入你的 conf 文件的相应位置，替换掉原本的相应内容。由于安全性升级的考虑，我删除了 TLS1 和 TLS1.1。除此以外，TLS1.3 的新加密套件只能在 TLS1.3 中使用，旧的加密套件不能用于 TLS1.3。似乎所有虚拟主机都要配置才能使用 TLS1.3。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssl_early_data on;</span><br><span class="line">ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">ssl_ciphers [TLS13+AESGCM+AES128|TLS13+AESGCM+AES256|TLS13+CHACHA20]:[EECDH+ECDSA+AESGCM+AES128|EECDH+ECDSA+CHACHA20]:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:[EECDH+aRSA+AESGCM+AES128|EECDH+aRSA+CHACHA20]:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;</span><br><span class="line">ssl_ecdh_curve X25519:P-256:P-384;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br></pre></td></tr></table></figure>
<p>最后使用<code>nginx -t</code>测试 nginx 配置的正确性。</p>
<h3 id="成功">成功</h3>
<p>重启 Nginx，你会发现你的网站已经是 TLS1.3 连接了。</p>
<p><img data-src="https://img.iszy.xyz/20190318215152.png?x-oss-process=style/big" alt=""></p>
<p><img data-src="https://img.iszy.xyz/20190318215203.png" alt=""></p>
<h3 id="一点问题">一点问题</h3>
<p>我原本使用的是 Nginx 1.14.0，现在升级到了 1.15.4，配置文件可能会报以下警告。当然，由于只是警告，并不会影响运行，只是我强迫症受不了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx: [warn] the &quot;ssl&quot; directive is deprecated, use the &quot;listen ... ssl&quot; directive instead in /usr/local/nginx/conf/vhost/www.iszy.cc.conf:22</span><br></pre></td></tr></table></figure>
<p>这是由于在主线版本 v1.15.0 以后，弃用了<code>ssl</code>标识。官方原话是这样的：</p>
<blockquote>
<p>The “ssl” directive is deprecated; the “ssl” parameter of the “listen” directive should be used instead.</p>
</blockquote>
<p>解决方案很简单，只需要删除配置文件中的<code>ssl on</code>语句，采用<code>listen</code>语句替代，如<code>listen 443 ssl</code>。原本就使用<code>listen 443 ssl</code>语句的就更简单了，直接删除<code>ssl on</code>语句即可。</p>
<h2 id="后话">后话</h2>
<p>好了，到这里，教程算是结束了。OpenSSL 1.1.1 LTS 已经正式发布了，TLS1.3 也已经正式公布。现阶段，Nginx、Apache 等主流 web 服务器还没有官方支持，还需要通过打补丁的方式进行支持。期待 TLS1.3 全面铺开后对网络隐私和抗审查作出的贡献。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
        <tag>SSL</tag>
        <tag>Nginx</tag>
        <tag>TLS</tag>
      </tags>
  </entry>
  <entry>
    <title>最新开启Nicegram Debug方法</title>
    <url>/posts/nicegram-debug/</url>
    <content><![CDATA[<p>记录一下最新的开启<code>Nicegram Debug</code>的方式，帮助有需要的人。官方 Telegram 已支持解锁，建议使用官方客户端。</p>
<span id="more"></span>
<h2 id="说明">说明</h2>
<p>Nicegram 曾在<code>5.11(57)</code>版本中移除了 <code>NG Debug</code>，大家都开始采用回退版本的方法来开启<code>NG Debug</code>，在之后的版本中此方法失效。我看了下测试版的更新说明，可以在<code>5.11(59)</code>版本的更新说明中看到，<code>Nicegram Debug</code>已经回归，采用了全新的开启方式，不能再从 Nicegram App 中开启，而是采用 Web 或 Telegram bot 的方式开启。</p>
<p><img data-src="https://img.iszy.xyz/20191015145457.png" alt="更新说明"></p>
<h2 id="方法">方法</h2>
<p>访问<span class="exturl" data-url="aHR0cHM6Ly9teS5uaWNlZ3JhbS5hcHA=">my.nicegram.app<i class="fa fa-external-link-alt"></i></span>，通过 Telegram 登录你需要开启<code>Nicegram Debug</code>的账户。注意是 Telegram，不是 Nicegram。</p>
<p><img data-src="https://img.iszy.xyz/20191015141146.png" alt="my.nicegram.app"></p>
<p>然后将看到开启开关。</p>
<p><img data-src="https://img.iszy.xyz/20191015141021.png" alt="开关"></p>
<p>将两个开关均打开，重新启动 Nicegram，该账号已经能够正常访问苹果封锁的群组了。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Telegram</tag>
        <tag>iOS</tag>
        <tag>Nicegram</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js利用async实现sleep功能</title>
    <url>/posts/nodejs-async-sleep/</url>
    <content><![CDATA[<p>最近用 Node.js 的 request 调用我的一个 web api，循环访问速度太快，请求就会被丢弃。查找了一下 Node.js 中的 sleep 功能的实现方法，下面的这个方法，用起来效果很好，在此记录一下。</p>
<span id="more"></span>
<h2 id="方法记录">方法记录</h2>
<h3 id="安装-async">安装 async</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i async --save</span><br></pre></td></tr></table></figure>
<p>然后在你的文件开头引用此 package。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&quot;async&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="sleep-功能定义">sleep 功能定义</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> <span class="built_in">setTimeout</span>(res, <span class="number">2000</span>));</span><br></pre></td></tr></table></figure>
<p>可以把<code>2000</code>改为你需要的数字，单位为毫秒。</p>
<h3 id="调用-sleep">调用 sleep</h3>
<p>在<code>async</code>方法中才能使用<code>await</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//some function</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> sleep();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2 id="示例">示例</h2>
<p>随便写个示例，可以类比着来。把 sleep 放在你需要暂停的位置上，外面要套上 async。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&quot;async&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> <span class="built_in">setTimeout</span>(res, <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">await</span> sleep();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Docker部署Posgresql+Geoserver环境</title>
    <url>/posts/postgres-geoserver-setup-docker/</url>
    <content><![CDATA[<p>本文介绍一下如何通过 Docker 部署 <code>Postgresql</code> + <code>PostGIS</code> + <code>Geoserver</code> 环境。本文操作在 Ubuntu 18.04 中完成，理论上适用于其他可用 Docker 的系统环境。</p>
<span id="more"></span>
<h2 id="安装-Docker">安装 Docker</h2>
<p>Docker 的安装很简单，教程很多，在这里只列举一下，Ubuntu 和 CentOS 的安装脚本。</p>
<ul>
<li>Ubuntu: <code>wget -qO- https://get.docker.com/ | sudo sh</code></li>
<li>CentOS: <code>curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh</code></li>
</ul>
<h2 id="安装-Postgresql-PostGIS">安装 Postgresql + PostGIS</h2>
<p>在这里使用 kartoza 大佬的 docker 镜像<code>kartoza/postgis:10.0-2.4</code>。</p>
<h3 id="镜像说明">镜像说明</h3>
<ul>
<li>Postgresql: <code>10.3.1</code></li>
<li>PostGIS: <code>2.4.4</code></li>
</ul>
<p>项目地址：<code>https://github.com/kartoza/docker-postgis</code></p>
<h3 id="部署命令">部署命令</h3>
<p>运行以下命令部署 Postgresql + PostGis，注意替换命令中的用户名和密码。还有更多环境变量可用，亦可选择其他镜像版本可以参考项目 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2thcnRvemEvZG9ja2VyLXBvc3RnaXMvYmxvYi9kZXZlbG9wL1JFQURNRS5tZA==">README<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~ &amp;&amp; mkdir postgres_data</span><br><span class="line">docker run --name &quot;postgis&quot; -p 5432:5432 -d -t -v $HOME/postgres_data:/var/lib/postgresql -e POSTGRES_USER=&quot;postgres&quot; -e POSTGRES_PASS=&quot;postgres&quot; -e ALLOW_IP_RANGE=0.0.0.0/0 --restart=always kartoza/postgis:10.0-2.4</span><br></pre></td></tr></table></figure>
<h2 id="安装-Geoserver">安装 Geoserver</h2>
<p>在这里使用我 build 的 docker 镜像<code>zvonimirsun/geoserver:2.14.2</code>。</p>
<h3 id="镜像说明-2">镜像说明</h3>
<ul>
<li>Geoserver: <code>2.14.2</code></li>
<li>oraclejdk: <code>8</code></li>
<li>tomcat: <code>8.0-jre8</code></li>
</ul>
<p>项目地址：<code>https://github.com/ZvonimirSun/docker-geoserver</code></p>
<p>本项目 fork 自 kartoza 大佬的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2thcnRvemEvZG9ja2VyLWdlb3NlcnZlcg==">项目<i class="fa fa-external-link-alt"></i></span>，修复了命令中的一个不知道为何会存在的一个低级错误，替换了过期的下载链接。我只 build 了<code>2.14.2</code>的版本，使用了 oraclejdk8。想要旧版本 geoserver 的可以看 kartoza 大佬的<span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL2thcnRvemEvZ2Vvc2VydmVyL3RhZ3M=">镜像<i class="fa fa-external-link-alt"></i></span>，现在的最新版本为<code>geoserver 2.13.0</code>，默认使用的是 openjdk。如果仍旧不是自己想要的版本或是要添加插件，可以根据 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL2RvY2tlci1nZW9zZXJ2ZXIvYmxvYi9tYXN0ZXIvUkVBRE1FLm1k">README<i class="fa fa-external-link-alt"></i></span> 自行 build。</p>
<h3 id="部署命令-2">部署命令</h3>
<p>运行以下命令部署 Geoserver，注意替换命令中的用户名和密码。还有更多环境变量可用，可以参考项目 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL2RvY2tlci1nZW9zZXJ2ZXIvYmxvYi9tYXN0ZXIvUkVBRE1FLm1k">README<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~ &amp;&amp; mkdir geoserver_data</span><br><span class="line">docker run -d -p 8080:8080 --name geoserver -v $HOME/geoserver_data:/opt/geoserver/data_dir zvonimirsun/geoserver:2.14.2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>GIS</tag>
        <tag>Postgresql</tag>
        <tag>PostGIS</tag>
        <tag>GeoServer</tag>
      </tags>
  </entry>
  <entry>
    <title>在VMware中安装&quot;开源版Windows&quot;——ReactOS</title>
    <url>/posts/reactos-vmware/</url>
    <content><![CDATA[<p>ReactOS 是一个适用于 x86/x64 平台的免费、开源的操作系统暨项目，旨在提供 Windows 平台下的程序与驱动的二进制兼容性，简直可以说是开源版的 Windows。借由逆向工程等手段，其以净室设计的方法进行开发。为确保操作系统没有任何一部分是看过泄漏出来的微软 Windows 源码的人所写，或者逆向工程的过程达不到净室设计标准，一个全盘的源码审查由 ReactOS 主要开发者下令展开。此审查目前已经结束。这篇文章将演示如何在 VMWare 虚拟机上体验 ReactOS。</p>
<span id="more"></span>
<h2 id="下载系统镜像">下载系统镜像</h2>
<p>前往 ReactOS 官网<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVhY3Rvcy5vcmcvZG93bmxvYWQ=">下载系统镜像<i class="fa fa-external-link-alt"></i></span>。</p>
<p><img data-src="https://img.iszy.xyz/20190318215607.png?x-oss-process=style/big" alt=""></p>
<p>将会得到一个 zip 压缩包，解压后是 ReactOS 的安装镜像。</p>
<h2 id="安装">安装</h2>
<p>首先你要安装有 VMware Workstation Pro(或 Player 版)，这部分安装不再赘述。</p>
<h3 id="创建虚拟机">创建虚拟机</h3>
<h4 id="新建虚拟机">新建虚拟机</h4>
<p><img data-src="https://img.iszy.xyz/20190318215634.png" alt=""></p>
<h4 id="选择镜像">选择镜像</h4>
<p><img data-src="https://img.iszy.xyz/20190318215652.png" alt=""></p>
<h4 id="系统类型设置">系统类型设置</h4>
<p>全部选择其他</p>
<p><img data-src="https://img.iszy.xyz/20190318215707.png" alt=""></p>
<h4 id="选择虚拟机存储位置">选择虚拟机存储位置</h4>
<p><img data-src="https://img.iszy.xyz/20190318215717.png" alt=""></p>
<h4 id="硬盘设置">硬盘设置</h4>
<p>容量设置为 8G，不用太多</p>
<p><img data-src="https://img.iszy.xyz/20190318215728.png" alt=""></p>
<h4 id="其他参数设置">其他参数设置</h4>
<p>内存建议至少 512M，如果想的话，可以开启加速 3D 图形</p>
<p><img data-src="https://img.iszy.xyz/20190318215740.png" alt=""></p>
<p>点击完成即可。</p>
<h3 id="安装-ReactOS">安装 ReactOS</h3>
<p>首先启动虚拟机，进入安装进程。</p>
<h4 id="选择语言">选择语言</h4>
<p>有许多语言可供选择，在这里我选择<code>Chinese (RPC)</code>，点击回车。</p>
<p><img data-src="https://img.iszy.xyz/20190318215752.png?x-oss-process=style/big" alt=""></p>
<h4 id="调整屏幕分辨率">调整屏幕分辨率</h4>
<p>一路回车到如下界面，可以调整屏幕分辨率，若不需要，回车即可。</p>
<p><img data-src="https://img.iszy.xyz/20190318215803.png?x-oss-process=style/big" alt=""></p>
<p>在此，我调整了分辨率为<code>1280x1024x32</code>。</p>
<p><img data-src="https://img.iszy.xyz/20190318215814.png?x-oss-process=style/big" alt=""></p>
<h4 id="安装-2">安装</h4>
<p>一路回车进行安装，到如下界面。在虚拟机右下角断开 CD 连接后回车重启。</p>
<p><img data-src="https://img.iszy.xyz/20190318215825.png?x-oss-process=style/big" alt=""></p>
<h2 id="设置">设置</h2>
<p>启动后直接回车进入第一个系统，后面都是类 Windows 的操作，比较简单，不用设置的地方下一步即可。</p>
<p><img data-src="https://img.iszy.xyz/20190318215850.png" alt=""></p>
<p>在此页面可以设置时区、输入语言和键盘，可惜似乎没有中文的输入法支持。</p>
<p><img data-src="https://img.iszy.xyz/20190318215901.png" alt=""></p>
<p>在此页面可以设置系统密码，我在此留空，不设密码。</p>
<p><img data-src="https://img.iszy.xyz/20190318215909.png" alt=""></p>
<p>时区选择北京，关闭夏令时。</p>
<p><img data-src="https://img.iszy.xyz/20190318215922.png" alt=""></p>
<p>一路下一步完成安装，重启后即可进入系统。自动安装驱动可以取消，反正也没有可以支持的内容。</p>
<p><img data-src="https://img.iszy.xyz/20190318215937.png" alt=""></p>
<h2 id="后话">后话</h2>
<p>ReactOS 完成度已经很高了，经网友测试已经可以兼容许多 Windows 下的程序，完全没有使用 Windows 的代码，可以说是非常了不起了。现在 ReactOS 仍在积极开发，提供了许多新的功能，看官大可以体验一下，说不定未来这个系统真的能够代理 Windows 呢。</p>
<p>在此我就体验了一下 ReactOS 自带的扫雷游戏，更多功能留给看官自行探索。</p>
<p><img data-src="https://img.iszy.xyz/20190318215950.png" alt=""></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>ReactOS</tag>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一款安卓开源超强无广告免费追书神器APP——阅读</title>
    <url>/posts/reading-app/</url>
    <content><![CDATA[<p>今天发现一个开源的网络小说追书 APP，暂时只支持安卓。由于版权原因并不能上架应用商店，但是不妨碍人家强啊。</p>
<span id="more"></span>
<blockquote>
<p>参考链接: <span class="exturl" data-url="aHR0cHM6Ly93d3cuaG9zdGZhbnMuY24vMjE2Mi5odG1s">无广告追书神器 APP-阅读<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="原理">原理</h2>
<p>当您搜索一本书的时，阅读会将该书的书名以关键词的形式提交到各个第三方网络文学网站进行搜索，并通过自定义书源的格式进行解析，方便阅读。</p>
<h2 id="应用界面">应用界面</h2>
<p><img data-src="https://img.iszy.xyz/20190318220006.png?x-oss-process=style/big" alt=""></p>
<h2 id="应用特点">应用特点</h2>
<ul>
<li>兼容安卓 4.4 及以上版本</li>
<li>支持自定义书源，上百个书源不是问题</li>
<li>开发大神 BUG 修的快，功能加的多，日常吐血 2 更</li>
</ul>
<h2 id="功能实现">功能实现</h2>
<ul>
<li>全局状态栏沉浸</li>
<li>自定义多线程搜索、缓存</li>
<li>支持一键缓存</li>
<li>预加载功能，预加载 5 章</li>
<li>点击章节名跳转小说目录</li>
<li>自定义字体、阅读背景、文字颜色、背景颜色</li>
<li>简繁体转换</li>
<li>自由复制粘贴小说内容</li>
<li>支持本地、网络导入书源</li>
<li>支持本地、网络导入净化规则</li>
<li>等等。。。。。。</li>
</ul>
<h2 id="下载地址">下载地址</h2>
<ul>
<li>国内商店:<span class="exturl" data-url="aHR0cHM6Ly93d3cuY29vbGFway5jb20vYXBrL2NvbS5nZWRvb3IubW9ua2V5Ym9vaw==">阅读(com.gedoor.monkeybook) - 酷安网<i class="fa fa-external-link-alt"></i></span></li>
<li>Github Release 地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlZG9vci9NeUJvb2tzaGVsZi9yZWxlYXNlcw==">Releases·gedoor/MyBookshelf·GitHub<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="使用方式">使用方式</h2>
<p>与正常小说软件无异，搜索小说，将小说放入书架进行阅读。有章节目录和更新提醒。</p>
<h2 id="书源">书源</h2>
<h3 id="导入书源">导入书源</h3>
<h4 id="整理版书源">整理版书源</h4>
<p>作者已经维护了一份质量优秀的书源，初次安装没有书源的时候一般会跳出让你导入默认书源的提示。如果没有出现，也可以在<code>菜单栏</code>—<code>书源管理</code>里的右上角菜单里点击<code>书源同步</code>获取。内含 68 个书源，包括 8 个正版书城书源，和 60 个第三方书城的书源，主要是网络小说。</p>
<h4 id="其他书源">其他书源</h4>
<p>同时，还有一些其他作者写的其他书源暂未包括在软件里，可以点击<span class="exturl" data-url="aHR0cHM6Ly93d3cuaG9zdGZhbnMuY24vYm9va3NvdXJjZQ==">这里<i class="fa fa-external-link-alt"></i></span>前往获取。</p>
<h4 id="书源导入教程">书源导入教程</h4>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaG9zdGZhbnMuY24vMjIwMS5odG1s">网络书源导入教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaG9zdGZhbnMuY24vMjE3MS5odG1s">本地书源导入教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="制作书源">制作书源</h3>
<p>这里提供了详细的书源制作教程，你可以自行制作添加属于你的书源。</p>
<p>点击前往<span class="exturl" data-url="aHR0cHM6Ly93d3cuaG9zdGZhbnMuY24vbWFrZS1jb3Vyc2U=">书源制作教程<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="阅读-App-爱好者博客">阅读 App 爱好者博客</h2>
<p>上面的教程都来自这个<span class="exturl" data-url="aHR0cHM6Ly93d3cuaG9zdGZhbnMuY24v">阅读 App 爱好者博客<i class="fa fa-external-link-alt"></i></span>，大家可以前往查看更多内容。</p>
<h2 id="后话">后话</h2>
<p>阅读 App 是一个相当优秀的阅读软件，省去了大家大量地在网上搜索小说的时间，也让大家免于受到垃圾网站大量广告之苦，这也是我推荐这个应用的原因。但是终究看的还是盗版小说，如果大家喜欢喜欢那本小说，还是最好购买正版支持作者。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>(转载)Javascript模块化编程（三）：require.js的用法</title>
    <url>/posts/require_js/</url>
    <content><![CDATA[<blockquote>
<p>原文链接: <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTIvMTEvcmVxdWlyZV9qcy5odG1s">Javascript 模块化编程（三）：require.js 的用法<i class="fa fa-external-link-alt"></i></span> —— 阮一峰</p>
</blockquote>
<span id="more"></span>
<p>这个系列的<a href="https://www.iszy.cc/2019/08/14/javascript_module/">第一部分</a>和<a href="https://www.iszy.cc/2019/08/14/asynchronous_module_definition/">第二部分</a>，介绍了 Javascript 模块原型和理论概念，今天介绍如何将它们用于实战。</p>
<p>我采用的是一个非常流行的库<span class="exturl" data-url="aHR0cDovL3JlcXVpcmVqcy5vcmcv">require.js<i class="fa fa-external-link-alt"></i></span>。</p>
<p><img data-src="https://img.iszy.xyz/20190814101519.png" alt=""></p>
<h2 id="为什么要用-require-js？">为什么要用 require.js？</h2>
<p>最早的时候，所有 Javascript 代码都写在一个文件里面，只要加载这一个文件就够了。后来，代码越来越多，一个文件不够了，必须分成多个文件，依次加载。下面的网页代码，相信很多人都见过。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;6.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码依次加载多个 js 文件。</p>
<p>这样的写法有很大的缺点。首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；其次，由于 js 文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的 1.js 要在 2.js 的前面），依赖性最大的模块一定要放到最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p>require.js 的诞生，就是为了解决这两个问题：</p>
<ul>
<li>实现 js 文件的异步加载，避免网页失去响应；</li>
<li>管理模块之间的依赖性，便于代码的编写和维护。</li>
</ul>
<h2 id="require-js-的加载">require.js 的加载</h2>
<p>使用 require.js 的第一步，是先去官方网站<span class="exturl" data-url="aHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9kb3dubG9hZC5odG1s">下载<i class="fa fa-external-link-alt"></i></span>最新版本。</p>
<p>下载后，假定把它放在 js 子目录下面，就可以加载了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>有人可能会想到，加载这个文件，也可能造成网页失去响应。解决办法有两个，一个是把它放在网页底部加载，另一个是写成下面这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/require.js&quot;</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>async 属性表明这个文件需要异步加载，避免网页失去响应。IE 不支持这个属性，只支持 defer，所以把 defer 也写上。</p>
<p>加载 require.js 以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是 main.js，也放在 js 目录下面。那么，只需要写成下面这样就行了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/require.js&quot;</span> <span class="attr">data-main</span>=<span class="string">&quot;js/main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>data-main 属性的作用是，指定网页程序的主模块。在上例中，就是 js 目录下面的 main.js，这个文件会第一个被 require.js 加载。由于 require.js 默认的文件后缀名是 js，所以可以把 main.js 简写成 main。</p>
<h2 id="主模块的写法">主模块的写法</h2>
<p>上一节的 main.js，我把它称为&quot;主模块&quot;，意思是整个网页的入口代码。它有点像 C 语言的 main()函数，所有代码都从这儿开始运行。</p>
<p>下面就来看，怎么写 main.js。</p>
<p>如果我们的代码不依赖任何其他模块，那么可以直接写入 javascript 代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line">alert(<span class="string">&quot;加载成功！&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>但这样的话，就没必要使用 require.js 了。真正常见的情况是，主模块依赖于其他模块，这时就要使用 AMD 规范定义的的 require()函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&quot;moduleA&quot;</span>, <span class="string">&quot;moduleB&quot;</span>, <span class="string">&quot;moduleC&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  moduleA,</span></span></span><br><span class="line"><span class="params"><span class="function">  moduleB,</span></span></span><br><span class="line"><span class="params"><span class="function">  moduleC</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// some code here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>require()函数接受两个参数。第一个参数是一个数组，表示所依赖的模块，上例就是[‘moduleA’, ‘moduleB’, ‘moduleC’]，即主模块依赖这三个模块；第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。</p>
<p>require()异步加载 moduleA，moduleB 和 moduleC，浏览器不会失去响应；它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。</p>
<p>下面，我们看一个实际的例子。</p>
<p>假定主模块依赖 jquery、underscore 和 backbone 这三个模块，main.js 就可以这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;jquery&quot;</span>, <span class="string">&quot;underscore&quot;</span>, <span class="string">&quot;backbone&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$, _, Backbone</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// some code here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>require.js 会先加载 jQuery、underscore 和 backbone，然后再运行回调函数。主模块的代码就写在回调函数中。</p>
<h2 id="模块的加载">模块的加载</h2>
<p>上一节最后的示例中，主模块的依赖模块是[‘jquery’, ‘underscore’, ‘backbone’]。默认情况下，require.js 假定这三个模块与 main.js 在同一个目录，文件名分别为 jquery.js，underscore.js 和 backbone.js，然后自动加载。</p>
<p>使用 require.config()方法，我们可以对模块的加载行为进行自定义。require.config()就写在主模块（main.js）的头部。参数就是一个对象，这个对象的 paths 属性指定各个模块的加载路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;jquery.min&quot;</span>,</span><br><span class="line">    <span class="attr">underscore</span>: <span class="string">&quot;underscore.min&quot;</span>,</span><br><span class="line">    <span class="attr">backbone</span>: <span class="string">&quot;backbone.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面的代码给出了三个模块的文件名，路径默认与 main.js 在同一个目录（js 子目录）。如果这些模块在其他目录，比如 js/lib 目录，则有两种写法。一种是逐一指定路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;lib/jquery.min&quot;</span>,</span><br><span class="line">    <span class="attr">underscore</span>: <span class="string">&quot;lib/underscore.min&quot;</span>,</span><br><span class="line">    <span class="attr">backbone</span>: <span class="string">&quot;lib/backbone.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>另一种则是直接改变基目录（baseUrl）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&quot;js/lib&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;jquery.min&quot;</span>,</span><br><span class="line">    <span class="attr">underscore</span>: <span class="string">&quot;underscore.min&quot;</span>,</span><br><span class="line">    <span class="attr">backbone</span>: <span class="string">&quot;backbone.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果某个模块在另一台主机上，也可以直接指定它的网址，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>require.js 要求，每个模块是一个单独的 js 文件。这样的话，如果加载多个模块，就会发出多次 HTTP 请求，会影响网页的加载速度。因此，require.js 提供了一个<span class="exturl" data-url="aHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9vcHRpbWl6YXRpb24uaHRtbA==">优化工具<i class="fa fa-external-link-alt"></i></span>，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少 HTTP 请求数。</p>
<h2 id="AMD-模块的写法">AMD 模块的写法</h2>
<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>
<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在 define()函数之中。</p>
<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: add,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>加载方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&quot;math&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line">  alert(math.add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果这个模块还依赖其他模块，那么 define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&quot;myLib&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">myLib</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myLib.doSomething();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: foo,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当 require()函数加载上面这个模块的时候，就会先加载 myLib.js 文件。</p>
<h2 id="加载非规范的模块">加载非规范的模块</h2>
<p>理论上，require.js 加载的模块，必须是按照 AMD 规范、用 define()函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如 jQuery）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？</p>
<p>回答是可以的。</p>
<p>这样的模块在用 require()加载之前，要先用 require.config()方法，定义它们的一些特征。</p>
<p>举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  <span class="attr">shim</span>: &#123;</span><br><span class="line">    <span class="attr">underscore</span>: &#123;</span><br><span class="line">      <span class="attr">exports</span>: <span class="string">&quot;_&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">backbone</span>: &#123;</span><br><span class="line">      <span class="attr">deps</span>: [<span class="string">&quot;underscore&quot;</span>, <span class="string">&quot;jquery&quot;</span>],</span><br><span class="line">      <span class="attr">exports</span>: <span class="string">&quot;Backbone&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>require.config()接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义（1）exports 值（输出的变量名），表明这个模块外部调用时的名称；（2）deps 数组，表明该模块的依赖性。</p>
<p>比如，jQuery 的插件可以这样定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　　shim: &#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="string">&#x27;jquery.scroll&#x27;</span>: &#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="attr">deps</span>: [<span class="string">&#x27;jquery&#x27;</span>],</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="attr">exports</span>: <span class="string">&#x27;jQuery.fn.scroll&#x27;</span></span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>
<h2 id="require-js-插件">require.js 插件</h2>
<p>require.js 还提供一系列<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvUGx1Z2lucw==">插件<i class="fa fa-external-link-alt"></i></span>，实现一些特定的功能。</p>
<p>domready 插件，可以让回调函数在页面 DOM 结构加载完成后再运行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;domready!&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">doc</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// called once the DOM is ready</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>text 和 image 插件，则是允许 require.js 加载文本和图片文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&quot;text!review.txt&quot;</span>, <span class="string">&quot;image!cat.jpg&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">review, cat</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(review);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(cat);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>类似的插件还有 json 和 mdown，用于加载 json 文件和 markdown 文件。</p>
<p>（完）</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AMD</tag>
      </tags>
  </entry>
  <entry>
    <title>【评测2022】优质SS/SSR/Trojan/V2Ray机场推荐</title>
    <url>//page/bgfw/</url>
    <content><![CDATA[<blockquote>
<p><strong>郑重声明</strong>：本文所介绍产品主要是为了方便学习、科研以及外贸工作。请遵守中华人民共和国法律法规，切勿在任何地方发布分裂国家，激化民族矛盾的言论。</p>
</blockquote>
<p>现在工作和学习中，尤其是涉及到技术和学术的，难免需要到 Google、Github 查查资料，外贸工作中对于外网的流畅访问也十分重要，代理也逐渐成为了不少人的刚需。话不多说，有需求的看看。通过我的体验和测试，我这里推荐几个稳定性和速度上比较有保障的机场，力图能让各种流量和价位需求的用户找到适合的产品，大家可以参考一下。所有套餐内容及价格以商家说明为准，此处可能更新不及时，不做另外说明。</p>
<span id="more"></span>
<p><strong>注</strong>: 冬奥会期间，可能会有网络不稳定的情况，属于正常情况，商家会尽力减小影响。</p>
<h2 id="目录">目录</h2>
<table>
<thead>
<tr>
<th>机场名称（点击了解更多）</th>
<th>关键词</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/page/freewhale/">FreeWhale 自由鲸 ⭐</a></td>
<td>性价比，主流节点超多，小众节点</td>
<td><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZnJlZXdoYWxl">官网传送门<i class="fa fa-external-link-alt"></i></span> / <a href="https://www.iszy.cc/page/speed-test-collection/#FreeWhale-%E8%87%AA%E7%94%B1%E9%B2%B8">测速</a>(2022-02-09)</td>
</tr>
<tr>
<td><a href="/page/cmynetwork/">CMYNetwork 红莓网络</a></td>
<td>IEPL/IPLC 专线，Trojan，主流节点多，小众节点，福利共享账号</td>
<td><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovY215bmV0d29yaw==">官网传送门<i class="fa fa-external-link-alt"></i></span> / <a href="https://www.iszy.cc/page/speed-test-collection/#CMYNetwork-%E7%BA%A2%E8%8E%93%E7%BD%91%E7%BB%9C">测速</a>(2022-02-10)</td>
</tr>
<tr>
<td><a href="#%E4%B8%89%E3%80%81MEET">MEET</a></td>
<td>性价比，主流节点，超小流量套餐</td>
<td><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZnNwZWVk">官网传送门<i class="fa fa-external-link-alt"></i></span> / <a href="https://www.iszy.cc/page/speed-test-collection/#MEET">测速</a>(2022-02-09)</td>
</tr>
<tr>
<td><a href="#%E5%9B%9B%E3%80%81DuangCloud">DuangCloud</a></td>
<td>性价比，专线，主流节点</td>
<td><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZHVhbmdjbG91ZA==">官网传送门<i class="fa fa-external-link-alt"></i></span> / <a href="https://www.iszy.cc/page/speed-test-collection/#DuangCloud">测速</a></td>
</tr>
<tr>
<td><a href="#%E4%BA%94%E3%80%81Blinkload">Blinkload</a></td>
<td>主流节点多，流媒体</td>
<td><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovYmxpbmtsb2Fk">官网传送门<i class="fa fa-external-link-alt"></i></span> / <a href="https://www.iszy.cc/page/speed-test-collection/#Blinkload">测速</a></td>
</tr>
<tr>
<td><a href="#%E5%85%AD%E3%80%81WavesLink">WavesLink</a>(原 后浪云)</td>
<td>IEPL 专线，主流节点多，流媒体</td>
<td><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovd2F2ZXNsaW5r">官网传送门<i class="fa fa-external-link-alt"></i></span> / <a href="https://www.iszy.cc/page/speed-test-collection/#WavesLink">测速</a></td>
</tr>
<tr>
<td><a href="#%E4%B8%83%E3%80%81BESTIEPL">BESTIEPL</a>(原 Electry)</td>
<td>IEPL 专线，流媒体</td>
<td><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZWxlY3RyeQ==">官网传送门<i class="fa fa-external-link-alt"></i></span> / <a href="https://www.iszy.cc/page/speed-test-collection/#BESTIEPL">测速</a></td>
</tr>
<tr>
<td><a href="#%E5%85%AB%E3%80%81Gatern">Gatern</a>(原 Shuttle)</td>
<td>性价比，IPLC 专线，主流节点，小众节点多，流媒体</td>
<td><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZ2F0ZXJu">官网传送门<i class="fa fa-external-link-alt"></i></span> / <a href="https://www.iszy.cc/page/speed-test-collection/#Shuttle">测速</a></td>
</tr>
<tr>
<td><a href="#%E4%B9%9D%E3%80%81ByWave">ByWave</a></td>
<td>IPLC 专线，流媒体</td>
<td><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovYnl3YXZl">官网传送门<i class="fa fa-external-link-alt"></i></span> / <a href="https://www.iszy.cc/page/speed-test-collection/#ByWave">测速</a></td>
</tr>
</tbody>
</table>
<p>点击前往查看测速: <strong><a href="https://www.iszy.cc/page/speed-test-collection/">机场测速集合</a></strong></p>
<h2 id="一、FreeWhale-自由鲸">一、FreeWhale 自由鲸</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZnJlZXdoYWxl">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p>邀请码: <code>iszy</code></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#FreeWhale-%E8%87%AA%E7%94%B1%E9%B2%B8">⭐⭐ 测速 ⭐⭐</a> (2022-02-09)</p>
<p><a href="https://www.iszy.cc/page/freewhale/">⭐ 更多详细介绍 ⭐</a></p>
<h3 id="（一）优惠">（一）优惠</h3>
<blockquote>
<p>官方长期优惠</p>
</blockquote>
<p><strong>￥ 115</strong> 及以上套餐可用</p>
<p><strong>95 折</strong>礼遇码：<code>dearmarch</code></p>
<h3 id="（二）简介">（二）简介</h3>
<p><strong>自由鲸 FreeWhale</strong>是一家长期走中高端路线的 <strong>ShadowsocksR(SSR)</strong> 机场，也提供部分 V2Ray 线路，已经稳定运行多年。实际对比下来，它的性价比还是相当高的，线路又多，提供的流量也十分充足，主要推荐的套餐充分考虑了当前主流用户能够接受的价位，可以说是无可挑剔。现阶段包含大量优质 V2Ray 线路和更多的 SSR 线路，<strong>Lv.2</strong> 节点采用 <strong>SSR 隧道加密</strong>和 V2ray 技术，配合国内 <strong>6Gbps</strong> 机器和负载均衡技术，保证全时段稳定性。用了很久，稳定通过了“多次网络波动”时期，体验极佳，可以放心使用。</p>
<ul>
<li>SSR 隧道中转 &amp; V2ray</li>
<li>采用封闭邀请，精选客户，稳定可靠安全</li>
<li>定期发放折扣，部分套餐月均低至 9 元，具有极高性价比（可提供企业定制服务）</li>
<li>全面解锁 Netflix,DMM,HULU,TVB 等各类流媒体，YouTube4K-8K 流畅</li>
<li>支持 Windows/Mac/iOS/Android/ 路由器，支持多设备同时使用</li>
<li>充值采用支付宝 Alipay，支付安全便捷，使用教程简单易用</li>
<li>和多家 IDC 深入合作，如阿里云，GmoCloud，香港宽频，中华电信……</li>
<li>全球线路全面，香港（HK,HKBN,CN2）、日本(IIJ，NTT)，台湾（HiNet，TFN）、新加坡、美国（GIA,NCP）、韩国(AWS)、俄罗斯(KHV)、英国(NTT)、澳门(CTM)等线路可选</li>
<li>提供昂贵的 IPLC，为稳定性需求较高的用户提供了支持，在良好网络环境下可为游戏加速</li>
</ul>
<h3 id="（三）套餐">（三）套餐</h3>
<p><strong>包年包月套餐</strong></p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>账号等级</th>
<th>付款周期</th>
<th>客户端数量</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>月费套餐【全节点】</strong></td>
<td>130G/30 天</td>
<td>25 元</td>
<td>2</td>
<td>月付</td>
<td>8</td>
</tr>
<tr>
<td>月费套餐【非全节点】<br>不含 V2Ray 和隧道中转线路及香港台湾地区</td>
<td>70G/30 天</td>
<td>20 元</td>
<td>1</td>
<td>月付</td>
<td>8</td>
</tr>
<tr>
<td>月重置套餐流量叠加包</td>
<td>30G</td>
<td>5 元</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>按量付费套餐</strong></p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>账号等级</th>
<th>付款周期</th>
<th>客户端数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>季度套餐【全节点】</td>
<td>350G/90 天</td>
<td>70 元</td>
<td>2</td>
<td>季付</td>
<td>10</td>
</tr>
<tr>
<td><strong>全年 0.5T 轻量【全节点/性价比】★</strong></td>
<td>512G/360 天</td>
<td>115 元</td>
<td>2</td>
<td>年付</td>
<td>10</td>
</tr>
<tr>
<td><strong>全年 1T 中度【全节点/主流】★</strong></td>
<td>1024G/360 天</td>
<td>200 元</td>
<td>2</td>
<td>年付</td>
<td>15</td>
</tr>
<tr>
<td><strong>全年 2T 重度【全节点/尊享】★</strong></td>
<td>2048G/360 天</td>
<td>375 元</td>
<td>2</td>
<td>年付</td>
<td>15</td>
</tr>
<tr>
<td>全年畅享套餐【全节点/团队】</td>
<td>6666G/360 天</td>
<td>996 元</td>
<td>2</td>
<td>年付</td>
<td>20</td>
</tr>
</tbody>
</table>
<h2 id="二、CMYNetwork-红莓网络">二、CMYNetwork 红莓网络</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovY215bmV0d29yaw==">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#CMYNetwork-%E7%BA%A2%E8%8E%93%E7%BD%91%E7%BB%9C">⭐⭐ 测速 ⭐⭐</a> (2022-02-10)</p>
<p><a href="https://www.iszy.cc/page/cmynetwork/">⭐ 更多详细介绍 ⭐</a></p>
<h3 id="（一）优惠-2">（一）优惠</h3>
<blockquote>
<p>本站专属优惠</p>
</blockquote>
<p>使用我的邀请码注册可以获得 <strong>5 元</strong>网站余额红包，可用于购买套餐。此优惠仅可使用一次，同 IP 下多次注册，视为相同账户。</p>
<p>邀请码: <code>iszy</code></p>
<h3 id="（二）简介-2">（二）简介</h3>
<p><strong>CMYNetwork 红莓网络</strong> 隶属于<code>CMYNetwork Technology Co., Ltd</code>，注册于摩纳哥公国，是一家我最近发现一家宝藏机场。除入门套餐外采用专线中转节点；入门套餐采用 Trojan 新协议，保证稳定性。经测速和日常使用，可以说是稳定高速，高峰期速度也能拉满。提供网页在线客服和工单，服务还不错。</p>
<ul>
<li>基础线路 Trojan 加成，专业线路 IPLC、IEPL 专线保障</li>
<li>无限低速流量(1Mbps~2Mbps)，流量用完也不会失联</li>
<li>流媒体解锁</li>
<li>Extreme 套餐提供各种视频会员<strong>共享账号</strong></li>
<li>多平台订阅支持</li>
</ul>
<h3 id="（三）套餐-2">（三）套餐</h3>
<blockquote>
<p>注意，需要专线中转线路，请至少选择 Pro 及以上套餐，专线倍率为 2，需要注意。</p>
</blockquote>
<table>
<tr><th>套餐</th><th>流量</th><th>价格</th><th>公网IP数</th><th>线路</th><th>客服</th></tr>
<tr>
  <td rowspan="4">Air/入门版</td>
  <td rowspan="2">100G/月</td>
  <td>18元/30天</td>
  <td rowspan="4">2</td>
  <td rowspan="4">国际轻量优化链路<br/>解锁Trojan直连线路</td>
  <td rowspan="4">工单客服支持</td>
</tr>
<tr>
  <td>54元/90天</td>
</tr>
<tr>
  <td>125G/月</td>
  <td>108元/180天</td>
</tr>
<tr>
  <td>150G/月</td>
  <td>193元/365天</td>
</tr>
<tr>
  <td rowspan="4">Pro/专业版订阅</td>
  <td rowspan="2">200G/月</td>
  <td>35元/30天</td>
  <td rowspan="4">3</td>
  <td rowspan="4">解锁 CN2 优化直连专线（Trojan）<br>解锁 IPLC 流媒体专线（SSR）<br>解锁港/台/日/美 原生IP线路（Trojan）</td>
  <td rowspan="11">12 x 365在线客服支持</td>
</tr>
<tr>
  <td>105元/90天</td>
</tr>
<tr>
  <td>250G/月</td>
  <td>210元/180天</td>
</tr>
<tr>
  <td>300G/月</td>
  <td>370元/365天</td>
</tr>
<tr>
  <td rowspan="4">Extreme/至尊版</td>
  <td rowspan="2">643G/月</td>
  <td>68元/30天</td>
  <td rowspan="4">4</td>
  <td rowspan="4">免费远程技术支持<br>解锁 IEPL 流媒体专线<br>解锁 IEPL 游戏专线(内网)<br>Netflix/HULU/HBO/Pxxnhub等价值千元福利账号</td>
</tr>
<tr>
  <td>147元/90天</td>
</tr>
<tr>
  <td>768G/月</td>
  <td>399元/180天</td>
</tr>
<tr>
  <td>1024G/月</td>
  <td>696元/365天</td>
</tr>
<tr>
  <td rowspan="2">Business/企业版基础套餐</td>
  <td rowspan="2">1200G/月</td>
  <td>298元/30天</td>
  <td rowspan="2">10</td>
  <td rowspan="2">无定制专线，可自助购买<br>如需要线路定制请查看定制套餐<br>可提供国际电子收据（英文/日文可选）</td>
</tr>
<tr>
  <td>3398元/365天</td>
</tr>
<tr>
  <td>Business/企业专线定制</td>
  <td colspan="4">此为定制方案，可动态根据需求优化，具体详情请咨询客服</td>
</tr>
</table>
<h2 id="三、MEET">三、MEET</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZnNwZWVk">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#MEET">⭐⭐ 测速 ⭐⭐</a> (2022-02-09)</p>
<h3 id="（一）简介">（一）简介</h3>
<p><strong>MEET</strong> 是一家专做按量付费套餐的商家，推荐中低流量用户选择。可以了解一下，买个最便宜的套餐试试看。</p>
<ul>
<li>主打按量付费，套餐有效期长，为中低流量用户准备</li>
<li>主流客户端 SSR 订阅支持</li>
<li>节点高速稳定</li>
<li>不限制设备数，但仅限个人使用，禁止滥用</li>
</ul>
<h3 id="（二）套餐">（二）套餐</h3>
<blockquote>
<p>套餐不能叠加使用，请根据自己的使用情况进行选择。</p>
</blockquote>
<table>
<thead>
<tr>
<th>套餐</th>
<th>有效期</th>
<th>流量</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>一年套餐</td>
<td>360 天</td>
<td>800G</td>
<td>239 元</td>
</tr>
<tr>
<td>半年套餐</td>
<td>180 天</td>
<td>300G</td>
<td>109 元</td>
</tr>
<tr>
<td>季度套餐</td>
<td>90 天</td>
<td>100G</td>
<td>49 元</td>
</tr>
<tr>
<td>10G 流量月包</td>
<td>30 天</td>
<td>10G</td>
<td>5 元</td>
</tr>
</tbody>
</table>
<h2 id="四、DuangCloud">四、DuangCloud</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZHVhbmdjbG91ZA==">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#DuangCloud">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）优惠-3">（一）优惠</h3>
<blockquote>
<p>转官网优惠公告</p>
</blockquote>
<p><strong>春节特惠</strong></p>
<p>祝大家新年快乐~</p>
<p>活动时间：即日起至 <strong>2 月 15 日</strong></p>
<p>使用范围：不循环，推荐年付，续费也可用</p>
<ul>
<li>九折优惠码：<code>Bye2021</code></li>
<li>八折优惠码，不含月付：<code>Happy2022</code></li>
</ul>
<p><strong>注:</strong></p>
<ul>
<li>一次性订阅等不参与活动</li>
<li>数量有限！！！用完为止！！！</li>
</ul>
<blockquote>
<p>专属优惠</p>
</blockquote>
<p>除 light 套餐外，都能使用以下优惠码获取 9 折优惠，走过路过不要错过。</p>
<ul>
<li><strong>9 折</strong>优惠码: <code>iszy.cc</code></li>
</ul>
<p>本站优惠码一个账户仅可享受一次</p>
<h3 id="（二）简介-3">（二）简介</h3>
<p>这是一家稳定运行半年多的纯 SS 机场，口碑还不错，不过线路确实稳定且质量不错，已经是全 IEPL 专线，价格比较合理，可以推荐。</p>
<ul>
<li>IEPL 专线线路接入</li>
<li>拥有香港、台湾、日本、美国、新加坡节点</li>
<li>1.5G 最高可用速率，满足绝大部分需求</li>
<li>原生 IP 流媒体解锁</li>
<li>无设备数量限制，可多人使用</li>
<li>支持支付宝/微信支付</li>
</ul>
<h3 id="（三）套餐-3">（三）套餐</h3>
<p>可选半年、全年缴费周期。注意，一次性无时间限制 Light 套餐无法叠加无法共存。</p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>流量均价</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mini</td>
<td>50G/月</td>
<td>20 元/月 或 200 元/年</td>
<td>0.4 元/G</td>
</tr>
<tr>
<td>Basic</td>
<td>150G/月</td>
<td>35 元/月 或 350 元/年</td>
<td>0.23 元/G</td>
</tr>
<tr>
<td>Pro</td>
<td>300G/月</td>
<td>55 元/月 或 550 元/年</td>
<td>0.18 元/G</td>
</tr>
<tr>
<td>Gold</td>
<td>500G/月</td>
<td>75 元/月 或 750 元/年</td>
<td>0.15 元/G</td>
</tr>
<tr>
<td>Business</td>
<td>800G/月</td>
<td>100 元/月 或 1000 元/年</td>
<td>0.125 元/G</td>
</tr>
<tr>
<td>Light</td>
<td>50G 永久流量</td>
<td>100 元一次性</td>
<td>2 元/G</td>
</tr>
</tbody>
</table>
<h3 id="（四）其他说明">（四）其他说明</h3>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmR1YW5nY2xvdWQuY2x1Yi8=">Duang Cloud 使用文档<i class="fa fa-external-link-alt"></i></span>，敬请查阅</li>
<li>官方联系方式，有问题可以联系
<ul>
<li>工单方式</li>
<li>tg 群：<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL2R1YW5nY2xvdWQ=">DuangCloud 客户群<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
<h2 id="五、Blinkload">五、Blinkload</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovYmxpbmtsb2Fk">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#Blinkload">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）优惠-4">（一）优惠</h3>
<blockquote>
<p>专属优惠</p>
</blockquote>
<p>通过努力，和机场主的协商后争取到了本站专属优惠码，凡通过<span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovYmxpbmtsb2Fk">本站链接<i class="fa fa-external-link-alt"></i></span>注册用户，购买套餐时输入优惠码，可享受不同程度优惠.</p>
<ul>
<li><strong>88 折</strong>优惠码: <code>iszy</code></li>
<li><strong>年付</strong>专属<strong>85 折</strong>优惠码: <code>iszyyear</code></li>
</ul>
<p>本站优惠码一个账户仅可享受一次</p>
<blockquote>
<p>官方优惠</p>
</blockquote>
<p><strong>冬季优惠</strong></p>
<p>购买时输入优惠码 <code>WINTER2021</code>，即享 <strong>92 折</strong>优惠（仅半年付及以上可用）</p>
<p><strong>拼团下单</strong>享更多优惠:</p>
<ul>
<li>2 人: 94 折</li>
<li>3 人: 88 折</li>
<li>4 人: 8 折</li>
</ul>
<h3 id="（二）简介-4">（二）简介</h3>
<p><strong>Blinkload</strong> 隶属于 <code>Blinkload Technology Co.，Ltd Hong Kong</code>，是一家成立接近 3 年的老站了。套餐层次覆盖到位，轻量或重度用户均可很好的满足，另外还有适合中小企业的企业套餐。该站经过一段时间的整备，已经全面转型为全节点 BGP 入口，IEPL 传输的全内网中转机场，且各项资源均为自有资源，均签署了 SLA 协议。同时支持 SS/SSR/V2Ray 协议以及各种完备的托管软件，是一家全能高端且极致稳定的机场。还有一点就是售后服务在行业算是非常出众的，网页配备在线客服，另有相应群组专供解决问题使用，解决用户问题非常及时。</p>
<p><strong>绝对稳定优质的线路</strong></p>
<ul>
<li>全节点使用大陆 BGP 入口优化技术，接入全国 7 家运营商；</li>
<li>全节点使用 IEPL 传输手段绕过 gfw 检测，且带宽充裕保障高峰期速率，因此敏感时期也无任何影响；</li>
<li>专属 5Gbps+ L2 Transport 传输资源；</li>
<li>AS9833 自有 ASN IP 段；</li>
<li>在全球多个 PoP 内拥有全万兆架构 并与 10+ 运营商及 IXP 提供互联；</li>
<li>在用户本地网络条件允许的情况下，所有节点均可在任何时间段流畅观看 8K 视频；</li>
</ul>
<p><strong>全节点流媒体解锁</strong></p>
<ul>
<li>全节点原生解锁 Netflix、HBO、Abema、DMM、Happyon、动画疯 等流媒体服务；</li>
</ul>
<p><strong>全面的协议和平台支持</strong></p>
<ul>
<li>全自主开发一键登录客户端 Windows &amp; macOS &amp; iOS (正在内测) ，方便不愿折腾的用户使用；</li>
<li>支持 Windows/macOS/Android/iOS/Linux/路由器等全平台使用。</li>
<li>支持 SS、SSR、V2Ray、Clash、Surfboard、Surge、Quantumult（X） 订阅托管功能；</li>
</ul>
<p><strong>更好的用户交互体验</strong></p>
<ul>
<li>全自主设计开发面板；</li>
<li>全自动化运维；</li>
<li>官网接入网页客服，可即时沟通；</li>
<li>Telegram 群组每日签到赠送流量；</li>
</ul>
<p><strong>完善的支付方式</strong></p>
<p>由于是香港企业，签约了 Stripe 收款平台，<strong>支持支付宝、微信以及 Paypal 支付</strong>，收款方式十分的完善以及国际化。</p>
<p><strong>拼团功能</strong></p>
<p>充分考虑到用户与家人同事之间的关联性，特别设计了极其实惠的拼团功能，最高和多位朋友一起拼团购买同套餐，可享受每人 8 折优惠（不可与优惠码同享）。</p>
<h3 id="（三）套餐-4">（三）套餐</h3>
<p>注意：套餐定价为<strong>港元</strong>，请自行根据汇率进行换算。参考汇率 <code>HKD/CNY≈0.9</code>。</p>
<table>
<tr><th>组</th><th>套餐</th><th>价格(<strong>港元</strong>)</th><th>流量</th><th>可用设备</th><th>最高速率</th><th>备注</th></tr>
<tr>
  <td>特别提供</td>
  <td>Special Offer #1</td>
  <td>59.9元/93天</td>
  <td>20G/月</td>
  <td>1</td>
  <td rowspan="6">200 Mbps</td>
  <td>限量套餐，适合小流量用户购买</td>
</tr>
<tr>
  <td rowspan="6">Pro</td>
  <td>Pro 季度套餐</td>
  <td>199.9元/93天</td>
  <td rowspan="3">200G/月</td>
  <td rowspan="3">3</td>
  <td rowspan="6">适合重度使用，对稳定性有绝对要求的用户，封锁期服务绝对保障</td>
</tr>
<tr>
  <td>Pro 半年套餐</td>
  <td>299.9元/183 天</td>
</tr>
<tr>
  <td>Pro 年套餐 #1</td>
  <td>499.9元/365 天</td>
</tr>
<tr>
  <td>Pro 年套餐 #2</td>
  <td>699.9元/365 天</td>
  <td>400G/月</td>
  <td rowspan="2">5</td>
</tr>
<tr>
  <td>Pro 年套餐 #3</td>
  <td>999.9元/365 天</td>
  <td>800G/月</td>
</tr>
<tr>
  <td>Business Pro</td>
  <td>3888元/365 天</td>
  <td>1500G/月</td>
  <td>50</td>
  <td>不限速</td>
</tr>
<tr>
  <td rowspan="4">Lite</td>
  <td>Lite 月度套餐</td>
  <td>69.9元/31天</td>
  <td rowspan="4">100G/月</td>
  <td rowspan="8">3</td>
  <td rowspan="8">200 Mbps</td>
  <td rowspan="4">适合中度用户，提供 Pro 同样节点</td>
</tr>
<tr>
  <td>Lite 季度套餐</td>
  <td>169.9元/93 天</td>
</tr>
<tr>
  <td>Lite 半年套餐</td>
  <td>249.9元/183 天</td>
</tr>
<tr>
  <td>Lite 年度套餐</td>
  <td>399.9元/365 天</td>
</tr>
<tr>
  <td rowspan="4">Micro</td>
  <td>Micro 月度套餐</td>
  <td>39.9元/31天</td>
  <td rowspan="4">50G/月</td>
  <td rowspan="4">适合轻量使用</td>
</tr>
<tr>
  <td>Micro 季度套餐</td>
  <td>79.9元/93 天</td>
</tr>
<tr>
  <td>Micro 半年套餐</td>
  <td>159.9元/186 天</td>
</tr>
<tr>
  <td>Micro 年度套餐</td>
  <td>299.9元/365 天</td>
</tr>
<tr>
  <td rowspan="3">Business</td>
  <td>Business</td>
  <td>2888元/365 天</td>
  <td>1000G/月</td>
  <td>30</td>
  <td rowspan="3">不限速</td>
  <td rowspan="3">适合中小企业多设备使用</td>
</tr>
<tr>
  <td>Business Pro</td>
  <td>3888元/365 天</td>
  <td>1500G/月</td>
  <td>50</td>
</tr>
<tr>
  <td>Business Customized</td>
  <td>6799元/365 天</td>
  <td>1500G/月</td>
  <td>100</td>
</tr>
<tr>
  <td>其他套餐</td>
  <td>100GiB 叠加流量包</td>
  <td>54.9元</td>
  <td>100G</td>
  <td></td>
  <td></td>
  <td>套餐内流量不够时可作为应急⽅案</td>
</tr>
</table>
<h3 id="（四）其他说明-2">（四）其他说明</h3>
<ul>
<li>订阅地址及节点信息请勿截图发到其他地方，请务必打码。</li>
<li>通知公告<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL3RoZXNzcmNoYW5uZWw=">Telegram 频道<i class="fa fa-external-link-alt"></i></span>(Telegram 需挂代理)</li>
<li>售前售后<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL3RoZXNzcmdyb3Vw">Telegram 官方交流群<i class="fa fa-external-link-alt"></i></span>(Telegram 需挂代理)</li>
<li>若有任何问题可联系官网右下角的**网页客服(推荐)<strong>或</strong>Telegram 管理员(推荐)**或发送工单。</li>
</ul>
<h2 id="六、WavesLink">六、WavesLink</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovd2F2ZXNsaW5r">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#WavesLink">⭐⭐ 测速 ⭐⭐</a> (2022-03-10)</p>
<h3 id="（一）优惠-5">（一）优惠</h3>
<blockquote>
<p>本站专属优惠</p>
</blockquote>
<ul>
<li>优惠码: <code>随遇而安</code></li>
<li>优惠力度: 年付八折优惠</li>
</ul>
<blockquote>
<p>转官网优惠公告</p>
</blockquote>
<ul>
<li>活动时间: <strong>2022/03/10-2022/04/10</strong></li>
<li>优惠码: <code>WavesLink-1Th</code></li>
<li>优惠力度: 八折优惠</li>
</ul>
<h3 id="（二）简介-5">（二）简介</h3>
<p><strong>WavesLink</strong>，原后浪云 BackWavesCloud，重新升级线路，规范节点命名，是一家专做稳定高端的全 IEPL 专线机场，拥有较全的主流地区节点覆盖。</p>
<ol>
<li>线路：全中转线路<br>
NORMAL 为广州移动公网中转<br>
MASTER 为移动入口的广港专线或深港专线中转。</li>
<li>落地：香港 Akari、HKT、HKBN、HGC、Nathosts，日本 FDCServer、G-Core，台湾 Hinet，美国 BLinkload，英国 GTHost。</li>
<li>流媒体解锁：”保证解锁港区流媒体“。</li>
<li>将升级为自有专线和 AS 落地。</li>
</ol>
<h3 id="（三）套餐-5">（三）套餐</h3>
<table>
<thead>
<tr>
<th>套餐</th>
<th>价格</th>
<th>流量</th>
<th>可用设备</th>
</tr>
</thead>
<tbody>
<tr>
<td>Normal-輕量後浪-V1</td>
<td>30 元/月</td>
<td>100GB/月</td>
<td>5</td>
</tr>
<tr>
<td>Pro-高級後浪-V2</td>
<td>60 元/月</td>
<td>200GB/月</td>
<td>5</td>
</tr>
<tr>
<td>Master-至尊後浪-V3</td>
<td>120 元/月</td>
<td>500GB/月</td>
<td>5</td>
</tr>
</tbody>
</table>
<h2 id="七、BESTIEPL">七、BESTIEPL</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZWxlY3RyeQ==">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#BESTIEPL">⭐⭐ 测速 ⭐⭐</a> (2022-03-10)</p>
<h3 id="（一）简介-2">（一）简介</h3>
<p><strong>BESTIEPL</strong>(原 Electry)，拥有高端 IEPL 专线中继，暂时只有香港台湾节点，但近期会增加更多落地节点。</p>
<ul>
<li>系统自动检测用户地理位置及运营商，分配对应最近入口，减少延迟；</li>
<li>全 BGP 入口中转节点，无视封锁</li>
<li>线路优质，高速稳定，不限速套餐</li>
<li>支持 Windows/mac OS/Android/iOS</li>
<li>解锁流媒体区域限制</li>
<li>支付支持支付宝/微信/信用卡</li>
<li>全部线路流量消耗均为正常 1 倍率，无高倍率套路</li>
</ul>
<h3 id="（二）套餐-2">（二）套餐</h3>
<p>所有套餐线路是一样的，均为 IEPL &amp; CN2 中继线路，只有流量区别。</p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>价格</th>
<th>流量</th>
<th>可用设备</th>
</tr>
</thead>
<tbody>
<tr>
<td>Air Plan</td>
<td>38 元/月</td>
<td>50GB/月</td>
<td>3</td>
</tr>
<tr>
<td>Lite Plan</td>
<td>48 元/月</td>
<td>200GB/月</td>
<td>3</td>
</tr>
<tr>
<td>Standard Plan</td>
<td>88 元/月</td>
<td>400GB/月</td>
<td>4</td>
</tr>
<tr>
<td>Advanced Plan</td>
<td>158 元/月</td>
<td>800GB/月</td>
<td>5</td>
</tr>
<tr>
<td>Premium Plan</td>
<td>208 元/月</td>
<td>1000GB/月</td>
<td>5</td>
</tr>
</tbody>
</table>
<h2 id="八、Gatern">八、Gatern</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZ2F0ZXJu">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#Gatern">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）优惠-6">（一）优惠</h3>
<blockquote>
<p>本站专属优惠</p>
</blockquote>
<p>使用本站专属优惠码，享 <strong>85 折</strong>优惠！</p>
<p>优惠码: <code>iszy</code></p>
<p>(新购续费均可使用 只能用于季付及以上套餐)</p>
<blockquote>
<p>转官方优惠</p>
</blockquote>
<p>以下优惠码均可在续费或新购时使用。</p>
<p>失效日期 <strong>2022 年 02 月 15 日</strong></p>
<ul>
<li>
<p>优惠代码 A：<code>R63H0BYUH3</code></p>
<p>额度： 7 折一次性优惠</p>
<p>适用范围： 年付或以上</p>
</li>
<li>
<p>优惠代码 B：<code>J82MQ48RIQ</code></p>
<p>额度： 8 折一次性优惠</p>
<p>适用范围： 月付 季付 半年付 一次性流量包</p>
</li>
</ul>
<p>充值获取赠金:</p>
<ul>
<li>充 100 到账 110</li>
<li>充 200 到账 230</li>
<li>充 300 到账 350</li>
<li>充 500 到账 600</li>
<li>充 1000 到账 1200</li>
</ul>
<h3 id="（二）简介-6">（二）简介</h3>
<p>这是最近找到的一家 V2ray 机场，价格合适，流量给的也不少，提供 BGP 中转线路和两倍率的 IPLC 专线线路。经过最近一段时间的使用，可以说是非常稳定，速度给力，主流客户端都能够支持的比较好，可以推荐一下。</p>
<p>另外，我发现不少用户其实有小众国家线路的需求，因为使用人数不多，大多数机场一般不提供这些服务。这家机场应用户需求，提供了不少小众国家线路，有此类需求的用户可以考虑一下。</p>
<ul>
<li>线路上，所有节点都提供了一条 BGP 中转和一条两倍率的 IPLC 线路。</li>
<li>除了用户集中的香港有三台服务器节点，也就是六条线路外，其他地区均只有一台服务器节点，也就是两条线路，不过速度上经过测试绝对满足需求。</li>
<li>地区上，除香港外的地区有，美国、台湾、日本、韩国、新加坡、印度、菲律宾、加拿大、阿根廷、英国、法国、德国、荷兰、澳大利亚、俄罗斯、土耳其、埃及</li>
</ul>
<p>使用人数很少的小众地区节点性能不会特别高，有 BGP 中转和 IPLC 专线加持，我觉得应当是够用的，大家可以参考参考<a href="https://www.iszy.cc/page/speed-test-collection/#Shuttle">⭐⭐ 测速 ⭐⭐</a>。</p>
<h3 id="（三）套餐-6">（三）套餐</h3>
<blockquote>
<p>套餐间线路没有区别，请按需选购。<br>
按季度、年度等购买套餐有更多优惠哦。</p>
</blockquote>
<p>订阅服务</p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Nano⭐</strong></td>
<td>200G/月</td>
<td>20 元/月</td>
</tr>
<tr>
<td>Micro</td>
<td>360G/月</td>
<td>36 元/月</td>
</tr>
<tr>
<td>Small</td>
<td>520G/月</td>
<td>52 元/月</td>
</tr>
<tr>
<td>Medium</td>
<td>1000G/月</td>
<td>100 元/月</td>
</tr>
<tr>
<td>Large</td>
<td>1640G/月</td>
<td>164 元/月</td>
</tr>
</tbody>
</table>
<p>不限时流量包</p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>Special</td>
<td>160G</td>
<td>80 元</td>
</tr>
<tr>
<td>Lite</td>
<td>340G</td>
<td>170 元</td>
</tr>
<tr>
<td>Pro</td>
<td>700G</td>
<td>350 元</td>
</tr>
<tr>
<td>Ultra</td>
<td>1420G</td>
<td>710 元</td>
</tr>
</tbody>
</table>
<h3 id="（四）其他说明-3">（四）其他说明</h3>
<ul>
<li>客户端教程和下载
<ul>
<li>进入<span class="exturl" data-url="aHR0cHM6Ly9zaHV0dGxlLm9ubC9pbmRleC5waHA/cnA9L2tub3dsZWRnZWJhc2U=">帮助中心<i class="fa fa-external-link-alt"></i></span>，说明比较完善。</li>
</ul>
</li>
<li>官方联系
<ul>
<li>在官网可以使用工单、在线客服两种方式</li>
<li>还提供了官方 tg 群组，可以随时交流，购买套餐后可在套餐页看到进群链接</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zaHV0dGxlaHViLmdpdGh1Yi5pbw==">域名发布页<i class="fa fa-external-link-alt"></i></span>，防止失联</li>
</ul>
<h2 id="九、ByWave">九、ByWave</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovYnl3YXZl">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#ByWave">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）优惠-7">（一）优惠</h3>
<blockquote>
<p>本站专属优惠</p>
</blockquote>
<p>使用本站专属优惠码享 <strong>85 折</strong> 循环优惠。</p>
<p>优惠码: <code>iszy</code></p>
<blockquote>
<p>转官方优惠公告</p>
</blockquote>
<p><strong>充值获得赠送金</strong></p>
<ul>
<li>充 100 到账 115</li>
<li>充 200 到账 240</li>
<li>充 500 到账 600</li>
<li>充 1000 到账 1200</li>
</ul>
<h3 id="（二）简介-7">（二）简介</h3>
<p><strong>ByWave</strong>，是一家主打高端的 V2ray 机场。已使用一段时间，体验良好。这家机场拥有阿里云/WTT/HKT 等线路，且全内网中转节点，更提供有 IPLC 专线（专线套餐）。内网中转线路及 IPLC 专线成本极高，但质量极佳，体验十分稳定，在历次冲击下均无影响。</p>
<ul>
<li>线路<strong>全内网中转节点</strong></li>
<li><strong>3Gbps</strong> 带宽专线</li>
<li>速度高端，稳定高端，质量高端价格也高端</li>
<li>拥有港深、香港、美国、东京、俄罗斯等节点</li>
<li>支持 <strong>Win/Mac/Android/iOS</strong>，解锁 <strong>Netflix/HBO/Hulu</strong> 等访问</li>
<li><strong>对于使用的设备数量没有限制</strong>，单个账号可多台设配使用，若是团队使用购买，可以<strong>分摊成本</strong></li>
<li>支持<strong>支付宝</strong></li>
</ul>
<blockquote>
<p>内网中转线路及 IPLC 专线成本极高，但质量极佳，在抵抗网络冲击和稳定性方面卓有成效。</p>
</blockquote>
<h3 id="（三）套餐-7">（三）套餐</h3>
<p>以下套餐价格均为<strong>折扣前价格</strong>，两种套餐中包含线路完全相同，仅付费方式不同。专线套餐，将每月重置流量；按量计费版不会重置流量，且流量(套餐)不会过期。</p>
<p><strong>专线套餐</strong></p>
<blockquote>
<p>根据流量单价，<strong>年付</strong>以上更有性价比，大家可以酌情购买。</p>
</blockquote>
<table>
<thead>
<tr>
<th>套餐</th>
<th>每月流量(GB)</th>
<th>月付(元)</th>
<th>季度(元)</th>
<th>半年(元)</th>
<th>年付(元)</th>
<th>两年(元)</th>
<th>三年(元)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bronze</td>
<td>100</td>
<td>25</td>
<td>75</td>
<td>150</td>
<td>280</td>
<td>500</td>
<td>720</td>
</tr>
<tr>
<td>Silver</td>
<td>180</td>
<td>45</td>
<td>135</td>
<td>270</td>
<td>480</td>
<td>900</td>
<td>1320</td>
</tr>
<tr>
<td>Gold</td>
<td>265</td>
<td>65</td>
<td>195</td>
<td>390</td>
<td>680</td>
<td>1300</td>
<td>1920</td>
</tr>
<tr>
<td>Platinum</td>
<td>505</td>
<td>125</td>
<td>375</td>
<td>750</td>
<td>1480</td>
<td>2900</td>
<td>4320</td>
</tr>
<tr>
<td>Diamond</td>
<td>850</td>
<td>205</td>
<td>615</td>
<td>1230</td>
<td>2280</td>
<td>4500</td>
<td>6720</td>
</tr>
<tr>
<td>RedBeryl</td>
<td>1700</td>
<td>405</td>
<td>1215</td>
<td>2430</td>
<td>4680</td>
<td>9300</td>
<td>13920</td>
</tr>
</tbody>
</table>
<p><strong>专线套餐-按量计费版</strong></p>
<blockquote>
<p>该套餐按量付费，流量单价均为 0.67 元/GB，且无过期时间，请按照实际需求酌情购买 。</p>
</blockquote>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量(GB)</th>
<th>价格(元)</th>
</tr>
</thead>
<tbody>
<tr>
<td>OneTimeDataPlan</td>
<td>150</td>
<td>100</td>
</tr>
<tr>
<td></td>
<td>360</td>
<td>240</td>
</tr>
<tr>
<td></td>
<td>660</td>
<td>440</td>
</tr>
<tr>
<td></td>
<td>1230</td>
<td>820</td>
</tr>
</tbody>
</table>
<h3 id="（四）其他说明-4">（四）其他说明</h3>
<ul>
<li>在此查看最新域名：<span class="exturl" data-url="aHR0cHM6Ly9ieXdhdmVzaXRlLmdpdGh1Yi5pbw==">永久域名发布页<i class="fa fa-external-link-alt"></i></span>，永远不用担心失联。</li>
<li>无法使用问题排查
<ul>
<li>使用 V2Ray 服务首先需要您的设备时间与标准北京时间相差不超过 30 秒，如遇到无法使用的情况请优先检查时间。</li>
<li>如果时间准确无法使用的话请检查浏览器是否有 SwitchOmega 或者代理相关的插件，如果有的话请先关闭这些插件。</li>
<li>如果还是无法使用的话，请在连接后截图客户端中的日志界面发送到在线客服。</li>
</ul>
</li>
<li>建议采用官网在线客服的方式解决问题</li>
</ul>
<hr>
<ul>
<li>本站仅做介绍和引荐，不参与购买、服务和售后，此类问题请通过官方联系方式联系官方，一般可以通过<code>工单</code>或 <code>tg 群</code>的方式。</li>
<li>如有疑问，可在评论区回复。</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>翻墙</tag>
        <tag>科学上网</tag>
        <tag>V2Ray</tag>
        <tag>ssr</tag>
        <tag>机场</tag>
        <tag>SS</tag>
        <tag>Trojan</tag>
        <tag>网络加速</tag>
        <tag>代理推荐</tag>
        <tag>酸酸乳</tag>
        <tag>ssr机场</tag>
        <tag>机场推荐</tag>
        <tag>机场评测</tag>
        <tag>V2Ray推荐</tag>
        <tag>代理</tag>
        <tag>推荐</tag>
        <tag>加速</tag>
        <tag>V2Ray机场</tag>
        <tag>ssr/v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>用Scoop包管理器管理你的Windows软件</title>
    <url>/posts/scoop/</url>
    <content><![CDATA[<p>用过 Linux 的都知道包管理器吧，不像 Windows 上装软件需要找官网下安装包安装、在控制面板中卸载，包管理器能够提供一种非常简洁的软件管理体验，一句命令安装、升级、卸载等，完全不需要操心。Scoop 作为一个包管理器，个人使用体验相当不错，在此推荐一下。</p>
<span id="more"></span>
<h2 id="Scoop-优势">Scoop 优势</h2>
<p>Scoop 作为一个包管理器，安装软件是其最重要的功能。先来看看，我以前是怎么做的。</p>
<p>最开始吧，我喜欢通过软件管家之类的软件进行软件管理，总的来说体验还不错。不过那是以前了，现在软件公司大多作恶，越来越不喜欢把功能独立出来，我就想弄个软件管理，非得让我装上整个全家桶，于是就被我抛弃了。然后，出于对国内互联网公司的不信任，我安装软件一定会找到官方网站下载最新的版本，这样子其实也还能接受，就是找软件有时候不是那么方便，且对于软件更新也不及时。后来吧，看到腾讯有个<span class="exturl" data-url="aHR0cHM6Ly9wYy5xcS5jb20v">腾讯软件中心的网页版<i class="fa fa-external-link-alt"></i></span>，感觉还挺不错的，至少有些软件可以直接在这边找了，还不需要另外装个软件，就是注意不要点高速下载，那会下一个腾讯电脑管家下来，就比较烦。</p>
<p>除了找软件的问题，在安装软件上，现在很多软件有的会按照规范安装在<code>Program Files</code>这样的文件夹中，有的会安装在用户<code>AppData\Local\Programs</code>中，还喜欢在系统各处留下许多痕迹。虽说这样子还是比较规范的，但是我还是觉得比较乱。</p>
<p>当我遇到 Scoop 之后，就深深地喜欢上了这个软件。Scoop 是通过 PowerShell 进行软件管理的命令行工具，用 Scoop 进行软件管理:</p>
<ul>
<li>安装卸载升级软件都只需要短短的一句话，支持批量操作。</li>
<li>软件统一安装在用户文件夹下的 scoop 目录中，不污染系统环境，文件结构清晰明了。亦可以根据需要修改路径。</li>
<li>默认为用户权限，不像 Chocolatey 那样永远需要管理员权限。</li>
<li>符合官方标准的软件卸载后不留下一丝痕迹。</li>
<li>每个软件通过一个 json 格式的 manifest 进行描述，可以查看软件安装的全部操作，更加安全。</li>
<li>自动配置环境变量，对开发软件很友好。</li>
</ul>
<h2 id="Scoop-安装">Scoop 安装</h2>
<p>官网: <span class="exturl" data-url="aHR0cHM6Ly9zY29vcC5zaC8=">https://scoop.sh/<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="运行环境">运行环境</h3>
<p>首先先说下网络的问题，Scoop 软件的关键在于 git 和 <strong>Github</strong>，如果不能正常、流畅地访问 <strong>Github</strong>，使用起来将会是一种折磨，劝你看到这里就放弃吧。</p>
<p>Scoop 要求安装有 <code>PowerShell 5</code> 及以上(包括 <code>PowerShell Core</code>) 以及 <code>.NET Framework 4.5</code>及以上，所以 Windows 版本必须在 Win 7 及以上。</p>
<p>关于 PowerShell 版本，可以打开 PowerShell，输入如下语句查看:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Host</span> | <span class="built_in">Select-Object</span> Version</span><br></pre></td></tr></table></figure>
<p>会返回类似如下字样，值大于 5.0 即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Version</span><br><span class="line">-------</span><br><span class="line">5.1.18362.145</span><br></pre></td></tr></table></figure>
<p>在 Win 10 和 Windows Server 2016 中已经安装了 PowerShell 5.1，如果在使用 Win 7、Windows Server 2008 R2 或 Windows Server 2012 则需要升级，官方提供了升级安装包，<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcG93ZXJzaGVsbC9zY3JpcHRpbmcvaW5zdGFsbC9pbnN0YWxsaW5nLXdpbmRvd3MtcG93ZXJzaGVsbD92aWV3PXBvd2Vyc2hlbGwtNg==">点击此处查看<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="安装">安装</h3>
<p>下面输入如下语句进行安装，来自 Scoop 官网。</p>
<p>运行如下语句允许本地脚本运行。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned <span class="literal">-scope</span> currentuser</span><br></pre></td></tr></table></figure>
<p>运行以下语句安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">iex</span> (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>安装完成后，可以运行下<code>scoop help</code>尝试是否成功，这条命令会显示出 Scoop 的命令说明。</p>
<p><img data-src="https://img.iszy.xyz/20190612111652.png" alt="20190612111652"></p>
<h2 id="Scoop-使用">Scoop 使用</h2>
<p>Scoop 有以下常用命令，我来简单介绍一下。</p>
<h3 id="帮助">帮助</h3>
<p>先说下 <code>help</code> 命令，由上文可以看到<code>scoop help</code>会列出所有命令的简单说明。</p>
<p>如果想了解一个具体命令的说明，以<code>update</code>为例，运行<code>scoop help update</code>即可，其他命令也与此类似。</p>
<p><img data-src="https://img.iszy.xyz/20190612112558.png" alt="20190612112558"></p>
<h3 id="其他常用">其他常用</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>search</td>
<td>搜索软件</td>
<td>scoop search chrome</td>
</tr>
<tr>
<td>install</td>
<td>安装软件</td>
<td>scoop install git curl</td>
</tr>
<tr>
<td>uninstall</td>
<td>卸载软件</td>
<td>scoop uninstall wget</td>
</tr>
<tr>
<td>update</td>
<td>更新软件</td>
<td>scoop update vscode</td>
</tr>
<tr>
<td>list</td>
<td>列举已安装软件</td>
<td>scoop list</td>
</tr>
<tr>
<td>info</td>
<td>查看软件信息</td>
<td>scoop info python</td>
</tr>
</tbody>
</table>
<h3 id="添加存储桶">添加存储桶</h3>
<p>Scoop 的每个应用都有一个 manifest，由一个个 manifest 组成的一个文件库就成为了一个存储桶，由 git 提供版本控制。Scoop 初始安装时会下载官方默认的 main 存储库。</p>
<p>Scoop 是由社区支撑的，可以提供的应用很多，但毕竟还是有限的，官方倾向于使用 portable 版本以提供无污染的软件体验，不是所有的软件都能符合官方的标准，于是就需要添加除了 main 存储桶以外的存储桶。</p>
<h4 id="环境需求">环境需求</h4>
<p>由于 Scoop 的存储桶本质上都是一个个 git 库，所以想要添加额外的存储库，需要有 git 环境支撑，输入<code>scoop install git</code>进行安装即可。</p>
<h4 id="添加存储桶-2">添加存储桶</h4>
<p>添加存储库的一般方法如下，以<code>extras</code>存储桶为例，<code>'scoop bucket add' + '存储桶名' + 'git 地址'</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras https://github.com/lukesampson/scoop-extras.git</span><br></pre></td></tr></table></figure>
<p>输入<code>scoop bucket known</code>就能查看官方已知的存储桶列表，如图所示。</p>
<p><img data-src="https://img.iszy.xyz/20190612123004.png" alt="20190612123004"></p>
<p>这些存储桶的添加命令可以简化，如以<code>extras</code>存储库为例，输入<code>scoop bucket add extras</code>即可。</p>
<p><img data-src="https://img.iszy.xyz/20190612123538.png" alt="20190612123538"></p>
<p>如果已知存储库中没有你需要的软件，你可以自己创建存储桶，自己来书写 manifest，当然也能添加其他人已经写好的库来用。</p>
<h4 id="推荐存储桶">推荐存储桶</h4>
<ol>
<li>
<p>已知存储桶:</p>
<ul>
<li>main(默认)</li>
<li>extras</li>
<li>versions</li>
<li>java</li>
</ul>
</li>
<li>
<p>大佬的存储桶:</p>
<ul>
<li>Ash258: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FzaDI1OC9zY29vcC1Bc2gyNTguZ2l0">https://github.com/Ash258/scoop-Ash258.git<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>
<p>我自己的存储桶:</p>
<p>额，这个存储桶就只有几个我自己需要用的应用，如有需要可以看看。</p>
<ul>
<li>iszy: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL3Njb29wLWlzenkuZ2l0">https://github.com/ZvonimirSun/scoop-iszy.git<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Scoop</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux自建KMS服务器</title>
    <url>/posts/setup-kms/</url>
    <content><![CDATA[<p>今天来简单介绍一下如何自建 KMS 激活 Windows 以及 Office。不想自己部署的也可以直接跳到<a href="#%E6%BF%80%E6%B4%BB">激活</a>，我提供了自建的 KMS 地址，大家可以使用。</p>
<span id="more"></span>
<h2 id="KMS-简介">KMS 简介</h2>
<p>KMS 是一种专为中型和大型企业设计的 Microsoft 产品的激活方法。 在标准 SOHO 环境中，您在安装期间输入产品密钥，然后通过 Internet 激活产品。这是通过向<code>microsoft.com</code>上的服务器发送请求来完成的，然后该服务器授予或拒绝激活。</p>
<p>通过输入称为通用批量许可证密钥（GVLK）的特殊密钥（又名“KMS 客户端密钥”），产品不再要求 Microsoft 服务器进行激活，而是通常驻留在公司内部网中的用户定义服务器（称为 KMS 服务器）。 Microsoft 仅将其 KMS 服务器提供给签署了所谓“选择合同”的公司。</p>
<p>KMS 激活大家应该比较熟悉，网上的激活工具基本都是使用 KMS 激活的，激活的期限一般是 180 天。不过激活工具相当于开了一个 KMS 服务器运行在你的电脑上，每过 180 天，系统会自动连接激活服务器进行激活，所以只要 KMS 服务器还在就不用担心失效的问题。如果 KMS 不在了，换一个即可，180 天总能找到一个，或者像本文这样自建一个就不怕失效了。</p>
<h2 id="vlmscd-介绍和安装">vlmscd 介绍和安装</h2>
<p>vlmcsd 是完全与 Microsoft 兼容的 KMS 服务器，是 KMS 服务器的一个独立开源实现，可供所有人使用。可为客户端提供产品激活服务，是 Microsoft KMS 服务器的直接替代品。可以在 Windows 和 Linux 上运行。可以运行在大多数嵌入式系统上，如路由器，NAS，移动电话，平板电脑，电视，机顶盒等。相对于 Microsoft KMS 服务器仅激活客户已支付的产品，vlmcsd 从不拒绝激活。</p>
<p>虽然 vlmcsd 既不需要激活密钥也不需要付费，但它并不是宣扬盗版 Windows。 其目的是确保合法副本的所有者可以无限制地使用他们的软件。例如，如果购买新计算机或主板，由于硬件更改，密钥将无法从 Microsoft 服务器激活，这种情况下可以通过使用 vlmcsd 激活来继续使用。</p>
<p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dpbmQ0L3ZsbWNzZA==">Wind4/vlmcsd<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="安装-Docker">安装 Docker</h3>
<p>为了避免系统环境不同引发未知问题，在这里使用 Docker。</p>
<p>Ubuntu 安装脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>
<p>CentOS 安装脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>
<h3 id="安装-vlmscd">安装 vlmscd</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mikolatero/vlmcsd</span><br><span class="line">docker run -d -p 1688:1688 --restart=always --name=<span class="string">&quot;vlmcsd&quot;</span> mikolatero/vlmcsd</span><br></pre></td></tr></table></figure>
<h3 id="防火墙">防火墙</h3>
<p>需要打开 1688 端口供 vlmcsd 使用。在这里举两个常用的。</p>
<h4 id="UFW">UFW</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw allow 1688</span><br></pre></td></tr></table></figure>
<h4 id="iptables">iptables</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 1688 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 1688 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h2 id="激活">激活</h2>
<p>在此我提供一下我个人使用的 KMS 服务器，不想自行安装的可以使用以下服务器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KMS服务器: kms.iszy.xyz</span><br><span class="line">端口: 1688</span><br></pre></td></tr></table></figure>
<h3 id="激活-Windows">激活 Windows</h3>
<p>用管理员权限打开 cmd(命令提示符)，输入以下命令。</p>
<h4 id="配置-GVLK">配置 GVLK</h4>
<p>一般情况下，新装的系统，没有输入过其他 key 的，系统会自带 GVLK，可以忽略此步，当然做了也没有影响。输入过其他 key 的则需要此步。</p>
<p>将以下命令中的 Key 替换成对应系统版本的 Key。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#slmgr /ipk GVLK</span></span><br><span class="line"><span class="comment">#Example:</span></span><br><span class="line">slmgr /ipk GCRJD<span class="literal">-8NW9H</span><span class="literal">-F2CDX</span><span class="literal">-CCM8D</span><span class="literal">-9D6T9</span></span><br></pre></td></tr></table></figure>
<p>部分 GVLK 列表</p>
<table>
<thead>
<tr>
<th style="text-align:center">GVLK</th>
<th style="text-align:left">系统版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TX9XD-98N7V-6WMQ6-BX7FG-H8Q99</td>
<td style="text-align:left">Windows 10 Home</td>
</tr>
<tr>
<td style="text-align:center">3KHY7-WNT83-DGQKR-F7HPR-844BM</td>
<td style="text-align:left">Windows 10 Home N</td>
</tr>
<tr>
<td style="text-align:center">7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH</td>
<td style="text-align:left">Windows 10 Home Single Language</td>
</tr>
<tr>
<td style="text-align:center">PVMJN-6DFY6-9CCP6-7BKTT-D3WVR</td>
<td style="text-align:left">Windows 10 Home Country Specific</td>
</tr>
<tr>
<td style="text-align:center">789NJ-TQK6T-6XTH8-J39CJ-J8D3P</td>
<td style="text-align:left">Windows 8.1 Professional with Media Center</td>
</tr>
<tr>
<td style="text-align:center">M9Q9P-WNJJT-6PXPY-DWX8H-6XWKK</td>
<td style="text-align:left">Windows 8.1 Core</td>
</tr>
<tr>
<td style="text-align:center">7B9N3-D94CG-YTVHR-QBPX3-RJP64</td>
<td style="text-align:left">Windows 8.1 Core N</td>
</tr>
<tr>
<td style="text-align:center">BB6NG-PQ82V-VRDPW-8XVD2-V8P66</td>
<td style="text-align:left">Windows 8.1 Core Single Language</td>
</tr>
<tr>
<td style="text-align:center">NCTT7-2RGK8-WMHRF-RY7YQ-JTXG3</td>
<td style="text-align:left">Windows 8.1 Core Country Specific</td>
</tr>
<tr>
<td style="text-align:center">GNBB8-YVD74-QJHX6-27H4K-8QHDG</td>
<td style="text-align:left">Windows 8 Professional with Media Center</td>
</tr>
<tr>
<td style="text-align:center">BN3D2-R7TKB-3YPBD-8DRP2-27GG4</td>
<td style="text-align:left">Windows 8 Core</td>
</tr>
<tr>
<td style="text-align:center">8N2M2-HWPGY-7PGT9-HGDD8-GVGGY</td>
<td style="text-align:left">Windows 8 Core N</td>
</tr>
<tr>
<td style="text-align:center">2WN2H-YGCQR-KFX6K-CD6TF-84YXQ</td>
<td style="text-align:left">Windows 8 Core Single Language</td>
</tr>
<tr>
<td style="text-align:center">4K36P-JN4VD-GDC6V-KDT89-DYFKP</td>
<td style="text-align:left">Windows 8 Core Country Specific</td>
</tr>
</tbody>
</table>
<p>更多 GVLK<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy1zZXJ2ZXIvZ2V0LXN0YXJ0ZWQva21zY2xpZW50a2V5cw==">点击这里<i class="fa fa-external-link-alt"></i></span>查看。</p>
<h4 id="配置使用-KMS-服务器">配置使用 KMS 服务器</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># slmgr /skms kms-server[:tcp-port]</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line">slmgr /skms kms.iszy.xyz:<span class="number">1688</span></span><br></pre></td></tr></table></figure>
<p>将 IP 换成你的 vlmscd 所在服务器即可。1688 是默认端口，如果之前是按照本文进行配置，此端口可以不写。</p>
<h4 id="进行激活">进行激活</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure>
<p>等待一会儿会看到激活成功的提示。</p>
<p>可以输入以下命令查看激活状态，一般显示<code>批量激活将于 xxxx/x/x xx:xx:xx 过期</code>，一般是 180 天或 45 天的有效期。过期后，如果 KMS 服务器还在，会自动续期的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">slmgr /xpr</span><br></pre></td></tr></table></figure>
<h3 id="激活-Office">激活 Office</h3>
<p>你需要安装 Vol 版 Office 才能使用 KMS。可以去<span class="exturl" data-url="aHR0cHM6Ly9tc2RuLml0ZWxseW91LmNuLw==">MSDN<i class="fa fa-external-link-alt"></i></span>上找一找，一般 Vol 版的文件都带 VL，文件名一般以 SW 开头。</p>
<h4 id="配置-GVLK-2">配置 GVLK</h4>
<p>同样，没装过 key 的，一般可以忽略此步。</p>
<p>将以下命令中的 Key 替换成对应软件版本的 Key。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> exist <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office14\ospp.vbs&quot;</span> (<span class="built_in">cd</span> <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office14&quot;</span>) <span class="keyword">else</span> (<span class="built_in">cd</span> <span class="string">&quot;c:\Program Files\Microsoft Office\Office14&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> exist <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office15\ospp.vbs&quot;</span> (<span class="built_in">cd</span> <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office15&quot;</span>) <span class="keyword">else</span> (<span class="built_in">cd</span> <span class="string">&quot;c:\Program Files\Microsoft Office\Office15&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> exist <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office16\ospp.vbs&quot;</span> (<span class="built_in">cd</span> <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office16&quot;</span>) <span class="keyword">else</span> (<span class="built_in">cd</span> <span class="string">&quot;c:\Program Files\Microsoft Office\Office16&quot;</span>)</span><br><span class="line"><span class="comment"># cscript ospp.vbs /inpkey:GVLK</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line">cscript ospp.vbs /inpkey:YC7DK<span class="literal">-G2NP3</span><span class="literal">-2QQC3</span><span class="literal">-J6H88</span><span class="literal">-GVGXT</span></span><br></pre></td></tr></table></figure>
<p>部分 GVLK 列表</p>
<table>
<thead>
<tr>
<th style="text-align:center">GVLK</th>
<th style="text-align:left">软件版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</td>
<td style="text-align:left">Office Professional Plus 2019</td>
</tr>
<tr>
<td style="text-align:center">6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK</td>
<td style="text-align:left">Office Standard 2019</td>
</tr>
<tr>
<td style="text-align:center">B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B</td>
<td style="text-align:left">Project Professional 2019</td>
</tr>
<tr>
<td style="text-align:center">C4F7P-NCP8C-6CQPT-MQHV9-JXD2M</td>
<td style="text-align:left">Project Standard 2019</td>
</tr>
<tr>
<td style="text-align:center">9BGNQ-K37YR-RQHF2-38RQ3-7VCBB</td>
<td style="text-align:left">Visio Professional 2019</td>
</tr>
<tr>
<td style="text-align:center">7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2</td>
<td style="text-align:left">Visio Standard 2019</td>
</tr>
<tr>
<td style="text-align:center">XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</td>
<td style="text-align:left">Office Professional Plus 2016</td>
</tr>
<tr>
<td style="text-align:center">JNRGM-WHDWX-FJJG3-K47QV-DRTFM</td>
<td style="text-align:left">Office Standard 2016</td>
</tr>
<tr>
<td style="text-align:center">YG9NW-3K39V-2T3HJ-93F3Q-G83KT</td>
<td style="text-align:left">Project Professional 2016</td>
</tr>
<tr>
<td style="text-align:center">GNFHQ-F6YQM-KQDGJ-327XX-KQBVC</td>
<td style="text-align:left">Project Standard 2016</td>
</tr>
<tr>
<td style="text-align:center">PD3PC-RHNGV-FXJ29-8JK7D-RJRJK</td>
<td style="text-align:left">Visio Professional 2016</td>
</tr>
<tr>
<td style="text-align:center">7WHWN-4T7MP-G96JF-G33KR-W8GF4</td>
<td style="text-align:left">Visio Standard 2016</td>
</tr>
</tbody>
</table>
<p>更多 GVLK<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vRGVwbG95T2ZmaWNlL3ZsYWN0aXZhdGlvbi9ndmxrcw==">点击这里<i class="fa fa-external-link-alt"></i></span>查看。</p>
<h4 id="配置使用-KMS-服务器-2">配置使用 KMS 服务器</h4>
<p>将 IP 换成你的 vlmscd 所在服务器即可。1688 是默认端口，如果之前是按照本文进行配置，第二条命令可以不写。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cscript ospp.vbs /sethst:kms-server</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line">cscript ospp.vbs /sethst:kms.iszy.xyz</span><br><span class="line"><span class="comment"># cscript ospp.vbs /setprt:tcp-port</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line">cscript ospp.vbs /setprt:<span class="number">1688</span></span><br></pre></td></tr></table></figure>
<h4 id="进行激活-2">进行激活</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cscript ospp.vbs /act</span><br></pre></td></tr></table></figure>
<p>等一会儿会显示激活成功。</p>
<p>可以输入以下命令查看激活状态，一般是 180 天或 45 天的有效期。过期后，如果 KMS 服务器还在，会自动续期的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cscript ospp.vbs /dstatus</span><br></pre></td></tr></table></figure>
<h2 id="后话">后话</h2>
<p>到此，自建 KMS 到激活都介绍完了，按照本文介绍应该已经正常激活了，享受你的软件吧。如果 KMS 服务器出现问题，180 天应该早就解决了吧。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
        <tag>KMS</tag>
      </tags>
  </entry>
  <entry>
    <title>自建短域名服务——Polr</title>
    <url>/posts/short-url/</url>
    <content><![CDATA[<p>也曾想过自己写一个短域名服务，毕竟原理还是相当简单的。但是前端是真的难搞，我是真的玩不来。既然已经有造好的轮子，干嘛还自己造，是吧。这个 Polr 就是一个非常好用的短域名服务，功能也比较完善。在这里记录一下部署的过程。最近折腾 docker，这玩意在 docker 中表现挺诡异的，我准备切换成现有的 yourls 的 docker 了。</p>
<span id="more"></span>
<h2 id="程序依赖">程序依赖</h2>
<ul>
<li>Apache, nginx, IIS, or lighttpd (Apache preferred)</li>
<li>PHP &gt;= 5.5.9</li>
<li>MariaDB or MySQL &gt;= 5.5, SQLite alternatively</li>
<li>composer</li>
<li>PHP requirements:
<ul>
<li>OpenSSL PHP Extension</li>
<li>PDO PHP Extension</li>
<li>PDO MySQL Driver (php5-mysql on Debian &amp; Ubuntu, php5x-pdo_mysql on FreeBSD)</li>
<li>Mbstring PHP Extension</li>
<li>Tokenizer PHP Extension</li>
<li>JSON PHP Extension</li>
<li>PHP curl extension</li>
</ul>
</li>
</ul>
<h2 id="本人使用环境">本人使用环境</h2>
<ul>
<li>Ubuntu 18.04 LTS</li>
<li>Nginx 1.14.0</li>
<li>PHP 5.6.36</li>
<li>Mysql 8.0.11</li>
<li>Composer 1.7.1</li>
</ul>
<h2 id="环境安装">环境安装</h2>
<h3 id="LNMP">LNMP</h3>
<p>我使用的是军哥的 LNMP 一键脚本，点击<span class="exturl" data-url="aHR0cHM6Ly9sbm1wLm9yZy8=">这里<i class="fa fa-external-link-alt"></i></span>前往官网。</p>
<h3 id="Composer">Composer</h3>
<p>Composer 的安装，我在之前的文章已经叙述过了。请参考：<a href="https://www.iszy.cc/2018/08/09/use-composer/">Ubuntu 安装使用 Composer</a>。</p>
<h2 id="下载源代码">下载源代码</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su #使用 root 权限</span><br><span class="line">cd /home/wwwroot</span><br><span class="line">git clone https://github.com/cydrobolt/polr.git --depth=1</span><br><span class="line">chmod -R 755 polr</span><br><span class="line">chown -R www:www polr</span><br></pre></td></tr></table></figure>
<h2 id="通过-composer-安装依赖">通过 composer 安装依赖</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd polr</span><br><span class="line">composer install --no-dev -o</span><br></pre></td></tr></table></figure>
<h2 id="配置虚拟主机">配置虚拟主机</h2>
<p>以 nginx 为例，以下是官方配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Upstream to abstract backend connection(s) <span class="keyword">for</span> php</span></span><br><span class="line">upstream php &#123;</span><br><span class="line">    server unix:/var/run/php-fpm.sock;</span><br><span class="line">    server 127.0.0.1:9000;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> HTTP</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       *:80;</span><br><span class="line">    root         /home/wwwroot/polr/public;</span><br><span class="line">    index        index.php index.html index.htm;</span><br><span class="line">    server_name  example.com; # Or whatever you want to use</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>; <span class="comment"># Forces HTTPS, which enables privacy for login credentials.</span></span></span><br><span class="line">                                                 # Recommended for public, internet-facing, websites.</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">            try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">            # rewrite ^/([a-zA-Z0-9]+)/?$ /index.php?$1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">            try_files $uri =404;</span><br><span class="line">            include /etc/nginx/fastcgi_params;</span><br><span class="line"></span><br><span class="line">            fastcgi_pass    php;</span><br><span class="line">            fastcgi_index   index.php;</span><br><span class="line">            fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">            fastcgi_param   HTTP_HOST       $server_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> HTTPS</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">server &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   listen              *:443 ssl;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   ssl_certificate     /etc/ssl/my.crt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   ssl_certificate_key /etc/ssl/private/my.key;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   root                /home/wwwroot/polr/public;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   index index.php index.html index.htm;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   server_name         example.com;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#   location / &#123;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">           try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php$is_args<span class="variable">$args</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">           <span class="comment"># rewrite ^/([a-zA-Z0-9]+)/?$ /index.php?$1;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#   location ~ \.php$ &#123;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">           try_files <span class="variable">$uri</span> =404;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">           include /etc/nginx/fastcgi_params;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#           fastcgi_pass    php;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">           fastcgi_index   index.php;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">           fastcgi_param   SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">           fastcgi_param   HTTP_HOST       <span class="variable">$server_name</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建数据库">创建数据库</h2>
<p>登入 mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>创建数据库，名字任取，安装时会用到。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE polrdb;</span><br></pre></td></tr></table></figure>
<p>退出 mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<h2 id="进行安装">进行安装</h2>
<p>复制初始<code>.env</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp .env.setup .env</span><br></pre></td></tr></table></figure>
<p>访问<code>http://你设定的地址/setup/</code>即可进行安装，网页上都有详细解释，就不在这里多说了。</p>
<p>需要注意的是，当安装完成后，只能在<code>polr</code>文件夹中的<code>.env</code>文件修改设置。你将无法再次访问安装页面。</p>
<h2 id="例子">例子</h2>
<p><s>我个人部署的短域名服务：<span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS5jYw==">ISZY Short URL<i class="fa fa-external-link-alt"></i></span>。有需要的可以使用。</s></p>
<p><img data-src="https://img.iszy.xyz/20190318220031.png" alt=""></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>短域名</tag>
      </tags>
  </entry>
  <entry>
    <title>超好用的chrome浏览器增强插件</title>
    <url>/posts/shuax-greenchrome/</url>
    <content><![CDATA[<p>今天来分享一下一个超好用的 chrome 浏览器增强插件，让 chrome 更加符合国人的使用习惯。</p>
<span id="more"></span>
<h2 id="需求">需求</h2>
<p>许多朋友都喜欢 chrome 的简洁、纯净，没有国产套壳浏览器的杂乱、流氓。但是 chrome 的纯净又带来了另一个问题，缺失了许多适应国人使用习惯的常见功能，需要通过扩展插件来实现。而且其实也不太容易找到一个优秀的扩展插件，毕竟在谷歌被 404 的情况下，国人大多还是在使用国内 chromium 内核的浏览器，没有这样的需求。</p>
<p>我一直以来都是使用 chrome 浏览器的，毕竟有条件直接使用谷歌的情况下，chrome 套件用着还是非常舒服的，但是 chrome 没有双击关闭浏览器标签和关闭最后一个标签直接关闭浏览器不太符合我的使用习惯，一直不是很让我满意。你可以说这些都是没有必要的，适应一下就行。比如，可以使用鼠标中键关闭标签这个所有浏览器通用的方法，但是我鼠标中键比较硬，用起来就是没有双击关闭舒服。</p>
<p>当然，我也是不愿意为了这些妥协去用国内的那些流氓浏览器，现在有能够给 chrome 加上这些功能的简单方法，那自然是极好的。</p>
<h2 id="简介">简介</h2>
<p>这是一个超好用的 chrome 浏览器增强插件，让 chrome 更加符合国人的使用习惯。</p>
<p>官网链接：<span class="exturl" data-url="aHR0cHM6Ly9zaHVheC5jb20vcG9ydGZvbGlvL2dyZWVuY2hyb21lLw==">点击访问<i class="fa fa-external-link-alt"></i></span></p>
<p>GreenChrome 插件直接下载地址：<span class="exturl" data-url="aHR0cHM6Ly9zaHVheC5jb20vZ2M=">点击下载<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20190318220055.png" alt=""></p>
<h3 id="安装">安装</h3>
<p>只需要将下载下来的压缩包解压，将其中对应版本的 dll 放置在<code>chrome.exe</code>同目录下即可。再次打开就已经安装成功。</p>
<h3 id="如何判断是否安装成功">如何判断是否安装成功</h3>
<p>如果安装成功，打开设置页面的侧边栏，可以看到<code>设置GreenChrome</code>选项。</p>
<p><img data-src="https://img.iszy.xyz/20190318220120.png" alt=""></p>
<p>在关于页面，也应该能够看到 GreenChrome 的标记。</p>
<p><img data-src="https://img.iszy.xyz/20190318220132.png" alt=""></p>
<h2 id="功能">功能</h2>
<p>以下功能均可在设置页面自行开关，一般情况下，默认即可。</p>
<h3 id="界面增强">界面增强</h3>
<ul>
<li>双击关闭标签</li>
<li>右键关闭标签页</li>
<li>保留最后标签</li>
<li>悬停快速标签切换</li>
</ul>
<h3 id="功能增强">功能增强</h3>
<ul>
<li>追加 Chrome 运行参数</li>
<li>启动时运行程序</li>
<li>老板键</li>
<li>空白新标签页</li>
</ul>
<h3 id="鼠标手势">鼠标手势</h3>
<ul>
<li>支持任意形状</li>
<li>支持自定义功能</li>
<li>丰富的设置</li>
<li>灵敏度可调节</li>
</ul>
<h3 id="更多功能">更多功能</h3>
<ul>
<li>便携化绿色版</li>
<li>内置 hosts</li>
<li>完美支持 32 位，64 位</li>
<li>按键转换</li>
</ul>
<h2 id="设置">设置</h2>
<h3 id="进入设置">进入设置</h3>
<p>可以通过如下位置进入设置。</p>
<p><img data-src="https://img.iszy.xyz/20190318220144.png" alt=""></p>
<p>如果老版本 chrome 没有出现设置选项，还可以直接点击以下链接进行设置。</p>
<p>设置链接：<span class="exturl" data-url="aHR0cDovL3NldHRpbmdzLnNodWF4LmNvbS9nYy8=">settings.shuax.com/gc/<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="设置界面">设置界面</h3>
<p><img data-src="https://img.iszy.xyz/20190318220157.png?x-oss-process=style/big" alt=""></p>
<h3 id="我的设置">我的设置</h3>
<p>对我来说，以下功能比较有用。</p>
<ul>
<li>双击关闭标签页</li>
<li>防止关闭最后的标签时关闭整个浏览器</li>
<li>新标签打开书签</li>
</ul>
<p>其他高级功能，请看官们自行探索。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Chrome插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署Spark集群记录</title>
    <url>/posts/spark-cluster-setup/</url>
    <content><![CDATA[<p>今天记录一下，在 Ubuntu 14.04 上部署 Spark 集群的过程。</p>
<span id="more"></span>
<h2 id="前期准备">前期准备</h2>
<h3 id="系统及软件版本说明">系统及软件版本说明</h3>
<p>本章操作中所使用的相关操作系统及软件版本如下：</p>
<table>
<thead>
<tr>
<th>软件</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>操作系统</td>
<td>Ubuntu 14.04.1</td>
</tr>
<tr>
<td>JDK</td>
<td>1.8.0</td>
</tr>
<tr>
<td>Hadoop</td>
<td>2.7.3</td>
</tr>
<tr>
<td>Spark</td>
<td>2.2.0</td>
</tr>
</tbody>
</table>
<h3 id="JDK-安装">JDK 安装</h3>
<p>集群中每台机器都需要安装 JDK，步骤如下：</p>
<ol>
<li>
<p>上传<code>jdk-8u191-linux-x64.tar.gz</code>到<code>/opt</code>目录并解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u191-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将 JDK 环境变量配置到/etc/profile 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=/opt/jdk1.8.0_191&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JRE_HOME=/opt/jdk1.8.0_191/jre&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="网络配置">网络配置</h3>
<p>如有三台机器，分别命名为 master、slave1、slave2。那么我们就分别修改各自机器上<code>/etc/hostname</code>文件中的机器名为上述名称。<br>
修改每台机器的/etc/hosts 文件，添加上述三对网络 IP 和机器名的对应：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">192.168.1.2     master</span><br><span class="line">192.168.1.3     slave1</span><br><span class="line">192.168.1.4     slave2</span><br></pre></td></tr></table></figure>
<h3 id="SSH-免密登录配置">SSH 免密登录配置</h3>
<p>该操作是要让 master 节点可以无密码 SSH 登陆到各个 slave 节点上。</p>
<ol>
<li>
<p>首先生成 master 节点的公钥，在 master 节点的终端中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>多次回车完成 ssh 密钥对创建</p>
</li>
<li>
<p>在各节点上将该公钥加入授权</p>
<p>将公钥加入 master 本机授权，master 节点上执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>完成后执行 <code>ssh master</code> 验证一下（可能需要输入 <code>yes</code>，成功后执行 <code>exit</code> 返回原来的终端）</p>
<p>接着在 master 节点将上公匙分发到 slave1 和 slave2 节点，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@slave1:/root</span><br><span class="line">scp ~/.ssh/id_rsa.pub root@slave2:/root</span><br></pre></td></tr></table></figure>
<p>接着分别在 slave1 和 slave2 节点上，将 ssh 公匙加入授权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>这样，在 master 节点上就可以无密码 ssh 登录到各个 slave 节点了，在 master 节点上执行 <code>ssh slave1</code> 和 <code>ssh slave2</code> 命令进行检验。</p>
</li>
</ol>
<h2 id="Hadoop-集群部署">Hadoop 集群部署</h2>
<p>Spark 配置前需要部署 Hadoop 集群，这个在<a href="/2019/12/01/hadoop-cluster-setup/">上一篇文章</a>里讲过，可以前往查看。</p>
<h2 id="Spark-集群部署">Spark 集群部署</h2>
<h3 id="安装及配置">安装及配置</h3>
<ol>
<li>
<p>上传 <code>spark-2.2.0-bin-hadoop2.7.tgz</code> 到 <code>/opt</code> 目录并解压。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf spark-2.2.0-bin-hadoop2.7.tgz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将 Spark 环境变量配置到<code>/etc/profile</code>中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export SPARK_HOME=/opt/spark-2.2.0-bin-hadoop2.7&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$SPARK_HOME/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编辑<code>spark-env.sh</code>文件</p>
<p>复制 <code>spark-env.sh.template</code> 并重命名为 <code>spark-env.sh</code>，编辑<code>spark-env.sh</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /opt/spark-2.2.0-bin-hadoop2.7/conf/spark-env.sh.template /opt/spark-2.2.0-bin-hadoop2.7/conf/spark-env.sh</span><br><span class="line">vi /opt/spark-2.2.0-bin-hadoop2.7/conf/spark-env.sh</span><br></pre></td></tr></table></figure>
<p>添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_191</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_IP=192.168.2.76</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_MEMORY=4g</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/hadoop-2.7.3</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/opt/hadoop-2.7.3/etc/hadoop</span><br></pre></td></tr></table></figure>
<ul>
<li><code>SPARK_MASTER_IP</code>为 master 节点 IP</li>
<li><code>SPARK_WORKER_MEMORY</code>可根据实际情况调整</li>
</ul>
</li>
<li>
<p>编辑<code>slaves</code>文件</p>
<p>复制 <code>slaves.template</code> 并重命名为 <code>slaves</code>，编辑<code>slaves</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /opt/spark-2.2.0-bin-hadoop2.7/conf/slaves.template /opt/spark-2.2.0-bin-hadoop2.7/conf/slaves</span><br><span class="line">vi /opt/spark-2.2.0-bin-hadoop2.7/conf/slaves</span><br></pre></td></tr></table></figure>
<p>内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>文件配置分发</p>
<p>至此，master 上的 spark 配置已经结束，需将<code>/etc/profile</code>、<code>/opt/spark-2.2.0-bin-hadoop2.7</code>通过 scp 分发至至 slave1、slave2，重新编译 <code>/etc/profile</code> 使生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /etc/profile root@slave1:/etc/profile</span><br><span class="line">scp /etc/profile root@slave2:/etc/profile</span><br><span class="line">scp -r /opt/spark-2.2.0-bin-hadoop2.7 root@slave1:/opt/spark-2.2.0-bin-hadoop2.7</span><br><span class="line">scp -r /opt/spark-2.2.0-bin-hadoop2.7 root@slave2:/opt/spark-2.2.0-bin-hadoop2.7</span><br></pre></td></tr></table></figure>
<p>分别登录 slave1 和 slave2 执行<code>source /etc/profile</code></p>
</li>
</ol>
<h3 id="启动及验证">启动及验证</h3>
<ol>
<li>
<p>启动 Spark</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/spark-2.2.0-bin-hadoop2.7/start-all.sh</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>验证</p>
<p>浏览器访问 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4yOjgwODAv">http://192.168.1.2:8080/<i class="fa fa-external-link-alt"></i></span> (master 节点 IP)，查看 Spark 集群配置及运行情况</p>
</li>
</ol>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Spark</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>机场测速集合</title>
    <url>//page/speed-test-collection/</url>
    <content><![CDATA[<p>这里仅包含我手上保留有套餐或是官方提供的机场测速图，仅供参考。</p>
<span id="more"></span>
<p><strong>注</strong>: 冬奥会期间，可能会有网络不稳定的情况，属于正常情况，商家会尽力减小影响。</p>
<h2 id="FreeWhale-自由鲸">FreeWhale 自由鲸</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZnJlZXdoYWxl">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><strong>SSR 线路测速</strong>（建议使用）</p>
<p>2022-02-09</p>
<p><img data-src="https://img.iszy.xyz/1644422177121.png?x-oss-process=style/big" alt="SSR线路"></p>
<h2 id="CMYNetwork-红莓网络">CMYNetwork 红莓网络</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovY215bmV0d29yaw==">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p>2022-02-10</p>
<p><img data-src="https://img.iszy.xyz/1644451579496.png?x-oss-process=style/big" alt=""></p>
<h2 id="MEET">MEET</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZnNwZWVk">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p>2022-02-09</p>
<p><img data-src="https://img.iszy.xyz/1644413860231.png?x-oss-process=style/big" alt=""></p>
<h2 id="DuangCloud">DuangCloud</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZHVhbmdjbG91ZA==">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20200502214205.png?x-oss-process=style/big" alt=""></p>
<h2 id="ByWave">ByWave</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovYnl3YXZl">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20200815171242.png?x-oss-process=style/big" alt=""></p>
<h2 id="Blinkload">Blinkload</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovYmxpbmtsb2Fk">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20210112210447.png?x-oss-process=style/big" alt=""></p>
<!--
## 闲鱼网络

[官网传送门](https://url.iszy.xyz/dinastio)

2021-12-18

![](https://img.iszy.xyz/1639797582174.png?x-oss-process=style/big) -->
<h2 id="Gatern">Gatern</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZ2F0ZXJu">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20210409220158.png?x-oss-process=style/big" alt=""></p>
<h2 id="WavesLink">WavesLink</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovd2F2ZXNsaW5r">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p>2022-03-10</p>
<p><img data-src="https://img.iszy.xyz/1646909047894.png?x-oss-process=style/big" alt=""></p>
<h2 id="BESTIEPL">BESTIEPL</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly91cmwuaXN6eS54eXovZWxlY3RyeQ==">官网传送门<i class="fa fa-external-link-alt"></i></span></p>
<p>2022-03-10</p>
<p><img data-src="https://img.iszy.xyz/1646910975056.png?x-oss-process=style/big" alt=""></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
        <tag>测速</tag>
      </tags>
  </entry>
  <entry>
    <title>最新Telegram关闭敏感内容过滤方法</title>
    <url>/posts/telegram-sensitive-content/</url>
    <content><![CDATA[<p>分享一下最新的官方 Telegram 关闭敏感内容过滤的方法。</p>
<span id="more"></span>
<h2 id="原由">原由</h2>
<p>为啥在 iOS 上的 Telegram 会有这种敏感内容过滤呢，自然是苹果喜欢多管闲事，限制在苹果设备上的社交 App 中的敏感内容。本来吧，这也是件好事，不过吧，一来，除了 iOS 其他设备都不存在过滤，用户用着就不平衡了；二来，这个 Telegram 的判定机制和申诉的途径比较坑爹，Telegram 中又有一堆喜欢在各种群里面发广告，奇怪图片的机器人，害得一群讨论正常内容的群组在 iOS 上无法进入，且是否能够解封全凭运气，体验极差。</p>
<p>现在 Telegram 官方曲线救国，在其他客户端，比如桌面端，提供了关闭敏感内容过滤的开关。</p>
<blockquote>
<p>想要无障碍地体验流畅不卡顿的 Telegram，可以了解一下优质的网络加速服务。【<a href="/page/bgfw/">优质机场(SS/SSR/Trojan/V2Ray/专线)推荐</a>】</p>
</blockquote>
<h2 id="方法">方法</h2>
<p>首先呢，开关在移动端的 App 里是看不到的，可以在网页端或桌面端进行关闭。</p>
<p>如果根据步骤找不到开关，建议检查下 Telegram 版本。</p>
<h3 id="网页端">网页端</h3>
<p>地址: <span class="exturl" data-url="aHR0cHM6Ly93ZWIudGVsZWdyYW0ub3JnL2sv">Telegram Web<i class="fa fa-external-link-alt"></i></span></p>
<p>当前版本 Telegram WebK alpha 0.6.2</p>
<p>步骤:</p>
<ol>
<li>
<p>点击菜单中的 <code>Settings</code> 打开设置</p>
<p><img data-src="https://img.iszy.xyz/20210802093233.png" alt="Settings"></p>
</li>
<li>
<p>点击 <code>Privacy and Security</code></p>
<p><img data-src="https://img.iszy.xyz/20210802093803.png" alt="Privacy and Security"></p>
</li>
<li>
<p>打开 <code>Disable filtering</code> 开关</p>
<p><img data-src="https://img.iszy.xyz/20210802093917.png" alt="Disable filtering"></p>
</li>
<li>
<p>关闭 Telegram iOS 端，重新打开，你将看到原本被过滤的群组已经可以正常进入了</p>
</li>
</ol>
<h3 id="桌面端">桌面端</h3>
<p>步骤：</p>
<ol>
<li>
<p>打开 Telegram 桌面端，登录你需要关闭敏感内容过滤的账号</p>
</li>
<li>
<p>打开菜单</p>
<p><img data-src="https://img.iszy.xyz/20210620194729.png" alt="菜单位置"></p>
</li>
<li>
<p>打开 <code>Settings</code> - <code>Privacy and Security</code> - <code>Sensitive Content</code></p>
<p><img data-src="https://img.iszy.xyz/20210620194935.png" alt="Settings"></p>
<p><img data-src="https://img.iszy.xyz/20210620195102.png" alt="Privacy and Security"></p>
</li>
<li>
<p>打开 <code>Disable filtering</code> 开关</p>
<p><img data-src="https://img.iszy.xyz/20210620195246.png" alt="Disable filtering"></p>
</li>
<li>
<p>关闭 Telegram iOS 端，重新打开，你将看到原本被过滤的群组已经可以正常进入了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Telegram</tag>
        <tag>iOS</tag>
        <tag>Nicegram</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Telegram机器人管理ASF</title>
    <url>/posts/tgbot-asf/</url>
    <content><![CDATA[<p>个人比较喜欢 Node.js，最近用 Node.js 弄了个简单的 Telegram 机器人用于管理 ASF，即 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1c3RBcmNoaU5FVC9BcmNoaVN0ZWFtRmFybQ==">ArchiSteamFarm<i class="fa fa-external-link-alt"></i></span>。现在我把代码放 GitHub 上面，有需要的可以尝试一下。</p>
<span id="more"></span>
<h2 id="准备信息">准备信息</h2>
<h3 id="创建-Telegram-机器人">创建 Telegram 机器人</h3>
<p>在 Telegram 里，搜索 @BotFather 机器人并启用。</p>
<p>发送以下命令：</p>
<ol>
<li>创建机器人：<code>/newbot</code></li>
<li>设定 bot 名称：<code>ASF</code>(任取，可重复，这里只是个例子)</li>
<li>设定 bot 用户名：<code>test_asf_bot</code>(任取，不可重复，这里只是个例子)</li>
</ol>
<p><code>@BotFather</code> 会发给你一串 token，形如 <code>987654321:XXXXXX-XXXXXXXXXX</code>，注意保留。</p>
<h3 id="查询-Chat-ID">查询 Chat ID</h3>
<p>在 Telegram 里，搜索 <code>@FalconGate_Bot</code> 机器人并启用。</p>
<p>发送命令：<code>/get_my_id</code></p>
<p><code>@FalconGate_Bot</code> 会发给你一串数字，即是你的 Chat ID。</p>
<h2 id="下载文件">下载文件</h2>
<p>项目地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL25vZGUtYXNmLWJvdA==">node-asf-bot<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ZvonimirSun/node-asf-bot.git</span><br><span class="line"><span class="built_in">cd</span> node-asf-bot</span><br></pre></td></tr></table></figure>
<h2 id="运行">运行</h2>
<h3 id="直接运行">直接运行</h3>
<h4 id="依赖">依赖</h4>
<ul>
<li>Node.js</li>
<li>ASF IPC</li>
</ul>
<h4 id="修改配置">修改配置</h4>
<p>配置环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The API token of your Telegram bot</span></span><br><span class="line"><span class="built_in">export</span> TELEGRAM_TOKEN=987654321:XXXXXX-XXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line"><span class="comment"># Your Telegram number ID (not the username)</span></span><br><span class="line"><span class="built_in">export</span> ADMIN_ID=123456789</span><br><span class="line"><span class="comment"># ASF IPC address</span></span><br><span class="line"><span class="built_in">export</span> IPC_ADDR=http://127.0.0.1:1242/</span><br><span class="line"><span class="comment"># ASF IPC password</span></span><br><span class="line"><span class="built_in">export</span> IPC_PASS=PASSWORD</span><br></pre></td></tr></table></figure>
<h3 id="启动">启动</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>
<h2 id="Docker">Docker</h2>
<h3 id="依赖-2">依赖</h3>
<ul>
<li>docker-ce</li>
<li>docker-compose</li>
<li>ASF IPC</li>
</ul>
<h3 id="修改配置-2">修改配置</h3>
<p>修改<code>docker-compose.yml</code>文件配置环境变量。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">TELEGRAM_TOKEN=987654321:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ADMIN_ID=123456789</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IPC_ADDR=http://127.0.0.1:1242</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IPC_PASS=password</span></span><br></pre></td></tr></table></figure>
<p>将对应配置项替换。</p>
<h3 id="启动-2">启动</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="Webhooks-方式运行-选">Webhooks 方式运行(选)</h2>
<p>在上面的环境变量或<code>docker-compose.yml</code>中添加<code>URL</code>配置项，即可转为 Webhooks 方式运行，比 polling 方式响应更及时。</p>
<p>注意，此种方式，必须拥有自己的域名，且必须采用 https，不支持<code>SSL V2/V3</code>等过旧的协议，推荐采用<code>TLS V1.2</code>。</p>
<h3 id="配置应用">配置应用</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> URL=https://asfbot.example.com</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">URL=https://asfbot.example.com</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-Nginx">配置 Nginx</h3>
<p>Nginx 反代 3000 端口，部分配置示例如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:3000;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header X_FORWARDED_PROTO https;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>ASF</tag>
        <tag>Node.js</tag>
        <tag>Telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL两句话生成自签名证书</title>
    <url>/posts/u62i8r/</url>
    <content><![CDATA[<p>今天需要生成一个自签名证书，记录下。</p>
<span id="more"></span>
<h2 id="需求">需求</h2>
<p>今天，我需要给微服务统一添加一个自签名证书，按照最简单的方式生成了一个证书。不过现在这个证书在验证时会报<code>No subject alternative names present</code>错误，虽然可以通过代码绕过，但是正式环境不太推荐，所以还是在创建证书的环节解决。</p>
<p>我们查看一个一般的网站证书，可以看到现在的证书都有使用者可选名称，而使用 OpenSSL 的默认参数生成的自签名证书是没有这一条的，而 SSL 验证较为严格的地方就会报上面的错误。</p>
<p><img data-src="https://img.iszy.xyz/20210309172353.png" alt=""></p>
<h2 id="两句话生成自签名证书">两句话生成自签名证书</h2>
<ol>
<li>
<p>先用 openssl req 生成证书请求，会顺带生成私钥。接下来会输入一系列信息，<code>Common Name</code>为必填参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -nodes -new -keyout server.key -out server.csr</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li><code>-nodes</code>， 密钥文件不加密。不加此参数会要求 “Enter PEM pass phrase：”</li>
<li><code>-keyout</code>，密钥生成路径</li>
<li><code>-out</code>，证书请求文件生成路径</li>
</ol>
</blockquote>
<p><img data-src="https://img.iszy.xyz/20210309173008.png" alt=""></p>
</li>
<li>
<p>生成自签名证书，带上 SAN 扩展信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -sha256 -days 3650 -<span class="keyword">in</span> server.csr \</span><br><span class="line">-signkey server.key -out server.crt \</span><br><span class="line">-extfile &lt;(<span class="built_in">printf</span> <span class="string">&quot;subjectAltName=DNS:localhost,DNS:example.com,IP:192.168.1.1,IP:127.0.0.1&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li><code>-sha256</code>，使用的加密方法</li>
<li><code>-days</code>，证书有效期</li>
<li><code>-in</code>，证书请求文件路径</li>
<li><code>-signkey</code>，用于提供自签名时的私钥文件</li>
<li><code>-out</code>，证书生成路径</li>
<li><code>-extfile</code>，指定签名时包含要添加到证书中的扩展项的文件，自签名时候可以这样使用</li>
</ol>
</blockquote>
<p><img data-src="https://img.iszy.xyz/20210309173723.png?x-oss-process=style/big" alt=""></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
        <tag>自签名证书</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 16.04中安装Oracle Java 8</title>
    <url>/posts/ubuntu-oracle-java/</url>
    <content><![CDATA[<p>在此记录一下在 Ubuntu 16.04 中安装 Oracle Java 8 的过程。</p>
<span id="more"></span>
<h2 id="添加-Oracle-的-PPA">添加 Oracle 的 PPA</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img.iszy.xyz/20190318220829.png?x-oss-process=style/big" alt=""></p>
<h2 id="安装-Java-8">安装 Java 8</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install oracle-java8-installer -y</span><br></pre></td></tr></table></figure>
<p>如下图所示，将会跳出一个界面让你同意 Oracle 的 license，切换到 Yes 回车即可。</p>
<p><img data-src="https://img.iszy.xyz/20190318220840.png?x-oss-process=style/big" alt=""></p>
<h2 id="指定-Java-版本">指定 Java 版本</h2>
<p>一台服务器上可能会安装有多个 Java 版本，通过以下语句指定版本，选择想要的版本即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>
<h2 id="设定JAVA-HOME环境变量">设定<code>JAVA_HOME</code>环境变量</h2>
<p>打开存环境变量的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/environment</span><br></pre></td></tr></table></figure>
<p>在底部添加一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle&quot;</span><br></pre></td></tr></table></figure>
<p>应用环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/environment</span><br></pre></td></tr></table></figure>
<p>可以通过如下语句确认环境变量是否配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure>
<h2 id="后话">后话</h2>
<p>现在已经成功安装了 Oracle Java 8，尽情使用吧。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 16.04中安装php7.2</title>
    <url>/posts/ubuntu-php7dot2/</url>
    <content><![CDATA[<p>本文记录如何在 Ubuntu 16.04 中安装 php-7.2。</p>
<span id="more"></span>
<h2 id="添加-PPA-源">添加 PPA 源</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install software-properties-common python-software-properties</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php &amp;&amp; sudo apt update</span><br></pre></td></tr></table></figure>
<h2 id="安装-php7-2">安装 php7.2</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt -y install php7.2</span><br></pre></td></tr></table></figure>
<h2 id="安装-php-扩展">安装 php 扩展</h2>
<p>常用扩展</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install php7.2-fpm php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml php7.2-intl -y</span><br></pre></td></tr></table></figure>
<p>更多需要的扩展，请自行搜索。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Github自建图床的几种方式</title>
    <url>/posts/ufjg58/</url>
    <content><![CDATA[<p>本文我来简单讲一下利用 Github 自建图床的几种方式，希望能对大家有些帮助。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>本来我是在自己服务器上搭的图床，套上 cdn，使用体验挺好。为什么想到用 Github 来自建图床呢，主要是考虑到以下几个方面。</p>
<ol>
<li>首先，Github 有着免费的存储空间，不用占据自己的硬盘。当然，虽然官方对 repo 没有磁盘限制，但是推荐在 1GB 以下，超过 1GB 会有邮件通知。上传超过 50M 的单个文件会 warning，无法上传超过 100M 的单个文件。不过，对于我这样用于博客图床的，图片容量不会很大，其实已经很够用了。</li>
<li>其次，我使用 Github 主要是出于版本管理和迁移成本的考虑。由于图片放在 Github 上，当我想要迁移到其他地方，只需要简单的 git clone 以下即可，想要回退版本，防止误操作也很方便。</li>
<li>此外，Github 使用人数很多，所以各种基于 Github 的工具和使用案例很多，不会给自己增添麻烦。比如 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dv">PicGo<i class="fa fa-external-link-alt"></i></span>，一个用于快速上传图片并获取图片 URL 链接的工具，其中就支持 Github，也可以自定义链接，很好用。</li>
</ol>
<p>这么来看，Github 是一个很好的图床承载工具。</p>
<h2 id="准备条件">准备条件</h2>
<h3 id="建立-Repo">建立 Repo</h3>
<p>我们要用 Github 做图床，首先建个 Repo 应该不难理解吧，这个就是你用来存储图片的仓库了。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25ldw==">点击前往<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20200505113214.png?x-oss-process=style/big" alt=""></p>
<p>点击 Create repository，这个仓库就建好了。</p>
<p><img data-src="https://img.iszy.xyz/20200505113547.png?x-oss-process=style/big" alt=""></p>
<p>比如我这里建立了一个名为 img-hosting 的仓库作为示例，链接形如</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1p2b25pbWlyU3VuL2ltZy1ob3N0aW5n">https://github.com/ZvonimirSun/img-hosting<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="上传工具">上传工具</h3>
<p>既然要用 GitHub 作为图床，如果没有一个方便的上传图片的方式，用起来就很难受了。这边推荐下我主要在用的工具，也就是我前面提到的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dv">PicGo<i class="fa fa-external-link-alt"></i></span>，文档比较完善，我这边就不再细说，大家可以直接看下官方说明，配置很简单的。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9waWNnby5naXRodWIuaW8vUGljR28tRG9jL3poL2d1aWRlL2NvbmZpZy5odG1sI2dpdGh1YiVFNSU5QiVCRSVFNSVCQSU4QQ==">传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://img.iszy.xyz/20200505114811.png" alt=""></p>
<p>通过设定自定义域名，就可以每次自动获取你需要的链接格式。</p>
<h2 id="获取图片链接方案">获取图片链接方案</h2>
<h3 id="直连方案">直连方案</h3>
<p>这个方案听着就很简单了，就是直接使用 Github 存储的直链，形如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/ZvonimirSun/my-img-hosting/master/20190317184116.png</span><br></pre></td></tr></table></figure>
<p>只要把链接里的 GitHub 用户名，和你的 repo 名替换即可。master 是分支名，一般没有特别设置都是这个，不用改动。最后跟上你的图片目录即可。</p>
<p>PicGo 中可以把自定义域名配置为<code>https://raw.githubusercontent.com/ZvonimirSun/my-img-hosting/master</code></p>
<p>有些人说要使用用 Github Pages，我是觉得没有必要的。一是因为 GitHub Pages 有 1GB 容量限制，二是因为 GitHub Pages 渲染页面比较容易失败，徒增麻烦。不过 Github Pages 可以配置自定义域名，有这个需求的可以尝试，在此我就不推荐了。</p>
<h3 id="公用-CDN-方案">公用 CDN 方案</h3>
<p>众所周知，GitHub 在国内因为某些不可描述之事使用体验不佳，用户在加载图片的时候会十分缓慢，这时候一个 CDN 就帮助很大了。</p>
<p>这不就巧了吗，jsDelivr 为开发者提供了免费公共 CDN 加速服务，其中就对 Github 进行了加速，只要通过 jsDelivr 的链接引用你的资源，就能获得 jsDelivr 全球 CDN 的加速效果。鉴于 jsDelivr 是在国内有节点的，使用体验就很好了。</p>
<p>使用方法很简单，jsDelivr 加速 GitHub 文件的链接格式如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/user/repo@version/file</span><br></pre></td></tr></table></figure>
<p>上面的示例就改成这样即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/ZvonimirSun/my-img-hosting@master/20190317184116.png</span><br></pre></td></tr></table></figure>
<p>PicGo 中可以把自定义域名配置为<code>https://cdn.jsdelivr.net/gh/ZvonimirSun/my-img-hosting@master</code></p>
<h3 id="Nginx-反代-CDN">Nginx 反代+CDN</h3>
<p>这个方案吧，感觉稍微有点憨。就是我想用自己的域名，正好我的 VPS 不缺流量，还有个百度云加速 CDN 可以用。于是我采用了 Nginx 反代 GitHub 直链，然后给我的域名套 CDN 的方式。</p>
<p>这是我的 Nginx 配置，大家可以参考下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        #listen [::]:80;</span><br><span class="line">        server_name img.iszy.xyz;</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line"></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">        #listen [::]:443 ssl http2;</span><br><span class="line">        server_name img.iszy.xyz;</span><br><span class="line"></span><br><span class="line">        include conf.d/iszyxyz-ssl.conf;</span><br><span class="line"></span><br><span class="line">        location ~ ^(.*)/$ &#123;</span><br><span class="line">            add_header Access-Control-Allow-Origin *;</span><br><span class="line">            add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">            add_header Access-Control-Allow-Headers &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line"></span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                return 204;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass https://raw.githubusercontent.com/ZvonimirSun/my-img-hosting/master/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>用标准方式升级Ubuntu内核并启用BBR</title>
    <url>/posts/update-kernel-enable-bbr/</url>
    <content><![CDATA[<p>Google 的 TCP BBR 拥塞控制算法能够有效地提高网速，根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上网速甚至可以提升好几个数量级。从 4.9 开始，Linux 内核已经用上了该算法，但是不少 VPS 的内核甚至还停留在 4.4，更不要说开启 BBR 了。这篇文章就来讲一下，在 Ubuntu 上如何以标准的方式优雅地升级系统内核，并开启 BBR。</p>
<span id="more"></span>
<h2 id="BBR">BBR</h2>
<h3 id="BBR-简介">BBR 简介</h3>
<blockquote>
<p>参考来源: <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVENQJUU2JThCJUE1JUU1JUExJTlFJUU2JThFJUE3JUU1JTg4JUI2I1RDUF9CQlI=">TCP 拥塞控制 - 维基百科，自由的百科全书<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>TCP BBR（Bottleneck Bandwidth and Round-trip propagation time）是由 Google 设计，于 2016 年发布的拥塞算法。该算法使用网络最近出站数据分组当时的最大带宽和往返时间来创建网络的显式模型。数据包传输的每个累积或选择性确认用于生成记录在数据包传输过程和确认返回期间的时间内所传送数据量的采样率。Google 在 YouTube 上应用该算法，将全球平均的 YouTube 网络吞吐量提高了 4%，在一些国家超过了 14%。BBR 之后移植入 Linux 内核 4.9 版本，并且对于 QUIC 可用。</p>
<h3 id="监测-BBR-是否开启">监测 BBR 是否开启</h3>
<p>在 VPS 上运行以下命令来返回可用的 TCP 拥塞控制算法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>
<p>如果返回的内容中没有 bbr 字样，比如类似以下的内容，则不能开启。反之，则可以开启，直接跳到后文启用 BBR 部分即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = reno cubic</span><br></pre></td></tr></table></figure>
<p>在 VPS 上运行以下命令来返回现在正在使用的 TCP 拥塞控制算法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>
<p>如果返回的内容中没有 bbr 字样，比如类似以下的内容，则表示未开启 BBR。反之，则表示你的 VPS 已经开启了 BBR，你已经大功告成了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_congestion_control = cubic</span><br></pre></td></tr></table></figure>
<h2 id="升级内核">升级内核</h2>
<h3 id="查看当前内核版本">查看当前内核版本</h3>
<p>由于 BBR 只能在 4.9 以上的内核中开启，如果内核低于 4.9 版本，则需要升级内核，4.9 版本以上的就可以跳过这一步了。据我所知，国内云主机很多默认镜像还是 4.4 的内核。输入<code>uname -r</code>可以查看当前的内核版本。</p>
<h3 id="通过-APT-升级内核">通过 APT 升级内核</h3>
<p>很多开启 BBR 的一键脚本都是手动下载新内核并编译安装的，但是手动升级内核存在着安全隐患，而且无法及时得到更新。</p>
<p>其实 Ubuntu 官方提供了升级最新内核的方式，那就是<code>linux-hwe-generic</code>软件包。Ubuntu 通过 apt 包管理工具提供了两个内核版本，一个是通用版本(General Availability/GA)，即最稳定的版本；一个是硬件启用版本(Hardware Enablement/HWE)，会跟随最新的内核更新。</p>
<p>我们可以通过输入<code>apt search linux-generic</code>看到这两个软件包。其实那些内核版本旧的装的就是<code>linux-generic</code>这个最稳定版本。</p>
<p>那么好了，这样就很明了了，我们就要安装<code>linux-generic-hwe</code>包即可，可以将 Ubuntu 升级为当前版本可用的最新稳定内核。Ubuntu 16.04 的包叫<code>linux-generic-hwe-16.04</code>，Ubuntu 18.04 的包叫<code>linux-generic-hwe-18.04</code>，可以以此类推。以 Ubuntu 16.04 为例，输入以下命令进行安装即可，重启后才会生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install linux-generic-hwe-16.04 -y</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<p>重启后，我们可以再次输入<code>uname -r</code>查看一下内核版本，我们可以看到，此时我的 Ubuntu 16.04 已经是 4.15 版本的内核了。</p>
<p>大家可能看到了还有一个叫做<code>linux-generic-hwe-16.04-edge</code>的包，那是做什么的呢？这个呢就相当于测试版吧，如果你想要使用更加新的内核，可以使用这个包。</p>
<h2 id="启用-BBR">启用 BBR</h2>
<h3 id="装载-BBR">装载 BBR</h3>
<p>此时，虽然内核已经升级好了，但还没有正式装载 BBR 模块，还无法在可用拥塞算法中查到。运行以下命令装载 BBR。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo modprobe tcp_bbr</span><br><span class="line">echo &quot;tcp_bbr&quot; | sudo tee -a /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure>
<p>此时，输入<code>sysctl net.ipv4.tcp_available_congestion_control</code>命令，就能看到 bbr 了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br></pre></td></tr></table></figure>
<h3 id="正式启用-BBR">正式启用 BBR</h3>
<p>执行以下命令，将 BBR 配置写入 sysctl.conf 文件，正式启用 BBR。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; | sudo tee -a /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; | sudo tee -a /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure>
<p>此时，BBR 已经启用完成，通过<code>sysctl net.ipv4.tcp_congestion_control</code>验证一下，可以看到现在使用的拥塞算法已经是 BBR 了，如图所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure>
<h2 id="后话">后话</h2>
<p>至此，已经完成了 Ubuntu 系统的内核升级和 TCP_BBR 的开启，享受高速网络吧。关于内核提升，虽然编译内核升级的方式也是有效的，但是还是更加推荐通过 APT 的方式升级内核。这既是官方推荐的方式，也是不容易出现问题的方式，还能跟随更新，何乐而不为呢。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装使用 Composer</title>
    <url>/posts/use-composer/</url>
    <content><![CDATA[<p>今天我想要安装 polr 短域名项目的时候，需要用到 Composer。期间遇到了一些问题，在这里记录一下安装使用 Composer 的问题和解决方案。</p>
<span id="more"></span>
<h2 id="安装-Composer">安装 Composer</h2>
<p>我选择使用<code>Composer 中国全量镜像</code>，这个是由 Laravel China 社区联合又拍云与优帆远扬共同合作推出的公益项目，旨在为广大 PHP 用户提供稳定和高速的 Composer 国内镜像服务。</p>
<p>虽然我是腾讯云的香港主机啦，但不知道为什么使用 Composer 官网极慢，所以也选择了使用国内镜像。</p>
<h3 id="安装">安装</h3>
<p>使用如下命令安装，如遇权限不足，可添加 sudo。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dl.laravel-china.org/composer.phar -O /usr/local/bin/composer</span><br><span class="line">chmod a+x /usr/local/bin/composer</span><br></pre></td></tr></table></figure>
<h3 id="查看当前版本">查看当前版本</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer -V</span><br></pre></td></tr></table></figure>
<h3 id="升级版本">升级版本</h3>
<p>此处升级命令连接的是官方服务器回合慢，不推荐。建议直接从国内镜像站下载更新。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer selfupdate</span><br></pre></td></tr></table></figure>
<h2 id="切换-Composer-镜像">切换 Composer 镜像</h2>
<h3 id="全局-推荐">全局(推荐)</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.laravel-china.org</span><br></pre></td></tr></table></figure>
<h3 id="单独使用">单独使用</h3>
<p>如果仅限当前工程使用镜像，去掉 -g 即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer config repo.packagist composer https://packagist.laravel-china.org</span><br></pre></td></tr></table></figure>
<h2 id="问题">问题</h2>
<ol>
<li>
<p>已存在 composer.lock 文件，先删除，再运行 composer install 重新生成。</p>
<p>composer.lock 缓存了之前的配置信息，从而导致新的镜像配置无效。</p>
</li>
<li>
<p>Your requirements could not be resolved to an installable set of packages.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Loading composer repositories with package information</span><br><span class="line">Installing dependencies from lock file</span><br><span class="line">Your requirements could not be resolved to an installable set of packages.</span><br><span class="line"></span><br><span class="line">  Problem 1</span><br><span class="line">    - Installation request for phpoffice/phpexcel 1.8.1 -&gt; satisfiable by phpoffice/phpexcel[1.8.1].</span><br><span class="line">    - phpoffice/phpexcel 1.8.1 requires ext-xml * -&gt; the requested PHP extension xml is missing from your system.</span><br><span class="line">  Problem 2</span><br><span class="line">    - phpoffice/phpexcel 1.8.1 requires ext-xml * -&gt; the requested PHP extension xml is missing from your system.</span><br><span class="line">    - maatwebsite/excel 2.1.6 requires phpoffice/phpexcel 1.8.* -&gt; satisfiable by phpoffice/phpexcel[1.8.1].</span><br><span class="line">    - Installation request for maatwebsite/excel 2.1.6 -&gt; satisfiable by maatwebsite/excel[2.1.6].</span><br></pre></td></tr></table></figure>
<p>解决方案：</p>
<p>以我使用的 php 版本 php7.2 为例，请根据自己使用的 php 版本进行修改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install php7.2-xml</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装时出现<code>Unzip with unzip command failed, falling back to ZipArchive class</code></p>
<p>解决方案：</p>
<p>同样以 php7.2 为例。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install php7.2-zip</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>php</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>配合GitHub的Git使用</title>
    <url>/posts/use-github-with-git/</url>
    <content><![CDATA[<p>一直以来我都觉得 GitHub 是一个对于程序员来说极为有助的一个平台。最近在学校老是在编程，我把代码都放在了 GitHub 上，Git 作为一个分布式版本控制软件，就成为了我的电脑和 GitHub 之间的桥梁。十分惭愧，我对 Git 和 GitHub 的使用还只会基本的操作，今天我就来讲一下这些基本操作。</p>
<span id="more"></span>
<h2 id="Git-简介">Git 简介</h2>
<p>引用自维基百科-<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvR2l0">git 词条<i class="fa fa-external-link-alt"></i></span>：</p>
<blockquote>
<p>git（/ɡɪt/）是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于 2005 年以 GPL 发布。最初目的是为更好地管理 Linux 内核开发而设计。应注意的是，这与 GNU Interactive Tools（一个类似 Norton Commander 界面的文件管理器）有所不同。<br>
git 最初的开发动力来自于 BitKeeper 和 Monotone。git 最初只是作为一个可以被其他前端（比如 Cogito 或 Stgit）包装的后端而开发的，但后来 git 内核已经成熟到可以独立地用作版本控制。很多著名的软件都使用 git 进行版本控制，其中包括 Linux 内核、<span class="exturl" data-url="aHR0cDovL1guT3Jn">X.Org<i class="fa fa-external-link-alt"></i></span> 服务器和 OLPC 内核等项目的开发流程。</p>
</blockquote>
<h2 id="Git-下载地址">Git 下载地址</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZA==">https://git-scm.com/download<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="前期准备">前期准备</h2>
<ol>
<li>
<p>既然我们的标题说了是要配合 GitHub 使用的，那么在 GitHub 上建一个库是有必要的。具体的建库过程在这里就不细说了，相信大家不会在这里被难住。</p>
</li>
<li>
<p>我们要通过 Git 和 GitHub 进行交互需要使用 ssh，我们需要在自己的电脑上生成 ssh-key 公钥，然后在 GitHub 上授权使用。</p>
<ol>
<li>在任意文件夹中，右键点击使用 Git Bash，弹出命令行窗口。</li>
<li>输入<code>ssh-keygen -t rsa -C &quot;你的GitHub账户邮箱&quot;</code>，回车。</li>
<li>接下来让你给密钥文件取名，可以直接回车跳过。</li>
<li>然后让你输入访问时的密码，直接回车跳过即可。</li>
<li>这样将会在当前文件夹生成文件或者<code>C:\Users\你的用户名\.ssh</code>路径下，如果在当前路径，请复制到后者。</li>
<li>打开生成的<code>id_rsa.pub</code>文件，里面就是你的公钥。</li>
<li>复制文件内容，打开 GitHub，点击<code>setting</code>。</li>
<li>在<code>Personal setting</code>中选择<code>SSH and GPG keys</code>菜单。</li>
<li>选择<code>New SSH keys</code>，添加 SSH 记录。Title 可以随便取，在 Key 框里将刚刚复制的文件内容复制进去。然后选择<code>Add SSH key</code>。</li>
<li>在刚刚的命令窗口中输入<code>ssh -T git@github.com</code>，中间有任何提醒，通过就好。等到窗口出现<code>Hi ***! You've successfully authenticated...</code>字样，说明已经成功。</li>
</ol>
</li>
<li>
<p>接下来我们就要把我们创建的库复制到本地。</p>
<ol>
<li>打开到你的目标文件夹，右键点击使用 Git Bash。</li>
<li>输入<code>git clone git@github.com:ZvonimirSun/test.git</code>命令（<code>clone</code>后的库地址要换成你自己的）。</li>
<li>至此基本完成任务。</li>
</ol>
</li>
</ol>
<h2 id="Git-常用命令">Git 常用命令</h2>
<p><img data-src="https://img.iszy.xyz/20190318220908.png" alt=""></p>
<h3 id="新建代码库">新建代码库</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<p>Git 的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>
<h3 id="增加-删除文件">增加/删除文件</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h3 id="代码提交">代码提交</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h3 id="分支">分支</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
<h3 id="标签">标签</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>
<h3 id="查看信息">查看信息</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>
<h3 id="远程同步">远程同步</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="撤销">撤销</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>
<h4 id="参考链接">参考链接</h4>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzNkMzNiY2FjNTRlNw==">基于 github 的 git 使用方法<i class="fa fa-external-link-alt"></i></span> &gt; <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTUvMTIvZ2l0LWNoZWF0LXNoZWV0Lmh0bWw=">常用 Git 命令清单<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Subtree实现Hexo主题自定义配置的同步</title>
    <url>/posts/wci14e/</url>
    <content><![CDATA[<p>通常我们的 hexo 博客由于都是静态文本文件，比较适合用 git 来进行管理。不过主题我们一般都是用 git clone 直接拉代码的，但 git 无法直接管理子文件夹中的其他 git 项目，所以你会发现直接 add 代码是不会包含主题文件夹中的变化的。不过为了方便迁移，最好还是能够通过 git 管理整个博客文件，包括对主题文件的修改，同时为了便于更新主题也不能舍弃主题的 git。所以我们采用 <code>fork + subtree</code> 的方案来解决这个问题。</p>
<span id="more"></span>
<h2 id="方案">方案</h2>
<p>通过<code>fork + subtree</code>的方案来解决 hexo 主题配置同步的问题。</p>
<h2 id="步骤">步骤</h2>
<h3 id="Fork-主题项目并拉取到本地">Fork 主题项目并拉取到本地</h3>
<p>首先呢就是 fork 了，fork 一下主题项目，然后你就获得了一个同名的，完全由你控制的主题项目。</p>
<p>比如说这个<code>NexT</code>，先访问<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">theme-next<i class="fa fa-external-link-alt"></i></span>页面，然后点下右上角的 Fork，这步就算完成了。然后把 Fork 出来的项目给拉取到本地，以备修改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/example/hexo-theme-next.git</span><br></pre></td></tr></table></figure>
<h3 id="处理已有修改-选">处理已有修改(选)</h3>
<p>这一步是可选的。如果你想要重新进行配置，或是你的博客刚刚创建，还没有及进行主题配置，那这步可以跳过。</p>
<p>出于方便升级的目的，想必你应该不会删除主题目录的<code>.git</code>文件夹吧。首先先在已经修改过的主题目录执行下<code>git pull</code>，以把代码更新到最新，把 conflict 都处理一下，于是我们得到了保留修改的最新主题代码，就跟往常升级主题的处理方法一样。</p>
<p>然后，我们可以清空刚刚拉取到本地的 Fork 版主题项目(除了.git 文件夹)。把刚刚升级好的全部代码复制过来(除了.git 文件夹)。</p>
<p>执行一下<code>git status</code>，我们应该可以看到我们对主题做的所有更改。然后，我们就可以把修改后的主题代码 push 到远程仓库了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;update theme&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<h3 id="通过-subtree-集成主题项目到站点项目里">通过 subtree 集成主题项目到站点项目里</h3>
<p>首先，先删除<code>themes/next</code>文件夹，并将修改 push 到站点仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf themes/next</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;delete theme next&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>然后绑定子项目，即修改后的主题项目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add -f next git@github.com:example/hexo-theme-next.git</span><br><span class="line">git subtree add --prefix=themes/next next master --squash</span><br></pre></td></tr></table></figure>
<p>如果不加 squash 参数，则子项目的 commit 记录都会加入到主项目中；加上 squash 参数则会把子项目的修改打包成一个 commit 加入到主项目中。</p>
<h3 id="更新和修改子项目">更新和修改子项目</h3>
<p>从子项目进行更新，并推送给主项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch next master</span><br><span class="line">git subtree pull --prefix=themes/next next master --squash</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>将修改推送到子项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree push --prefix=themes/next next master</span><br></pre></td></tr></table></figure>
<p>这样主项目就能和子项目保持同步更新，主题配置就不会丢失了。</p>
<h2 id="迁移博客">迁移博客</h2>
<p>当需要迁移博客的时候，只需要<code>git clone</code>你的主站点项目，然后执行以下语句。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add -f next git@github.com:example/hexo-theme-next.git</span><br></pre></td></tr></table></figure>
<p>接下来就可以像之前一样，用更新和修改子项目里的方法进行处理了。</p>
<h2 id="更新主题">更新主题</h2>
<p>这样子处理后的主题该怎样进行更新呢？</p>
<p>先在主题子项目下拉取官方 theme-next 代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull https://github.com/example/hexo-theme-next.git</span><br></pre></td></tr></table></figure>
<p>处理完 conflict 以后，push 到远程仓库，接着在主项目中更新下子项目即可。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 acme.sh 申请 Let&#39;s Encrypt 免费泛域名证书</title>
    <url>/posts/wild-card/</url>
    <content><![CDATA[<p>既然已经可以通过 Let’s encrypt 申请免费泛域名证书了，本着生命不息，折腾不止的态度，我自然是要试试的。可以看到本站已经用上了 Let’s encrypt 的泛域名证书，本文就对我这次申请过程做一个记录。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>关注 Let’s Encrypt 的免费泛域名证书也有一段时间了。毕竟像我这种穷学生使用不起高大上的付费 wildcard 的，之前一直是每个子域名申请一个 ssl 证书。但是由于我老是折腾，也没怎么注意备份证书，就老是在申请，可太麻烦了。这次申请 Let’s Encrypt 的免费泛域名证书，我特意备份好了，以后每个子域名都能用这个证书就方便多了。</p>
<p>Let’s Encrypt 推出 ACME V2 和泛域名证书的支持也是一波三折，一月多本来就要推出了，因为技术原因，数次推迟，终于在本月 14 号正式宣布上线。由于是刚刚发布，暂时还没有多少一键申请的支持。好在 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span> 已经可以支持，虽然由于 DNS API 的需要，仅支持有限的解析商，但已经足够方便了。</p>
<p>下面上官方公告的截取，让人十分激动。</p>
<blockquote>
<p>We’re pleased to announce that ACMEv2 and wildcard certificate support is live! With today’s new features we’re continuing to break down barriers for HTTPS adoption across the Web by making it even easier for every website to get and manage certificates.</p>
</blockquote>
<h2 id="准备工作">准备工作</h2>
<ul>
<li>首先你需要有一个域名</li>
<li>你要将你的域名在支持的解析商处解析。 - 可以点击<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05laWxwYW5nL2FjbWUuc2gvYmxvYi9tYXN0ZXIvZG5zYXBpL1JFQURNRS5tZA==">这里<i class="fa fa-external-link-alt"></i></span>查看支持的解析商，没有被列出来即不支持。 - 我注册域名所在的 Namecheap 就不在支持的列表内。</li>
<li>然后你需要有一台运行 Linux 系统的 VPS 来执行命令。虚拟机或许也行？没有试过。</li>
</ul>
<h2 id="步骤">步骤</h2>
<p>本文以在 CloudXNS 解析的 <span class="exturl" data-url="aHR0cDovL2lzenkubWU=">iszy.me<i class="fa fa-external-link-alt"></i></span> 为例，其他域名参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05laWxwYW5nL2FjbWUuc2gvYmxvYi9tYXN0ZXIvZG5zYXBpL1JFQURNRS5tZA==">这里<i class="fa fa-external-link-alt"></i></span>。我本次系统环境为 Ubuntu 16.04，其他系统可以类比完成。</p>
<h3 id="首先安装依赖环境">首先安装依赖环境</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp;  apt-get install curl -y &amp;&amp; apt-get install cron -y &amp;&amp; apt-get install socat -y</span><br></pre></td></tr></table></figure>
<h3 id="安装-acme-sh">安装 <span class="exturl" data-url="aHR0cDovL2FjbWUuc2g=">acme.sh<i class="fa fa-external-link-alt"></i></span></h3>
<h4 id="在线安装">在线安装</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O -  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>
<h4 id="通过-git-安装">通过 git 安装</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Neilpang/acme.sh.git</span><br><span class="line"><span class="built_in">cd</span> ./acme.sh</span><br><span class="line">./acme.sh --install</span><br></pre></td></tr></table></figure>
<h3 id="查看-API-Key-和-Secret">查看 API Key 和 Secret</h3>
<p>在用户中心查看。</p>
<p><img data-src="https://img.iszy.xyz/20190318221329.png" alt=""></p>
<h3 id="输入环境参数">输入环境参数</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CX_Key=<span class="string">&quot;your api key&quot;</span></span><br><span class="line"><span class="built_in">export</span> CX_Secret=<span class="string">&quot;your secret key&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="申请证书">申请证书</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --issue --dns dns_cx -d iszy.me -d *.iszy.me</span><br></pre></td></tr></table></figure>
<p>你的证书将会被保存在<code>~/.acme.sh/iszy.me/</code>路径下。包含文件<code>ca.cer</code>、<code>fullchain.cer</code>、<code>iszy.me.cer</code>、<code>iszy.me.conf</code>、<code>iszy.me.csr</code>、<code>iszy.me.csr.conf</code>、<code>iszy.me.key</code>，一般使用<code>fullchain.cer</code>和<code>iszy.me.key</code>就可以了。</p>
<p>**注意：**第一个<code>-d</code>后面不能直接写泛域名，一定要写普通域名，像我这样，后面的<code>-d</code>就支持写泛域名了。</p>
<h3 id="续签">续签</h3>
<p>由于 Let’s encrypt 的证书有效期为 3 个月，需要续签。我也不懂其他的，就直接用 Crontab 吧，简单直接。我暂时还没有弄，因为我其实是在我一台瞎折腾的服务器上申请的，续签的问题嘛，以后再说吧。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>acme.sh</tag>
        <tag>证书</tag>
        <tag>Let&#39;s Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>经典压缩软件WinRAR 6.10官方中文无广告正式版</title>
    <url>/posts/winrar/</url>
    <content><![CDATA[<p>国内代理版本的 WinRAR 无论是否有 key，都有广告，这怎么能忍，尤其是其实有简体中文版本的无广告商业付费 WinRAR 的时候。在这里分享一下简体中文版本的无广告商业付费 WinRAR 的地址。</p>
<span id="more"></span>
<h2 id="说明">说明</h2>
<p>这个不是中国官网上代理的所谓个人免费版本，无论是否有 key 文件，都会有广告，实在是无法忍受。直接去 WinRAR 官网下载的简体中文版本也是国内代理的版本，也是不对的。</p>
<p>注意，有下图字样的才是正确的版本。</p>
<p><img data-src="https://img.iszy.xyz/20190318221343.png" alt=""></p>
<h2 id="官网下载试用地址">官网下载试用地址</h2>
<p>最新版本<code>6.10</code>，下载链接已更新。</p>
<ul>
<li>简体中文 64 位：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2luLXJhci5jb20vZmlsZWFkbWluL3dpbnJhci12ZXJzaW9ucy9zYy9zYzIwMjIwMTI3L3dyci93aW5yYXIteDY0LTYxMHNjLmV4ZQ==">点击下载<i class="fa fa-external-link-alt"></i></span></li>
<li>简体中文 32 位：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2luLXJhci5jb20vZmlsZWFkbWluL3dpbnJhci12ZXJzaW9ucy9zYy9zYzIwMjIwMTI3L3dyci93aW5yYXIteDMyLTYxMHNjLmV4ZQ==">点击下载<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="支持正版">支持正版</h2>
<p>WinRAR 一路走来，陪伴了我们那么久，也是受盗版侵害非常严重的软件之一。本站不提供破解版和补丁，想要用盗版的，我相信一定有办法找到的，网络上的注册机、破解补丁到现在的最新版本都还是适用的。</p>
<p>如果有能力，还是希望大家能够购买正版支持一下自己一路用下来的软件。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>WinRAR</tag>
        <tag>无广告</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch使用text类型字段排序报错</title>
    <url>/posts/wn3g9x/</url>
    <content><![CDATA[<p>在使用 ElasticSearch 进行查询时，排序是相当常见的一种操作。不过，一般情况下，我们都会对数字、日期类型等进行排序，较少直接对 text 类型进行排序。今天偶然遇到了需要对 text 类型进行排序的情况，就一不小心掉坑里了，这边记录下解决方法。</p>
<span id="more"></span>
<h2 id="问题还原">问题还原</h2>
<p>我们的问题是，对 text 类型进行排序时，ES 会报错。</p>
<p>错误内容形如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fielddata is disabled on text fields by default.  Set `fielddata=true` on</span><br><span class="line">[`your_field_name`] in order to load  fielddata in memory by uninverting the</span><br><span class="line">inverted index. Note that this can however use significant memory.</span><br></pre></td></tr></table></figure>
<h2 id="解决问题">解决问题</h2>
<p>默认的 text 类型字段的 mapping 大概是这样的。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;dm&quot;</span>: &#123; <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据上面的错误信息，我们可以去 ES 的文档中查一下<code>Fielddata</code>这个属性的说明。</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS9jdXJyZW50L3RleHQuaHRtbCNmaWVsZGRhdGEtbWFwcGluZy1wYXJhbQ==">fielddata mapping parameter<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p><img data-src="https://img.iszy.xyz/20210224173812.png" alt="fielddata mapping parameter"></p>
<p>按照官方的说明，text 类型的字段默认不支持聚合、排序等操作，此时如果进行聚合、排序等操作就会出现上文所示的错误信息。</p>
<h3 id="第一种方法">第一种方法</h3>
<p>那么，第一种启用 text 字段的聚合、排序等操作的方法也就清楚了，就是在 mapping 中将<code>fielddata</code>设置为<code>true</code>，此属性默认为<code>false</code>。这样，就能对该 text 字段进行常规的聚合、排序等操作了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;my_field&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fielddata&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过需要注意的是，启用<code>fielddata</code>会将数据存储到程序的堆中，可能会带来性能、内存使用量增大等问题，这通常是没有必要的。</p>
<h3 id="第二种方法【推荐】">第二种方法【推荐】</h3>
<p><img data-src="https://img.iszy.xyz/20210224180354.png" alt="Before enabling fielddata"></p>
<p>为了解决上面提到的性能和资源的浪费，官方更推荐使用多字段映射的方式。也就是一方面保留原字段来进行全文搜索，另一方面使用一个未做处理的<code>keyword</code>字段来进行聚合、排序等操作。配置方法如下示例所示。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;my_field&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;keyword&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这样配置以后，在进行搜索时使用<code>my_field</code>字段，在进行聚合、排序等操作时使用<code>my_field.keyword</code>字段，这样能够比直接启用<code>fielddata</code>获得更好的性能表现。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Office 365 家庭版开车圆满结束~</title>
    <url>/posts/y4i72s/</url>
    <content><![CDATA[<p>刚刚从 Office 365 个人版升级到了 Office 365 家庭版，<s>准备开一波车，有兴趣的快来啊</s>，<strong>人齐啦，圆满结束</strong>。</p>
<span id="more"></span>
<h2 id="开车">开车</h2>
<p>Office 365 家庭版可以共享 5 人连带自己总共 6 人同时使用，相当于六个人都获得了一个完整的 Office 365 个人版体验。也就是共享此订阅的每个用户都可以在其所有设备上安装高级 Office 应用，并且可同时在 5 台设备上登录，每人均可获取 1 TB 的 OneDrive 云存储空间，这样。为了减少开销，果断开车呀。</p>
<p>Office 365 家庭版一年价格是 499，平摊一下，每人 80 这样，欢迎想要长期使用的朋友来。有兴趣的可以在评论区留言哈，一定要留有效邮箱哈，不然我没法联系你。我会随时在下面更新最新情况。我是会长期续费的，如果有朋友不想续费了，提前跟我说一声，我在找到新朋友共享后再给你换下来，这样子。</p>
<h2 id="订阅情况">订阅情况</h2>
<p>已经人齐啦，快乐~</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Office</tag>
        <tag>共享</tag>
      </tags>
  </entry>
</search>
